{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Loop\n\u2301\n\n\n\n\n\n\nIntroduction\n\u2301\n\n\nLoop\n is an app template for building an automated insulin delivery system. It is a stone resting on the boulders of work done by many others.  \n\n\nThe app is built on top of \nLoopKit\n. LoopKit is a set of frameworks that provide data storage, retrieval, and calculation, as well as boilerplate view controllers used in Loop.\n\n\n\n\nImportant\n\n\nPlease understand that this project:\n\n\n\n\nIs highly experimental\n\n\nIs not approved for therapy\n\n\n\n\nYou take full responsibility for building and running this system and do so at your own risk.\n\n\n\n\nUsing the open-source Loop app template, you can build an insulin delivery system that uses specific commercial and open-source hardware and software technologies to bring together the insulin pump, continuous glucose monitor (CGM), and insulin dosing algorithm to create a continuous insulin basal dosing \u201cLoop\u201d.  This Loop predicts future glucose based on basal-rate schedules, carbohydrate intake, insulin on board, and current CGM readings.  These glucose forecasts provide Loop with the information needed to recommend a temporary basal rate to attain a targeted glucose range in the future.  The system can either operate as an \u201copen-loop\u201d by making recommendations to the user for their approval before enacting or as a \u201cclosed-loop\u201d by automatically setting the recommended temporary basal rate. \n\n\nYou should undertake this project in stages. For example, first \u201copen loop\u201d to familiarize yourself with Loop\u2019s operation. Also, investigate the code to ensure you understand what it is recommending and why. Then when you progress to \u201cclosed-loop\u201d, do so safely by starting with appropriate safety limits and only progress to higher limits after several days of no lows. Please ask questions at this point about why Loop is making the recommendations it does.  It should be similar to the therapy decisions you would make yourself.  If the recommendations it makes are different than you would make, try to figure out why.\n\n\nDevelopment History\n\u2301\n\n\nLoop has been developed as an open-source, shared project.  For a really interesting read about the history of Loop development, check out this \nHistory of Loop and LoopKit\n post, written by Loop developer Nate Racklyeft.  The project continues to be a labor-of-love by a community of users; maintained and improved by volunteers.\n\n\nHow to Use These Docs\n\u2301\n\n\n\n\nUse the navigation menu at the top of the screen to find the info you are looking for.\n\n\nA Table of Contents for the current page is always displayed on the left side of the screen.\n\n\n\n\nYou can search the Loop Docs site by clicking the \n icon.\n\n\n\n\n\n\n\n\nStay in the Loop!\n\u2301\n\n\nSign up for the Loop Users announcement list\n to stay informed of critical issues that may arise.\n\n\nJoin the Zulipchat at \nhttps://loop.zulipchat.com\n\n\nThere is also a \nLooped Facebook Group\n that you might wish to join for support.  When you request to join the group, please remember to check your messages box on facebook and respond to the message.\n\n\nContribute\n\u2301\n\n\nPlease consider submitting any updates and improvements to the documentation that you want to share by submitting a Pull Request to the \nloopdocs repo\n. For more information on how to contribute to an open-source project, this \nHow to Contribute to Open Source\n guide may be useful. Also, please review the Loop \nLICENSE\n and Loop \nCODE_OF_CONDUCT\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-loop", 
            "text": "", 
            "title": "Welcome to Loop"
        }, 
        {
            "location": "/#introduction", 
            "text": "Loop  is an app template for building an automated insulin delivery system. It is a stone resting on the boulders of work done by many others.    The app is built on top of  LoopKit . LoopKit is a set of frameworks that provide data storage, retrieval, and calculation, as well as boilerplate view controllers used in Loop.   Important  Please understand that this project:   Is highly experimental  Is not approved for therapy   You take full responsibility for building and running this system and do so at your own risk.   Using the open-source Loop app template, you can build an insulin delivery system that uses specific commercial and open-source hardware and software technologies to bring together the insulin pump, continuous glucose monitor (CGM), and insulin dosing algorithm to create a continuous insulin basal dosing \u201cLoop\u201d.  This Loop predicts future glucose based on basal-rate schedules, carbohydrate intake, insulin on board, and current CGM readings.  These glucose forecasts provide Loop with the information needed to recommend a temporary basal rate to attain a targeted glucose range in the future.  The system can either operate as an \u201copen-loop\u201d by making recommendations to the user for their approval before enacting or as a \u201cclosed-loop\u201d by automatically setting the recommended temporary basal rate.   You should undertake this project in stages. For example, first \u201copen loop\u201d to familiarize yourself with Loop\u2019s operation. Also, investigate the code to ensure you understand what it is recommending and why. Then when you progress to \u201cclosed-loop\u201d, do so safely by starting with appropriate safety limits and only progress to higher limits after several days of no lows. Please ask questions at this point about why Loop is making the recommendations it does.  It should be similar to the therapy decisions you would make yourself.  If the recommendations it makes are different than you would make, try to figure out why.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#development-history", 
            "text": "Loop has been developed as an open-source, shared project.  For a really interesting read about the history of Loop development, check out this  History of Loop and LoopKit  post, written by Loop developer Nate Racklyeft.  The project continues to be a labor-of-love by a community of users; maintained and improved by volunteers.", 
            "title": "Development History"
        }, 
        {
            "location": "/#how-to-use-these-docs", 
            "text": "Use the navigation menu at the top of the screen to find the info you are looking for.  A Table of Contents for the current page is always displayed on the left side of the screen.   You can search the Loop Docs site by clicking the   icon.", 
            "title": "How to Use These Docs"
        }, 
        {
            "location": "/#stay-in-the-loop", 
            "text": "Sign up for the Loop Users announcement list  to stay informed of critical issues that may arise.  Join the Zulipchat at  https://loop.zulipchat.com  There is also a  Looped Facebook Group  that you might wish to join for support.  When you request to join the group, please remember to check your messages box on facebook and respond to the message.", 
            "title": "Stay in the Loop!"
        }, 
        {
            "location": "/#contribute", 
            "text": "Please consider submitting any updates and improvements to the documentation that you want to share by submitting a Pull Request to the  loopdocs repo . For more information on how to contribute to an open-source project, this  How to Contribute to Open Source  guide may be useful. Also, please review the Loop  LICENSE  and Loop  CODE_OF_CONDUCT .", 
            "title": "Contribute"
        }, 
        {
            "location": "/faqs/docs-faqs/", 
            "text": "Using This Site FAQs\n\u2301\n\n\nThis website is a step-by-step guide on how to build your Loop app. It is totally understandable to be intimidated and worried that this will be too technical...but please realize that this is actually as simple as reading, copying a few lines and clicking a few buttons...REALLY. And these directions will tell you exactly how to do that, and in particular how to navigate this site to make that easy.\n\n\nWhere do I start? I don't know what Loop is.\n\u2301\n\n\nThe best thing to do is to start by learning about Loop using the FAQs pages. The short answer is that Loop is an iPhone app that helps automate your insulin delivery, based on CGM data and user inputs, to keep blood glucose within range. It requires certain gear (pump, CGM, iPhone or iPod touch, and a RileyLink) and a computer to build the app.\n\n\nClick on the image below to watch a short \nIntroduction to Loop video\n and then read the rest of these FAQs pages. \n\n\n\n\nThis looks so hard. I don't know if I can do it!\n\u2301\n\n\nThat isn't a question, but I do have an answer. ;) Building Loop app is actually really quite simple. There are a lot of steps only because they are laid out into short segments so that you can take breaks if you want.\n\n\n\n\nEach step is designed to end at a natural stopping or resting point, in case you get interrupted or want to take a break.\n\n\nSome of the steps only take 5 minutes to finish...so don't be intimidated just by the number of steps.\n\n\nThe steps are listed in the order that you'd do each task. So start at step 1 and proceed forward.\n\n\nEach step ends with a \"next step\" link to guide you to the next steps you'll need to do. Just keep swimming onto the next little step or take a break and come back later.\n\n\n\n\n\n\nOne step at a time...\n\n\nDon't look at the whole build process at once...that's overwhelming. Instead view it as several smaller tasks to be accomplished and work one step at a time. Start at Step 1 and just read slowly and follow the screenshots. Don't skip steps or skip paragraphs.\n\n\n\n\nWhat if I get stuck?\n\u2301\n\n\nIf you get stuck, there are several things that can help:\n\n\n\n\nScroll back up in the directions and see if you maybe missed a step accidentally. Might even be that you missed a paragraph.\n\n\nCheck and compare your screen's display with what the screenshots are highlighting. Does your screen seem similar? Or does yours have an error message? If you have an error message, see if it helps guide you to the problem.\n\n\nIf you just get stumped, post in \nLooped Group (Facebook)\n or \nZulipchat\n and ask for help. Lots of people standing by to help each other. If you have a screenshot of where you are stuck and what part of the directions you are on, that will help a lot.\n\n\n\n\nSo, I build the app and then I'm done?\n\u2301\n\n\nNope...we wouldn't just leave you dangling like that. There's also an important walk-thru for how to set up your app for the first time. The new displays and settings are all explained in the \"Set up App\" section of this website. Check it out and follow along with each page step-by-step, just like you did for building. This way you'll learn valuable tips along the way too. Do similar for the \"Operate\" section of these docs...those are very helpful for understanding how you will use the app to enter meals, edit entries, bolus, etc.", 
            "title": "Using This Site FAQs"
        }, 
        {
            "location": "/faqs/docs-faqs/#using-this-site-faqs", 
            "text": "This website is a step-by-step guide on how to build your Loop app. It is totally understandable to be intimidated and worried that this will be too technical...but please realize that this is actually as simple as reading, copying a few lines and clicking a few buttons...REALLY. And these directions will tell you exactly how to do that, and in particular how to navigate this site to make that easy.", 
            "title": "Using This Site FAQs"
        }, 
        {
            "location": "/faqs/docs-faqs/#where-do-i-start-i-dont-know-what-loop-is", 
            "text": "The best thing to do is to start by learning about Loop using the FAQs pages. The short answer is that Loop is an iPhone app that helps automate your insulin delivery, based on CGM data and user inputs, to keep blood glucose within range. It requires certain gear (pump, CGM, iPhone or iPod touch, and a RileyLink) and a computer to build the app.  Click on the image below to watch a short  Introduction to Loop video  and then read the rest of these FAQs pages.", 
            "title": "Where do I start? I don't know what Loop is."
        }, 
        {
            "location": "/faqs/docs-faqs/#this-looks-so-hard-i-dont-know-if-i-can-do-it", 
            "text": "That isn't a question, but I do have an answer. ;) Building Loop app is actually really quite simple. There are a lot of steps only because they are laid out into short segments so that you can take breaks if you want.   Each step is designed to end at a natural stopping or resting point, in case you get interrupted or want to take a break.  Some of the steps only take 5 minutes to finish...so don't be intimidated just by the number of steps.  The steps are listed in the order that you'd do each task. So start at step 1 and proceed forward.  Each step ends with a \"next step\" link to guide you to the next steps you'll need to do. Just keep swimming onto the next little step or take a break and come back later.    One step at a time...  Don't look at the whole build process at once...that's overwhelming. Instead view it as several smaller tasks to be accomplished and work one step at a time. Start at Step 1 and just read slowly and follow the screenshots. Don't skip steps or skip paragraphs.", 
            "title": "This looks so hard. I don't know if I can do it!"
        }, 
        {
            "location": "/faqs/docs-faqs/#what-if-i-get-stuck", 
            "text": "If you get stuck, there are several things that can help:   Scroll back up in the directions and see if you maybe missed a step accidentally. Might even be that you missed a paragraph.  Check and compare your screen's display with what the screenshots are highlighting. Does your screen seem similar? Or does yours have an error message? If you have an error message, see if it helps guide you to the problem.  If you just get stumped, post in  Looped Group (Facebook)  or  Zulipchat  and ask for help. Lots of people standing by to help each other. If you have a screenshot of where you are stuck and what part of the directions you are on, that will help a lot.", 
            "title": "What if I get stuck?"
        }, 
        {
            "location": "/faqs/docs-faqs/#so-i-build-the-app-and-then-im-done", 
            "text": "Nope...we wouldn't just leave you dangling like that. There's also an important walk-thru for how to set up your app for the first time. The new displays and settings are all explained in the \"Set up App\" section of this website. Check it out and follow along with each page step-by-step, just like you did for building. This way you'll learn valuable tips along the way too. Do similar for the \"Operate\" section of these docs...those are very helpful for understanding how you will use the app to enter meals, edit entries, bolus, etc.", 
            "title": "So, I build the app and then I'm done?"
        }, 
        {
            "location": "/faqs/FAQs/", 
            "text": "General Loop FAQs\n\u2301\n\n\nWelcome to LoopDocs - a place for all things Frequently Asked.\n\n\nWhat is Loop?\n\u2301\n\n\nClick on the image below to watch a short \nIntroduction to Loop video\n.\n\n\n\n\nWhat do I need to Loop?\n\u2301\n\n\nLoop has both hardware and software requirements. In general, to use Loop you need to have seven components.\n\n\n\n\nCompatible insulin pump: \nMedtronic or Omnipod\n\n\nCompatible CGM\n\n\nRileyLink\n\n\nCompatible iPhone/iPod Touch\n\n\nApple computer running Mojave macOS 10.14.3 or later\n\n\nXcode (a free Apple application)\n\n\nApple Developer Membership\n\n\n\n\n\n\n\n\n\n\n\nCan I download Loop from the App store?\n\u2301\n\n\nNo. Loop is not available for download. You must build your own Loop app.\n\n\nBut don't worry, building your Loop app is actually quite easy and that's what these docs are all about. The harder part will be having the patience to read all the documents before you start. New Loop users are so excited to get started that they skip reading all the great info that these docs contain. So, as you begin the build...please include time to read the documents that follow what happens AFTER you successfully build your Loop app.\n\n\nIf you have any questions, these docs have a nice search feature in the dark blue top menu bar that may help you find your answers pretty quickly too.\n\n\nCan I use an android phone for Loop?\n\u2301\n\n\nNo, this is purely iPhone or iPod touch.\n\n\nDo I have to be \"tech-smart\" to build Loop?\n\u2301\n\n\nNo. You do not need any experience in code or computers to build Loop. If you have already owned an Apple computer and iPhone, you already have the required level of experience. Beyond that, simply read the directions slowly and diligently...all the information you will need are in these documents.\n\n\nOften times the non-tech people do better than the tech people in building Loop. Why? Because the non-tech people take the time to read slowly and look at the screenshots in the directions. The tech people often skim read and miss sentences...which then leads to build errors that have to be retraced and fixed.\n\n\nIs there a cheat sheet for a school nurse to use?\n\u2301\n\n\nSure, you can give this one a try. \nSchool nurse's cheat sheet download\n\n\nHow long does it take to build Loop?\n\u2301\n\n\nThe answer is varied, but a few hours from start to finish, depending on where you are starting and how comfortable you are with your computer.\n\n\nIf you'd rather break it up into several shorter bits of effort, the \nBuild App\n section is divided into convenient stopping points with Time Estimates for each step. You can do one or more steps depending on what kind of time you have available.\n\n\nDoes Loop cost money?\n\u2301\n\n\nYes, there are some costs, beyond the obvious costs of owning a pump and CGM.\n\n\nThe \nRileyLink kit\n costs $150. This is a one-time cost and many people still have their original RileyLinks from nearly 3 years ago running just fine. I highly recommend purchasing two RileyLinks when financially feasible, to have one as a backup in case of accidental damage.\n\n\nThe Apple Developer License can be done for free, however, you will have to rebuild your Loop app every 7 days. That could get very tedious. The $99 annual Apple Developer program enrollment is an excellent investment.\n\n\nThere are no other costs, ongoing or initial, to use Loop.\n\n\nDo I need to own my own Apple computer?\n\u2301\n\n\nYou don't have to own your own Apple computer, but you do need to at least borrow one. It would be really good to have longer term ability to borrow that computer again for \nupdating Loop\n later, when needed.\n\n\nIf you are borrowing an Apple computer, you should ask the person to (1) update to Mojave and (2) \ndownload Xcode for free\n before you get together to build your Loop app. The updates and download of Xcode can take a couple hours depending on the person's internet speed...so best to do those steps well ahead of time to save trouble.\n\n\nCan I use a PC or Windows computer to build?\n\u2301\n\n\nYes, you can...sort of. There is a hacked way of installing macOS on a Windows computer called \"Virtual Machine\". \nThis link\n may provide some helpful information for that if you want to learn more...but it's up to you and Google if you hit a road block. These docs do not provide troubleshooting tips for Virtual Machine installation or use.\n\n\nHow often do I need to get on the computer for Loop?\n\u2301\n\n\nThe short answer is (1) when you first build and (2) once per year minimum after that. (If you decide to use a free Apple Developer Account, you will need to get on the computer every 7 days.)\n\n\nThe longer answer is that Loop code is updated periodically to include new features and bug fixes. When those updates are released, you'll need access to an Apple computer again to update your Loop app.  Loop updates are not available through the iPhone's app store...instead you do the app update yourself with \nupdate instructions here\n. In general, probably a few times a year there are updates to Loop released that you'd want to take the time to install.\n\n\nWill I need to build a new Loop if I switch between Medtronic and Omnipod?\n\u2301\n\n\nNo. Loop will have the option to move between different pump types from within the same Loop app. You'll simply use the \"Switch from Omnipods\" or \"Delete Pump\" options to move to the other kind of pump.\n\n\nCan I use someone else's Apple Developer account for my Loop build?\n\u2301\n\n\nTechnically, yes...however there are major drawbacks. The person's developer account can only be \"linked\" to a limited number of build computers. So one person \"loaning out\" their developer license to a lot of people will quickly exceed the number of allowed computers. In those cases, that person will be told they need to revoke the certificates on some computers (essentially dropping old ones to make room for new ones). When they do that, they may have forgotten about your Loop app on your computer. When they revoke your computer's certificate (and they can do that without you knowing through their developer portal), your Loop app will immediately stop working and not even open.\n\n\nYour Loop app will also die immediately if their developer account is not renewed or expires. Your Loop updates will also not be able to be built unless that person maintains the developer license agreement updates.\n\n\nMoral of the story, out of all the ways to save money...borrowing someone's developer account is not a good place to save money. You could find yourself unexpectedly without a Loop app without notice.\n\n\nCan I use MY Apple Developer account to build for others?\n\u2301\n\n\nTechnically yes...however, there are reasons this is discouraged. When you build for others, you must be careful to not unintentionally revoke the signing certificate that had been used for other people's apps (see note in FAQ above). You also need to let the people know that the MAXIMUM their app will last is 12 months. It will need to be rebuilt no matter what every 12 months.\n\n\nBut the biggest issue with building for others is that they may be left without a decent method of getting Loop updates. There are a lot of new Loopers on Omnipod system and their apps will likely need updating on a regular basis over the first year. Unless you plan on meeting with that person regularly to update their app, you could leave them on an old app that doesn't work as well as the new versions.\n\n\nHow can I find a compatible pump? supplies?\n\u2301\n\n\nThere is a \nwhole page with detailed information about Medtronic pumps\n; how to find them, how to find supplies, and assessing whether your Medtronic pump is compatible. Please check out that page for more info.\n\n\nWith the addition of Omnipod support, you can also now use Omnipod suppliers the way you'd normally source them.\n\n\nCan I pay someone else to do this?\n\u2301\n\n\nNOOOO...you really need to figure this out yourself. This is an automated insulin delivery system and you really need to know how to build and operate this yourself.\n\n\nWhat if I lose my RileyLink?\n\u2301\n\n\nFor Medtronic users, you simply go back to old school pump use until you get a new RileyLink. You can either let your temp basal finish by itself (30 minutes or less) or cancel the temp basal on the pump's menu. For bolusing, you'd go back to using the pump's bolus commands. When you get a RileyLink (either finding your old one or getting your backup RileyLink out) and Loop running again, you'll want to do one thing. Enter in any carbs to Loop that you may have eaten in the recent past that could still be affecting blood glucose. While Loop will read whatever insulin deliveries had happened while the RileyLink was missing, it will not read any carbs you entered into the pump...so make sure to add those to Loop and backdate them to the time they were eaten. That will help make the transition smoother to Looping again.\n\n\nFor pod users, your pod will finish any currently running temporary basal rate and then revert back to your scheduled basal rate. Without a RileyLink, you will not be able to affect any pod use; no basal changes, suspends, or boluses. If you have a backup RileyLink, you can simply connect to the new RileyLink on the same Loop app and it will work with the existing pod session. If you don't have a backup RileyLink, you'll have to remove the pod and start a new pod paired with your PDM until you get a new RileyLink.\n\n\nWhat if I lose or get a new iPhone?\n\u2301\n\n\nWhen you get a new iPhone, Loop will need to be built onto that new iPhone in the same way that you built on your old iPhone. Loop will not restore from any iCloud or iTunes backups, so make sure you plan on finding an Apple computer to rebuild on before you plan on Looping with the new iPhone.\n\n\nWhat about other pumps? When will they Loop?\n\u2301\n\n\nHey now...let's be grateful for what we have first. The ability to use Loop is the result of tremendous amounts of effort, time, and sacrifice by volunteers. Cracking the pumps for Loop use is a large undertaking. If and when another set of people spend a large amount of time figuring out other pumps, then they could conceivably be added to Loop. But, you don't need to let us know that you'd love to see more pumps compatible with Loop. So would we. There is just an awful lot of work that needs to happen and it is not easy nor quick.\n\n\nTandem pumps are not Loop compatible.\nAnimas pumps are not Loop compatible.\nDASH pods are not Loop compatible.\nAnd those all likely won't be compatible anytime in the future.\n\n\nCan I have more than one Loop app on a phone?\n\u2301\n\n\nYes, technically possible. You can have multiple Loop apps built onto the same iPhone. However, having multiple Loop apps on a single phone may lead to unexpected conflicts that can negatively affect your Loop's ability to stay green (keep looping). Additionally, your pod will only work on one Loop app at a time anyways. So for smooth looping, just keep one Loop app on any phone for looping use. \n\n\nWill I be able to Loop on a plane? Or in the mountains?\n\u2301\n\n\nYes. Loop does not require internet or cell coverage to work. So long as the Looper has Bluetooth turned on on the iPhone (or iPod touch), then the Dexcom and RileyLink will still be able to do their work with Loop and your pump/pod.", 
            "title": "General Loop FAQs"
        }, 
        {
            "location": "/faqs/FAQs/#general-loop-faqs", 
            "text": "Welcome to LoopDocs - a place for all things Frequently Asked.", 
            "title": "General Loop FAQs"
        }, 
        {
            "location": "/faqs/FAQs/#what-is-loop", 
            "text": "Click on the image below to watch a short  Introduction to Loop video .", 
            "title": "What is Loop?"
        }, 
        {
            "location": "/faqs/FAQs/#what-do-i-need-to-loop", 
            "text": "Loop has both hardware and software requirements. In general, to use Loop you need to have seven components.   Compatible insulin pump:  Medtronic or Omnipod  Compatible CGM  RileyLink  Compatible iPhone/iPod Touch  Apple computer running Mojave macOS 10.14.3 or later  Xcode (a free Apple application)  Apple Developer Membership", 
            "title": "What do I need to Loop?"
        }, 
        {
            "location": "/faqs/FAQs/#can-i-download-loop-from-the-app-store", 
            "text": "No. Loop is not available for download. You must build your own Loop app.  But don't worry, building your Loop app is actually quite easy and that's what these docs are all about. The harder part will be having the patience to read all the documents before you start. New Loop users are so excited to get started that they skip reading all the great info that these docs contain. So, as you begin the build...please include time to read the documents that follow what happens AFTER you successfully build your Loop app.  If you have any questions, these docs have a nice search feature in the dark blue top menu bar that may help you find your answers pretty quickly too.", 
            "title": "Can I download Loop from the App store?"
        }, 
        {
            "location": "/faqs/FAQs/#can-i-use-an-android-phone-for-loop", 
            "text": "No, this is purely iPhone or iPod touch.", 
            "title": "Can I use an android phone for Loop?"
        }, 
        {
            "location": "/faqs/FAQs/#do-i-have-to-be-tech-smart-to-build-loop", 
            "text": "No. You do not need any experience in code or computers to build Loop. If you have already owned an Apple computer and iPhone, you already have the required level of experience. Beyond that, simply read the directions slowly and diligently...all the information you will need are in these documents.  Often times the non-tech people do better than the tech people in building Loop. Why? Because the non-tech people take the time to read slowly and look at the screenshots in the directions. The tech people often skim read and miss sentences...which then leads to build errors that have to be retraced and fixed.", 
            "title": "Do I have to be \"tech-smart\" to build Loop?"
        }, 
        {
            "location": "/faqs/FAQs/#is-there-a-cheat-sheet-for-a-school-nurse-to-use", 
            "text": "Sure, you can give this one a try.  School nurse's cheat sheet download", 
            "title": "Is there a cheat sheet for a school nurse to use?"
        }, 
        {
            "location": "/faqs/FAQs/#how-long-does-it-take-to-build-loop", 
            "text": "The answer is varied, but a few hours from start to finish, depending on where you are starting and how comfortable you are with your computer.  If you'd rather break it up into several shorter bits of effort, the  Build App  section is divided into convenient stopping points with Time Estimates for each step. You can do one or more steps depending on what kind of time you have available.", 
            "title": "How long does it take to build Loop?"
        }, 
        {
            "location": "/faqs/FAQs/#does-loop-cost-money", 
            "text": "Yes, there are some costs, beyond the obvious costs of owning a pump and CGM.  The  RileyLink kit  costs $150. This is a one-time cost and many people still have their original RileyLinks from nearly 3 years ago running just fine. I highly recommend purchasing two RileyLinks when financially feasible, to have one as a backup in case of accidental damage.  The Apple Developer License can be done for free, however, you will have to rebuild your Loop app every 7 days. That could get very tedious. The $99 annual Apple Developer program enrollment is an excellent investment.  There are no other costs, ongoing or initial, to use Loop.", 
            "title": "Does Loop cost money?"
        }, 
        {
            "location": "/faqs/FAQs/#do-i-need-to-own-my-own-apple-computer", 
            "text": "You don't have to own your own Apple computer, but you do need to at least borrow one. It would be really good to have longer term ability to borrow that computer again for  updating Loop  later, when needed.  If you are borrowing an Apple computer, you should ask the person to (1) update to Mojave and (2)  download Xcode for free  before you get together to build your Loop app. The updates and download of Xcode can take a couple hours depending on the person's internet speed...so best to do those steps well ahead of time to save trouble.", 
            "title": "Do I need to own my own Apple computer?"
        }, 
        {
            "location": "/faqs/FAQs/#can-i-use-a-pc-or-windows-computer-to-build", 
            "text": "Yes, you can...sort of. There is a hacked way of installing macOS on a Windows computer called \"Virtual Machine\".  This link  may provide some helpful information for that if you want to learn more...but it's up to you and Google if you hit a road block. These docs do not provide troubleshooting tips for Virtual Machine installation or use.", 
            "title": "Can I use a PC or Windows computer to build?"
        }, 
        {
            "location": "/faqs/FAQs/#how-often-do-i-need-to-get-on-the-computer-for-loop", 
            "text": "The short answer is (1) when you first build and (2) once per year minimum after that. (If you decide to use a free Apple Developer Account, you will need to get on the computer every 7 days.)  The longer answer is that Loop code is updated periodically to include new features and bug fixes. When those updates are released, you'll need access to an Apple computer again to update your Loop app.  Loop updates are not available through the iPhone's app store...instead you do the app update yourself with  update instructions here . In general, probably a few times a year there are updates to Loop released that you'd want to take the time to install.", 
            "title": "How often do I need to get on the computer for Loop?"
        }, 
        {
            "location": "/faqs/FAQs/#will-i-need-to-build-a-new-loop-if-i-switch-between-medtronic-and-omnipod", 
            "text": "No. Loop will have the option to move between different pump types from within the same Loop app. You'll simply use the \"Switch from Omnipods\" or \"Delete Pump\" options to move to the other kind of pump.", 
            "title": "Will I need to build a new Loop if I switch between Medtronic and Omnipod?"
        }, 
        {
            "location": "/faqs/FAQs/#can-i-use-someone-elses-apple-developer-account-for-my-loop-build", 
            "text": "Technically, yes...however there are major drawbacks. The person's developer account can only be \"linked\" to a limited number of build computers. So one person \"loaning out\" their developer license to a lot of people will quickly exceed the number of allowed computers. In those cases, that person will be told they need to revoke the certificates on some computers (essentially dropping old ones to make room for new ones). When they do that, they may have forgotten about your Loop app on your computer. When they revoke your computer's certificate (and they can do that without you knowing through their developer portal), your Loop app will immediately stop working and not even open.  Your Loop app will also die immediately if their developer account is not renewed or expires. Your Loop updates will also not be able to be built unless that person maintains the developer license agreement updates.  Moral of the story, out of all the ways to save money...borrowing someone's developer account is not a good place to save money. You could find yourself unexpectedly without a Loop app without notice.", 
            "title": "Can I use someone else's Apple Developer account for my Loop build?"
        }, 
        {
            "location": "/faqs/FAQs/#can-i-use-my-apple-developer-account-to-build-for-others", 
            "text": "Technically yes...however, there are reasons this is discouraged. When you build for others, you must be careful to not unintentionally revoke the signing certificate that had been used for other people's apps (see note in FAQ above). You also need to let the people know that the MAXIMUM their app will last is 12 months. It will need to be rebuilt no matter what every 12 months.  But the biggest issue with building for others is that they may be left without a decent method of getting Loop updates. There are a lot of new Loopers on Omnipod system and their apps will likely need updating on a regular basis over the first year. Unless you plan on meeting with that person regularly to update their app, you could leave them on an old app that doesn't work as well as the new versions.", 
            "title": "Can I use MY Apple Developer account to build for others?"
        }, 
        {
            "location": "/faqs/FAQs/#how-can-i-find-a-compatible-pump-supplies", 
            "text": "There is a  whole page with detailed information about Medtronic pumps ; how to find them, how to find supplies, and assessing whether your Medtronic pump is compatible. Please check out that page for more info.  With the addition of Omnipod support, you can also now use Omnipod suppliers the way you'd normally source them.", 
            "title": "How can I find a compatible pump? supplies?"
        }, 
        {
            "location": "/faqs/FAQs/#can-i-pay-someone-else-to-do-this", 
            "text": "NOOOO...you really need to figure this out yourself. This is an automated insulin delivery system and you really need to know how to build and operate this yourself.", 
            "title": "Can I pay someone else to do this?"
        }, 
        {
            "location": "/faqs/FAQs/#what-if-i-lose-my-rileylink", 
            "text": "For Medtronic users, you simply go back to old school pump use until you get a new RileyLink. You can either let your temp basal finish by itself (30 minutes or less) or cancel the temp basal on the pump's menu. For bolusing, you'd go back to using the pump's bolus commands. When you get a RileyLink (either finding your old one or getting your backup RileyLink out) and Loop running again, you'll want to do one thing. Enter in any carbs to Loop that you may have eaten in the recent past that could still be affecting blood glucose. While Loop will read whatever insulin deliveries had happened while the RileyLink was missing, it will not read any carbs you entered into the pump...so make sure to add those to Loop and backdate them to the time they were eaten. That will help make the transition smoother to Looping again.  For pod users, your pod will finish any currently running temporary basal rate and then revert back to your scheduled basal rate. Without a RileyLink, you will not be able to affect any pod use; no basal changes, suspends, or boluses. If you have a backup RileyLink, you can simply connect to the new RileyLink on the same Loop app and it will work with the existing pod session. If you don't have a backup RileyLink, you'll have to remove the pod and start a new pod paired with your PDM until you get a new RileyLink.", 
            "title": "What if I lose my RileyLink?"
        }, 
        {
            "location": "/faqs/FAQs/#what-if-i-lose-or-get-a-new-iphone", 
            "text": "When you get a new iPhone, Loop will need to be built onto that new iPhone in the same way that you built on your old iPhone. Loop will not restore from any iCloud or iTunes backups, so make sure you plan on finding an Apple computer to rebuild on before you plan on Looping with the new iPhone.", 
            "title": "What if I lose or get a new iPhone?"
        }, 
        {
            "location": "/faqs/FAQs/#what-about-other-pumps-when-will-they-loop", 
            "text": "Hey now...let's be grateful for what we have first. The ability to use Loop is the result of tremendous amounts of effort, time, and sacrifice by volunteers. Cracking the pumps for Loop use is a large undertaking. If and when another set of people spend a large amount of time figuring out other pumps, then they could conceivably be added to Loop. But, you don't need to let us know that you'd love to see more pumps compatible with Loop. So would we. There is just an awful lot of work that needs to happen and it is not easy nor quick.  Tandem pumps are not Loop compatible.\nAnimas pumps are not Loop compatible.\nDASH pods are not Loop compatible.\nAnd those all likely won't be compatible anytime in the future.", 
            "title": "What about other pumps? When will they Loop?"
        }, 
        {
            "location": "/faqs/FAQs/#can-i-have-more-than-one-loop-app-on-a-phone", 
            "text": "Yes, technically possible. You can have multiple Loop apps built onto the same iPhone. However, having multiple Loop apps on a single phone may lead to unexpected conflicts that can negatively affect your Loop's ability to stay green (keep looping). Additionally, your pod will only work on one Loop app at a time anyways. So for smooth looping, just keep one Loop app on any phone for looping use.", 
            "title": "Can I have more than one Loop app on a phone?"
        }, 
        {
            "location": "/faqs/FAQs/#will-i-be-able-to-loop-on-a-plane-or-in-the-mountains", 
            "text": "Yes. Loop does not require internet or cell coverage to work. So long as the Looper has Bluetooth turned on on the iPhone (or iPod touch), then the Dexcom and RileyLink will still be able to do their work with Loop and your pump/pod.", 
            "title": "Will I be able to Loop on a plane? Or in the mountains?"
        }, 
        {
            "location": "/faqs/omnipod-faqs/", 
            "text": "Omnipod FAQs\n\u2301\n\n\nIs Omnipod supported on Loop?\n\u2301\n\n\nYES IT IS!!! WOOHOO!!\n\n\nWhich pods will work with Loop?\n\u2301\n\n\nThe Loop system described in these documents (aka DIY Loop) works with Eros pods...these are the current pods on the market in wide release. The newer DASH pods are not compatible with DIY Loop. Tidepool has begun a process to bring \nDIY Loop through FDA approval\n and Insulet has been announced as the \nfirst pump partner for that project\n. Tidepool Loop will be using DASH pods, no RileyLink required.  If you would like to stay informed about Tidepool Loop progress, you can fill out an interest form \nhere\n. \n\n\nSummary of eventual systems:\n\n\n\n\nDIY Loop + Eros pods + RileyLink\n\n\nTidepool Loop + DASH pods (no RileyLink)\n\n\n\n\nDo I still need a PDM with Omnipod Loop?\n\u2301\n\n\nNo, pods are monogamous little creatures. They will pair with only one device at a time for safety reasons...so a pod is either paired with a PDM or your Loop app on your iPhone. In other words, your PDM can stay in the diabetes closet while you are Looping. You cannot use the PDM for a pod that has been activated with Loop. That doesn't mean you should get rid of your PDM. Instead, keep it for backup situations if you lose your phone. See below for what to do if you lose your phone or RileyLink. \n\n\nCan I cancel a temp basal Loop sets? How about a bolus?\n\u2301\n\n\nYes, you can cancel a temp basal or a bolus in progress. There is a \"suspend delivery\" command that is easy to access by tapping on the \npod age icon in your Heads Up Display, upper right area\n. Suspending insulin delivery will cancel any running temp basal or bolus in progress. The suspend command will run indefinitely. A banner notification will be displayed on the Loop main screen while insulin delivery is suspended.\n\n\n\n\n\n\n\n\n\nInsulin will remain suspended until the user either clicks on the \"Tap to Resume\" command from Loop's main screen or the \"resume delivery\" command accessed by tapping the pod age icon. Once insulin delivery is resumed, you will be resumed at your scheduled basal rate. If a bolus was interrupted, the bolus will not resume. If you don't turn on open loop mode, within 5 minutes of resuming insulin delivery, your Loop should resume automatic temp basal adjustments.\n\n\nCan I prime or set my own temp basal on Loop?\n\u2301\n\n\nNo. Loop does not allow you to pick your own temp basal rate or prime insulin in. \n\n\nIf you find yourself in a situation where you would like to specify an exact temp basal rate of your own, you would need to (1) change your scheduled basal rate for the time(s) that you'd like a temp basal rate to run, and (2) suspend/resume insulin delivery (in order to cancel any currently running temp basal that Loop has running) and then (3) turn the slider so that you are running in \"open loop\" mode for the duration of the time you want to use that specific basal rate. \n\n\nWhat if I lose my phone or RileyLink?\n\u2301\n\n\nFor pod users, your pod will finish any currently running temporary basal rate and then revert back to your scheduled basal rate. Without a phone or RileyLink however, you will not be able to affect any pod use; no basal change, suspend, cancel, or bolus. To do anything other than let basals continue, you will need to take action depending on the situation.\n\n\n\n\n\n\nLost RileyLink only: You can replace your missing RileyLink with one from your backup supplies. No problem to switch out to a different Rileylink mid-pod session. If you don't have a backup RileyLink to use, then you will need to remove the pod and put on a new pod paired with your PDM until you can get a new RileyLink.\n\n\n\n\n\n\nLost iPhone only: You will need to remove the pod and put on a new pod paired with your PDM until you can get a new phone and Loop app built onto it.\n\n\n\n\n\n\nLost both RileyLink and phone: You're having a really bad day. You'll need a hug and follow the same directions as if you lost the phone as shown in the bullet above.\n\n\n\n\n\n\nIs there an increase in pod failures on Loop?\n\u2301\n\n\nIn the early stages of development, there were. Thankfully to the hard work of Pete Schwamb and others, pod failure rate is now no longer increased compared to typical pod use with a PDM.\n\n\nWhat do I do if a pod fails to pair?\n\u2301\n\n\nThe most common time of pod errors on Loop will be during the pairing process. If you get a pod that is failing to pair, please see \nthis page\n for steps on how to fix the failure and recover before you lose the pod.\n\n\nWhat do you do to stop a screaming pod?\n\u2301\n\n\nScreaming pods can be silenced by carrying a paperclip. Simply put the paperclip in the small hole that is on the bottom (the side opposite where the cannula is) of the pod as shown. Push the paperclip in until you hear a little click, that click is breaking the circuit that lets the audible scream go.", 
            "title": "Omnipod FAQs"
        }, 
        {
            "location": "/faqs/omnipod-faqs/#omnipod-faqs", 
            "text": "", 
            "title": "Omnipod FAQs"
        }, 
        {
            "location": "/faqs/omnipod-faqs/#is-omnipod-supported-on-loop", 
            "text": "YES IT IS!!! WOOHOO!!", 
            "title": "Is Omnipod supported on Loop?"
        }, 
        {
            "location": "/faqs/omnipod-faqs/#which-pods-will-work-with-loop", 
            "text": "The Loop system described in these documents (aka DIY Loop) works with Eros pods...these are the current pods on the market in wide release. The newer DASH pods are not compatible with DIY Loop. Tidepool has begun a process to bring  DIY Loop through FDA approval  and Insulet has been announced as the  first pump partner for that project . Tidepool Loop will be using DASH pods, no RileyLink required.  If you would like to stay informed about Tidepool Loop progress, you can fill out an interest form  here .   Summary of eventual systems:   DIY Loop + Eros pods + RileyLink  Tidepool Loop + DASH pods (no RileyLink)", 
            "title": "Which pods will work with Loop?"
        }, 
        {
            "location": "/faqs/omnipod-faqs/#do-i-still-need-a-pdm-with-omnipod-loop", 
            "text": "No, pods are monogamous little creatures. They will pair with only one device at a time for safety reasons...so a pod is either paired with a PDM or your Loop app on your iPhone. In other words, your PDM can stay in the diabetes closet while you are Looping. You cannot use the PDM for a pod that has been activated with Loop. That doesn't mean you should get rid of your PDM. Instead, keep it for backup situations if you lose your phone. See below for what to do if you lose your phone or RileyLink.", 
            "title": "Do I still need a PDM with Omnipod Loop?"
        }, 
        {
            "location": "/faqs/omnipod-faqs/#can-i-cancel-a-temp-basal-loop-sets-how-about-a-bolus", 
            "text": "Yes, you can cancel a temp basal or a bolus in progress. There is a \"suspend delivery\" command that is easy to access by tapping on the  pod age icon in your Heads Up Display, upper right area . Suspending insulin delivery will cancel any running temp basal or bolus in progress. The suspend command will run indefinitely. A banner notification will be displayed on the Loop main screen while insulin delivery is suspended.     Insulin will remain suspended until the user either clicks on the \"Tap to Resume\" command from Loop's main screen or the \"resume delivery\" command accessed by tapping the pod age icon. Once insulin delivery is resumed, you will be resumed at your scheduled basal rate. If a bolus was interrupted, the bolus will not resume. If you don't turn on open loop mode, within 5 minutes of resuming insulin delivery, your Loop should resume automatic temp basal adjustments.", 
            "title": "Can I cancel a temp basal Loop sets? How about a bolus?"
        }, 
        {
            "location": "/faqs/omnipod-faqs/#can-i-prime-or-set-my-own-temp-basal-on-loop", 
            "text": "No. Loop does not allow you to pick your own temp basal rate or prime insulin in.   If you find yourself in a situation where you would like to specify an exact temp basal rate of your own, you would need to (1) change your scheduled basal rate for the time(s) that you'd like a temp basal rate to run, and (2) suspend/resume insulin delivery (in order to cancel any currently running temp basal that Loop has running) and then (3) turn the slider so that you are running in \"open loop\" mode for the duration of the time you want to use that specific basal rate.", 
            "title": "Can I prime or set my own temp basal on Loop?"
        }, 
        {
            "location": "/faqs/omnipod-faqs/#what-if-i-lose-my-phone-or-rileylink", 
            "text": "For pod users, your pod will finish any currently running temporary basal rate and then revert back to your scheduled basal rate. Without a phone or RileyLink however, you will not be able to affect any pod use; no basal change, suspend, cancel, or bolus. To do anything other than let basals continue, you will need to take action depending on the situation.    Lost RileyLink only: You can replace your missing RileyLink with one from your backup supplies. No problem to switch out to a different Rileylink mid-pod session. If you don't have a backup RileyLink to use, then you will need to remove the pod and put on a new pod paired with your PDM until you can get a new RileyLink.    Lost iPhone only: You will need to remove the pod and put on a new pod paired with your PDM until you can get a new phone and Loop app built onto it.    Lost both RileyLink and phone: You're having a really bad day. You'll need a hug and follow the same directions as if you lost the phone as shown in the bullet above.", 
            "title": "What if I lose my phone or RileyLink?"
        }, 
        {
            "location": "/faqs/omnipod-faqs/#is-there-an-increase-in-pod-failures-on-loop", 
            "text": "In the early stages of development, there were. Thankfully to the hard work of Pete Schwamb and others, pod failure rate is now no longer increased compared to typical pod use with a PDM.", 
            "title": "Is there an increase in pod failures on Loop?"
        }, 
        {
            "location": "/faqs/omnipod-faqs/#what-do-i-do-if-a-pod-fails-to-pair", 
            "text": "The most common time of pod errors on Loop will be during the pairing process. If you get a pod that is failing to pair, please see  this page  for steps on how to fix the failure and recover before you lose the pod.", 
            "title": "What do I do if a pod fails to pair?"
        }, 
        {
            "location": "/faqs/omnipod-faqs/#what-do-you-do-to-stop-a-screaming-pod", 
            "text": "Screaming pods can be silenced by carrying a paperclip. Simply put the paperclip in the small hole that is on the bottom (the side opposite where the cannula is) of the pod as shown. Push the paperclip in until you hear a little click, that click is breaking the circuit that lets the audible scream go.", 
            "title": "What do you do to stop a screaming pod?"
        }, 
        {
            "location": "/faqs/branch-faqs/", 
            "text": "Branch FAQs\n\u2301\n\n\nThis page is mostly suited to people who have built the app once already and then are coming back to update. In the course of updating, you may be wondering about the different branches, what the differences are, and such...so let's try to answer some of those questions as best we can.\n\n\nWhat are all these branches?\n\u2301\n\n\nYes, there are a lot of \"branches\" in Loop talk but the concept is simple. I'll use an analogy to help. Basically, they are all slightly different versions of Loop...kind of like different edits of the same book.\n\n\nTo really understand what branches are, we should probably explain a little more about Loop's code and how development works.\n\n\nLoop developers own an account in GitHub called \nLoopKit\n.  Within that account, the developers have several \"repositories\" that support Loop in particular. A repository is like a book...let's think of it like a cookbook for now. Within the LoopKit account, there are repositories for Loop itself, LoopDocs, and various other supporting \"frameworks\" that are helper repositories for Loop to build correctly. For example, Loop's repo has a lot of the info about the app itself; the outward facing things that you interact with. How information is put to you and taken in from you...that's in Loop repository code. But, there's more than just a user interface for Loop. Loop has to do a lot of complex work like Bluetooth communications, algorithm math, pump communications, etc. The Loop app has help from frameworks to do those other parts. CGMBLEkit for some of the transmitter parts of Loop, RileyLink_ios for the pump managers (talking to the pumps and decoding their information), LoopKit for the algorithm about carbs and insulin curves, etc.\n\n\nWhen you build Loop, in the background, Loop pulls those other frameworks (7 in total) into the build process using \"Carthage\".  Carthage is like a personal shopper. You give it a shopping list (the cartfile in Loop code is that shopping list) and it goes and fetches that for you during the build process. Sometimes your computer has an old shopping list...and that can cause build errors. Hence the \"carthage update\" fix in the Build Errors page...that command updates the shopping list to get the right versions of those frameworks.\n\n\n\n\n\n\n\n\n\nAnyways...so now you know about the general structure of Loop and LoopKit in Github. Now we can discuss Loop itself a little deeper.\n\n\nSo let's imagine Loop as a cookbook. The developers are the authors/chefs of the recipes (code) in the cookbook. The authors spend countless hours testing new recipes, taste testing, documenting improvements. They send the drafts to the editor, who makes suggestions and eventually the cookbook is finalized. There are no grammar issues, no typos, the photos are beautiful and the recipes are yummy. They publish the book and you see a gorgeous final product on the shelves. That is called a \"release\" and it is the master branch. This book has been well-tested and is super stable. Every time you cook with those recipes, you know exactly what you're getting and lots of people have had a chance before you to make sure that it all tastes good. Master branch is stable and tested.\n\n\nBut then...the chefs/developers go on a trip. They are inspired by new cuisine and want to add new recipes to the old cookbook. (Things like omnipod support and overrides are new \"recipes\" that were developed since the last master release, for example.) But, the process for developing a recipe is arduous. Lots of trial and error involved. Lots of tweaking ingredients (code). The editors try out the new recipes and offer feedback (similar to the \nIssues List in GitHub\n). While the recipes are being developed, they have a version of the old cookbook that gets marked up...edited in pencil a lot. Scribbles and notes in the side. Revisions happen frequently, because that's what testing new recipes is all about. These marked-up versions of the cookbook are called \"dev\" branch. Short for \"development\" branch. Like the name sounds...this is where new developments are happening, new recipes and tweaks. \n\n\nAfter much testing and tweaking, eventually the recipes get the flavors right (bugs in code are squashed) and enough people have provided feedback and careful observations of results...that the book goes to the publishing house for the next printing. The cookbook is republished with an updated edition number and new recipes are highlighted. When this happens in Loop, Loop's master branch is updated with the new features coming from dev (aka, \"dev branch is merged into master branch\"). When that happens, master branch gets another \"release\" version (you can see release history \nhere\n) and for that one day...dev and master are exactly the same. They stay the same until the Loop developers start working on the next batch of improvements, could be the next hour even or days later, but the process begins again. The developers will start editing the code again and dropping those edits in dev branch for further development.\n\n\nSo what was/is Omnipod-testing branch?\n\u2301\n\n\nOmnipod Loop development testing (not talking about the actual hacking work that preceded that) was done by a smaller group of people privately for months and months before public release of the omnipod-testing branch. This smaller group of people (several dozen) were actively watching their Omnipod Loops and capturing bug reports. There was a lot of work put in by the testers and Pete Schwamb (Loop Developer) to get the code fairly stable and reliable. \n\n\nWhen the code got to a stable, reliable state and was ready for a larger audience, omnipod-testing branch was made available as a \"public testing\" branch. This branch is slightly different than a dev branch. What it means is that it was pretty well tested, but not necessarily going to be perfect for everyone right away. There were expectations that some user-interface requests might be asked for after having a wider audience of users (bolus beeps is a good example of that kind of testing outcome). \n\n\nAlso, omnipod-testing branch was not going to undergo a lot of active revisions to it when it was released. The intent was to keep it as a fairly known, unchanged product for people rather than a constantly changing code set...that way if people noted a bug, it would be a more \"known\" code base to work to debug.\n\n\nSo, omnipod-testing branch has undergone very little revision since it was first released. In fact, since its release in late April/early May 2019, there has only been two updates; one for the newer style Dexcom G6 transmitters and one for iOS 13 compatibility. Nothing major has been done in that branch, intentionally. As described above, the branch is serving as a stable platform for users and has helped catch bugs as a result of NOT being changed constantly.\n\n\nWhat is the future of omnipod-testing branch? Will it be updated?\n\u2301\n\n\nNo. Omnipod-testing branch is not going to be \"updated\" in the way many people are asking about. Little code fixes going in constantly will not happen. The reasons are given above. Omnipod-testing branch was just for that...testing that code in a static, fairly unchanged format to learn the most from it in a clean way.\n\n\nAs I just mentioned, bugs have been found in omnipod-testing branch. Those bugs are being squashed in dev branch and not in omnipod-testing branch. WHY? Because dev branch is the place for new code testing. Like playing a game of Jenga, changing code to squash one bug may result in unintended consequences that cause another bug. So the playground for that kind of testing is most appropriate for dev branch. Omnipod-testing branch is not a place to be testing bug squashes and code changes.\n\n\nWhen dev gets more stable and the bugs are squashed/cleaned up, eventually that cleaned up code will be announced as a recommended replacement for omnipod-testing branch. Don't worry...there will be LoopDocs updates, pinned announcements in Looped and Zulipchat, Instagram posts, etc. You shouldn't be able to miss it.\n\n\nHow can I stay current with what's going on in the branches?\n\u2301\n\n\nNow we've learned that master and omnipod-testing branches really aren't changing much. They've each had some \"hot-fixes\" for late-breaking things that were needed for users in a timely fashion; the updated G6 transmitters and iOS update compatibility...but mostly the essential core of the code remains intentionally unchanged in those branches. (\"Hot-fixes\" are code changes to keep core functions when one of the outside pieces triggered the need. Apple and Dexcom changing their gear represent times when hot-fixes are most likely, but do not represent a major release change. Most people will want to update their Loop apps after a hot-fix is merged into the branch because those help ensure your gear works as expected.)\n\n\nSo it's just dev branch that changes often. The developers need YOU to know that dev is a constantly shifting, moving place. If you choose to come into a dev branch build...you need to be aware that is what dev does...moves, shakes, changes, and will update code frequently and unannounced in the traditional sense that most users in Looped group or Instagram would see. Developers are not helped by people being in a dev branch if those users are mistakenly thinking of it as a stable master branch with lots of detailed docs to go with it. People should only use a dev branch build if they EDUCATE themselves on the expectations and how to properly manage dev information and updates. People using dev branch should also have regular access to a computer to be able to rebuild quickly if a new bug/fix is identified. \n\n\nIf you choose to use a dev build, you can stay abreast of developments in a number of ways...but they will all require you to do some legwork and keep yourself informed. This is not a situation where you should expect a fancy Loopdocs page updated regularly with current \"dev updates\"...that's just not the way dev branch works.\n\n\nWatch the Loop Repo and Issues list\n\u2301\n\n\nFirst, subscribe to the Loop repo's Issues list by \"watching\" the \nLoop repo\n. You can choose to watch the repo so that you get emails when new Issues are reported. This is a good way to find out if there's other people reporting odd behavior that you are wondering about. If you use dev and wonder about something you are seeing in Loop, you can check \nIssues list\n to see if others are noticing the same. If so, you can help by capturing information and reporting it. Not super helpful to just say \"yeah, me too...\" but better if you can attach screenshots, Issue Reports from Loop settings, and a thorough description of the problem you are seeing. Be a part of the solution by thoughtfully providing information to help debug.\n\n\n\n\n\n\n\n\n\nSubscribe to the Zulipchat channels\n\u2301\n\n\nSecond, use \nZulipchat\n forums for Loop. This forum has several \"streams\" of conversations depending on interest. I highly recommend following the #github channel if you are wanting to watch for code changes. Code changes are called \"commits\" in GitHub. The #github channel will have an automated post whenever a new commit is made and it will give a brief line description of the commit.\n\n\n\n\n\n\n\n\n\nYou can also go directly to the commit history for each of the branches if you'd like.\n\n\nLoop master branch commit history\n\n\nLoop dev branch commit history\n\n\nLoop omnipod-testing branch commit history\n\n\nIf you click on the commit, you can see exactly what changes to the code were made. It's an interesting learning experience. In red are the code that is old, in green is the updated code. The line numbers and file names of the edited code are also there to help.\n\n\n\n\n\n\n\n\n\nI don't expect many of you would understand exactly what the edits mean, or how the new code might function...but I bring up the topic of commit history so that you can use that to realize just how often dev is updated. Go ahead and look at the number and frequency of commits in that dev branch...that is why there is no way someone is going to keep a \"loopdocs\" of dev changes. It's just too much a moving target.\n\n\nKeep checking Looped group\n\u2301\n\n\nThird, keep watching Looped group. Major concerns/issues are brought up there...so no harm in scrolling through and seeing what's going on there.\n\n\nBecome familiar with your data sources\n\u2301\n\n\nAnother useful thing if you'll be on dev branches undergoing a lot of active change...know how Loop works and where to look for additional information about what you are seeing. For example, if you see an IOB value that looks odd, you should know to look at the insulin deliveries are stored in Health app. Knowing to pull an Issue Report when you see a problem so you can provide that if asked. Knowing \nhow to capture debugging logs if the developers ask for that kind of info\n is also a good skill. \n\n\nWhat are the differences in branches now?\n\u2301\n\n\nRoughly speaking...right now (September 23nd):\n\n\n\n\n\n\nMaster: No Omnipod support, only Medtronic users. Stable. No updates planned in near future. The next update will depend on how long dev takes to settle down and get some good testing showing stability.\n\n\n\n\n\n\nOmnipod-testing branch: \nknown bug for IOB tracking\n that has been discussed a lot in Looped group (go ahead and search group if you want to read up on it) for Pod users. The fix for this bug has been implemented in dev branch...the fix is NOT in omnipod-testing branch for reasons discussed above. Jenga. \n\n\n\n\n\n\nDev: Dev branch has a fix for the IOB tracking for Pod users. Dev branch also has new features that have not previously been a part of mainline Loop branches...overrides and Nightscout profile automatic updating. These two features are new and improved versions of the ones previously a part of JoJo branches (if you've tried those).\n\n\nDev branches also has some known bugs still being addressed. For example, when the Loop cancels a temp basal to revert back to scheduled basals...the timestamp below the HUD's temp basal indicator goes back to the time when Loop was first opened. When the next temp basal is set, the timestamp operates properly again. Little stuff like that comes up a lot in dev...and you'll need to do your homework to read up on known issues please. Don't assume that dev branch is supposed to be glitch free...instead look at issues list, scroll through recent posts in Zulipchat and see if others have already noted/discussed the same.\n\n\n\n\n\n\nShould I update to dev branch?\n\u2301\n\n\nYou mean after all that you can't answer that question yourself? Really?\n\n\nAsk yourself some questions. Are you the type that will have access to a computer? Be willing to update more frequently if needed? Be willing to do some leg work to stay current with possible reported issues? Be willing to watch a little closer after each time you update your Loop app to make sure no code regressions or new bugs came in with the update? If you can't commit to those things, then you should stay on master or omnipod-testing for awhile longer until dev settles down a bit.\n\n\nIs dev branch always changing frequently?\n\u2301\n\n\nSometimes yes, sometimes no. Right now we just happen to be in a time of a lot of changes. Pod updates, insulin tracking code changes (which get into the very core of Loop code), Nightscout integration updates, iOS updates...there's just a lot going on right now.\n\n\nWill JoJo branch be updated? Does it have \"a fix\"?\n\u2301\n\n\nJoJo branches are my (me, Katie) personal-use branches that incorporated changes I found useful for our Looping. Those are changes that were pieced together from various sources in the open source community. Other people who coded up particular changes that benefited themselves and I found were useful, too. What JoJo was not designed to be is a branch that bifurcated users and complicated which branch people selected. The unintended consequence of sharing my personal branches over time is that confusion about branches has grown...and I don't enjoy that. I am working with Pete to get the features in my personal branches merged/improved into mainline Loop.\n\n\nDev branch already has automatic Nightscout profile updating now...and that is a huge feature that I really grew to depend on. It is nice to verify (without asking) that my daughter (or a caregiver) successfully edited a basal rate or setting the way I'd suggested when adjustments were needed during a school day. \n\n\nDev branch also has overrides included now, in a way that improves upon the original version used in JoJo. Michael Pangburn is the author of that AMAZING set of features and I'll be forever in debt to him for the work he's put into overrides. Those have been a super tool to add to Loop and I'm so happy to see them in dev branch. \n\n\nDev branch is also hopefully getting remote overrides...not sure when, but my fingers are crossed. \n\n\nThe Integral Retrospective Correction is not in dev branch and may/may not be in the future (I don't know). We only used IRC for a short period of time and I think that it may be undergoing some code revision...so it may be \"dormant\" for a bit in the near future. Take a deep breath...you will be fine if IRC is dormant.\n\n\nThere are other minor things in Jojo that I expect could get fixed in dev (meter BG uploading to NS for Medtronic Loopers). Insulin delay will probably not be going into dev and instead there's some talk in the development channels about carb modelling improvements which would better address the reason insulin delay was helpful (to the extent it helped improve bolus amounts up-front). Finally, the bolusing below suspend threshold is a one-line code customization that I expect people could do on their own if it is added to LoopDocs. \n\n\nSo...in short...NO. JoJo will not be updated with any new code. Instead, JoJo will go into retirement and dev branch (and eventually master branch) will have all you'd need...the IOB tracking fix, overrides, NS profile updating, etc.\n\n\nWe have been running dev branch live on Anna (my daughter) for several weeks now on both Pods and Medtronic (she's been going between the two), with regular updates to get new code and test/watch. \n\n\nThe girl who maintains JoJo branches isn't even using JoJo branches. I think that says something, don't you?", 
            "title": "Branch FAQs"
        }, 
        {
            "location": "/faqs/branch-faqs/#branch-faqs", 
            "text": "This page is mostly suited to people who have built the app once already and then are coming back to update. In the course of updating, you may be wondering about the different branches, what the differences are, and such...so let's try to answer some of those questions as best we can.", 
            "title": "Branch FAQs"
        }, 
        {
            "location": "/faqs/branch-faqs/#what-are-all-these-branches", 
            "text": "Yes, there are a lot of \"branches\" in Loop talk but the concept is simple. I'll use an analogy to help. Basically, they are all slightly different versions of Loop...kind of like different edits of the same book.  To really understand what branches are, we should probably explain a little more about Loop's code and how development works.  Loop developers own an account in GitHub called  LoopKit .  Within that account, the developers have several \"repositories\" that support Loop in particular. A repository is like a book...let's think of it like a cookbook for now. Within the LoopKit account, there are repositories for Loop itself, LoopDocs, and various other supporting \"frameworks\" that are helper repositories for Loop to build correctly. For example, Loop's repo has a lot of the info about the app itself; the outward facing things that you interact with. How information is put to you and taken in from you...that's in Loop repository code. But, there's more than just a user interface for Loop. Loop has to do a lot of complex work like Bluetooth communications, algorithm math, pump communications, etc. The Loop app has help from frameworks to do those other parts. CGMBLEkit for some of the transmitter parts of Loop, RileyLink_ios for the pump managers (talking to the pumps and decoding their information), LoopKit for the algorithm about carbs and insulin curves, etc.  When you build Loop, in the background, Loop pulls those other frameworks (7 in total) into the build process using \"Carthage\".  Carthage is like a personal shopper. You give it a shopping list (the cartfile in Loop code is that shopping list) and it goes and fetches that for you during the build process. Sometimes your computer has an old shopping list...and that can cause build errors. Hence the \"carthage update\" fix in the Build Errors page...that command updates the shopping list to get the right versions of those frameworks.     Anyways...so now you know about the general structure of Loop and LoopKit in Github. Now we can discuss Loop itself a little deeper.  So let's imagine Loop as a cookbook. The developers are the authors/chefs of the recipes (code) in the cookbook. The authors spend countless hours testing new recipes, taste testing, documenting improvements. They send the drafts to the editor, who makes suggestions and eventually the cookbook is finalized. There are no grammar issues, no typos, the photos are beautiful and the recipes are yummy. They publish the book and you see a gorgeous final product on the shelves. That is called a \"release\" and it is the master branch. This book has been well-tested and is super stable. Every time you cook with those recipes, you know exactly what you're getting and lots of people have had a chance before you to make sure that it all tastes good. Master branch is stable and tested.  But then...the chefs/developers go on a trip. They are inspired by new cuisine and want to add new recipes to the old cookbook. (Things like omnipod support and overrides are new \"recipes\" that were developed since the last master release, for example.) But, the process for developing a recipe is arduous. Lots of trial and error involved. Lots of tweaking ingredients (code). The editors try out the new recipes and offer feedback (similar to the  Issues List in GitHub ). While the recipes are being developed, they have a version of the old cookbook that gets marked up...edited in pencil a lot. Scribbles and notes in the side. Revisions happen frequently, because that's what testing new recipes is all about. These marked-up versions of the cookbook are called \"dev\" branch. Short for \"development\" branch. Like the name sounds...this is where new developments are happening, new recipes and tweaks.   After much testing and tweaking, eventually the recipes get the flavors right (bugs in code are squashed) and enough people have provided feedback and careful observations of results...that the book goes to the publishing house for the next printing. The cookbook is republished with an updated edition number and new recipes are highlighted. When this happens in Loop, Loop's master branch is updated with the new features coming from dev (aka, \"dev branch is merged into master branch\"). When that happens, master branch gets another \"release\" version (you can see release history  here ) and for that one day...dev and master are exactly the same. They stay the same until the Loop developers start working on the next batch of improvements, could be the next hour even or days later, but the process begins again. The developers will start editing the code again and dropping those edits in dev branch for further development.", 
            "title": "What are all these branches?"
        }, 
        {
            "location": "/faqs/branch-faqs/#so-what-wasis-omnipod-testing-branch", 
            "text": "Omnipod Loop development testing (not talking about the actual hacking work that preceded that) was done by a smaller group of people privately for months and months before public release of the omnipod-testing branch. This smaller group of people (several dozen) were actively watching their Omnipod Loops and capturing bug reports. There was a lot of work put in by the testers and Pete Schwamb (Loop Developer) to get the code fairly stable and reliable.   When the code got to a stable, reliable state and was ready for a larger audience, omnipod-testing branch was made available as a \"public testing\" branch. This branch is slightly different than a dev branch. What it means is that it was pretty well tested, but not necessarily going to be perfect for everyone right away. There were expectations that some user-interface requests might be asked for after having a wider audience of users (bolus beeps is a good example of that kind of testing outcome).   Also, omnipod-testing branch was not going to undergo a lot of active revisions to it when it was released. The intent was to keep it as a fairly known, unchanged product for people rather than a constantly changing code set...that way if people noted a bug, it would be a more \"known\" code base to work to debug.  So, omnipod-testing branch has undergone very little revision since it was first released. In fact, since its release in late April/early May 2019, there has only been two updates; one for the newer style Dexcom G6 transmitters and one for iOS 13 compatibility. Nothing major has been done in that branch, intentionally. As described above, the branch is serving as a stable platform for users and has helped catch bugs as a result of NOT being changed constantly.", 
            "title": "So what was/is Omnipod-testing branch?"
        }, 
        {
            "location": "/faqs/branch-faqs/#what-is-the-future-of-omnipod-testing-branch-will-it-be-updated", 
            "text": "No. Omnipod-testing branch is not going to be \"updated\" in the way many people are asking about. Little code fixes going in constantly will not happen. The reasons are given above. Omnipod-testing branch was just for that...testing that code in a static, fairly unchanged format to learn the most from it in a clean way.  As I just mentioned, bugs have been found in omnipod-testing branch. Those bugs are being squashed in dev branch and not in omnipod-testing branch. WHY? Because dev branch is the place for new code testing. Like playing a game of Jenga, changing code to squash one bug may result in unintended consequences that cause another bug. So the playground for that kind of testing is most appropriate for dev branch. Omnipod-testing branch is not a place to be testing bug squashes and code changes.  When dev gets more stable and the bugs are squashed/cleaned up, eventually that cleaned up code will be announced as a recommended replacement for omnipod-testing branch. Don't worry...there will be LoopDocs updates, pinned announcements in Looped and Zulipchat, Instagram posts, etc. You shouldn't be able to miss it.", 
            "title": "What is the future of omnipod-testing branch? Will it be updated?"
        }, 
        {
            "location": "/faqs/branch-faqs/#how-can-i-stay-current-with-whats-going-on-in-the-branches", 
            "text": "Now we've learned that master and omnipod-testing branches really aren't changing much. They've each had some \"hot-fixes\" for late-breaking things that were needed for users in a timely fashion; the updated G6 transmitters and iOS update compatibility...but mostly the essential core of the code remains intentionally unchanged in those branches. (\"Hot-fixes\" are code changes to keep core functions when one of the outside pieces triggered the need. Apple and Dexcom changing their gear represent times when hot-fixes are most likely, but do not represent a major release change. Most people will want to update their Loop apps after a hot-fix is merged into the branch because those help ensure your gear works as expected.)  So it's just dev branch that changes often. The developers need YOU to know that dev is a constantly shifting, moving place. If you choose to come into a dev branch build...you need to be aware that is what dev does...moves, shakes, changes, and will update code frequently and unannounced in the traditional sense that most users in Looped group or Instagram would see. Developers are not helped by people being in a dev branch if those users are mistakenly thinking of it as a stable master branch with lots of detailed docs to go with it. People should only use a dev branch build if they EDUCATE themselves on the expectations and how to properly manage dev information and updates. People using dev branch should also have regular access to a computer to be able to rebuild quickly if a new bug/fix is identified.   If you choose to use a dev build, you can stay abreast of developments in a number of ways...but they will all require you to do some legwork and keep yourself informed. This is not a situation where you should expect a fancy Loopdocs page updated regularly with current \"dev updates\"...that's just not the way dev branch works.", 
            "title": "How can I stay current with what's going on in the branches?"
        }, 
        {
            "location": "/faqs/branch-faqs/#watch-the-loop-repo-and-issues-list", 
            "text": "First, subscribe to the Loop repo's Issues list by \"watching\" the  Loop repo . You can choose to watch the repo so that you get emails when new Issues are reported. This is a good way to find out if there's other people reporting odd behavior that you are wondering about. If you use dev and wonder about something you are seeing in Loop, you can check  Issues list  to see if others are noticing the same. If so, you can help by capturing information and reporting it. Not super helpful to just say \"yeah, me too...\" but better if you can attach screenshots, Issue Reports from Loop settings, and a thorough description of the problem you are seeing. Be a part of the solution by thoughtfully providing information to help debug.", 
            "title": "Watch the Loop Repo and Issues list"
        }, 
        {
            "location": "/faqs/branch-faqs/#subscribe-to-the-zulipchat-channels", 
            "text": "Second, use  Zulipchat  forums for Loop. This forum has several \"streams\" of conversations depending on interest. I highly recommend following the #github channel if you are wanting to watch for code changes. Code changes are called \"commits\" in GitHub. The #github channel will have an automated post whenever a new commit is made and it will give a brief line description of the commit.     You can also go directly to the commit history for each of the branches if you'd like.  Loop master branch commit history  Loop dev branch commit history  Loop omnipod-testing branch commit history  If you click on the commit, you can see exactly what changes to the code were made. It's an interesting learning experience. In red are the code that is old, in green is the updated code. The line numbers and file names of the edited code are also there to help.     I don't expect many of you would understand exactly what the edits mean, or how the new code might function...but I bring up the topic of commit history so that you can use that to realize just how often dev is updated. Go ahead and look at the number and frequency of commits in that dev branch...that is why there is no way someone is going to keep a \"loopdocs\" of dev changes. It's just too much a moving target.", 
            "title": "Subscribe to the Zulipchat channels"
        }, 
        {
            "location": "/faqs/branch-faqs/#keep-checking-looped-group", 
            "text": "Third, keep watching Looped group. Major concerns/issues are brought up there...so no harm in scrolling through and seeing what's going on there.", 
            "title": "Keep checking Looped group"
        }, 
        {
            "location": "/faqs/branch-faqs/#become-familiar-with-your-data-sources", 
            "text": "Another useful thing if you'll be on dev branches undergoing a lot of active change...know how Loop works and where to look for additional information about what you are seeing. For example, if you see an IOB value that looks odd, you should know to look at the insulin deliveries are stored in Health app. Knowing to pull an Issue Report when you see a problem so you can provide that if asked. Knowing  how to capture debugging logs if the developers ask for that kind of info  is also a good skill.", 
            "title": "Become familiar with your data sources"
        }, 
        {
            "location": "/faqs/branch-faqs/#what-are-the-differences-in-branches-now", 
            "text": "Roughly speaking...right now (September 23nd):    Master: No Omnipod support, only Medtronic users. Stable. No updates planned in near future. The next update will depend on how long dev takes to settle down and get some good testing showing stability.    Omnipod-testing branch:  known bug for IOB tracking  that has been discussed a lot in Looped group (go ahead and search group if you want to read up on it) for Pod users. The fix for this bug has been implemented in dev branch...the fix is NOT in omnipod-testing branch for reasons discussed above. Jenga.     Dev: Dev branch has a fix for the IOB tracking for Pod users. Dev branch also has new features that have not previously been a part of mainline Loop branches...overrides and Nightscout profile automatic updating. These two features are new and improved versions of the ones previously a part of JoJo branches (if you've tried those).  Dev branches also has some known bugs still being addressed. For example, when the Loop cancels a temp basal to revert back to scheduled basals...the timestamp below the HUD's temp basal indicator goes back to the time when Loop was first opened. When the next temp basal is set, the timestamp operates properly again. Little stuff like that comes up a lot in dev...and you'll need to do your homework to read up on known issues please. Don't assume that dev branch is supposed to be glitch free...instead look at issues list, scroll through recent posts in Zulipchat and see if others have already noted/discussed the same.", 
            "title": "What are the differences in branches now?"
        }, 
        {
            "location": "/faqs/branch-faqs/#should-i-update-to-dev-branch", 
            "text": "You mean after all that you can't answer that question yourself? Really?  Ask yourself some questions. Are you the type that will have access to a computer? Be willing to update more frequently if needed? Be willing to do some leg work to stay current with possible reported issues? Be willing to watch a little closer after each time you update your Loop app to make sure no code regressions or new bugs came in with the update? If you can't commit to those things, then you should stay on master or omnipod-testing for awhile longer until dev settles down a bit.", 
            "title": "Should I update to dev branch?"
        }, 
        {
            "location": "/faqs/branch-faqs/#is-dev-branch-always-changing-frequently", 
            "text": "Sometimes yes, sometimes no. Right now we just happen to be in a time of a lot of changes. Pod updates, insulin tracking code changes (which get into the very core of Loop code), Nightscout integration updates, iOS updates...there's just a lot going on right now.", 
            "title": "Is dev branch always changing frequently?"
        }, 
        {
            "location": "/faqs/branch-faqs/#will-jojo-branch-be-updated-does-it-have-a-fix", 
            "text": "JoJo branches are my (me, Katie) personal-use branches that incorporated changes I found useful for our Looping. Those are changes that were pieced together from various sources in the open source community. Other people who coded up particular changes that benefited themselves and I found were useful, too. What JoJo was not designed to be is a branch that bifurcated users and complicated which branch people selected. The unintended consequence of sharing my personal branches over time is that confusion about branches has grown...and I don't enjoy that. I am working with Pete to get the features in my personal branches merged/improved into mainline Loop.  Dev branch already has automatic Nightscout profile updating now...and that is a huge feature that I really grew to depend on. It is nice to verify (without asking) that my daughter (or a caregiver) successfully edited a basal rate or setting the way I'd suggested when adjustments were needed during a school day.   Dev branch also has overrides included now, in a way that improves upon the original version used in JoJo. Michael Pangburn is the author of that AMAZING set of features and I'll be forever in debt to him for the work he's put into overrides. Those have been a super tool to add to Loop and I'm so happy to see them in dev branch.   Dev branch is also hopefully getting remote overrides...not sure when, but my fingers are crossed.   The Integral Retrospective Correction is not in dev branch and may/may not be in the future (I don't know). We only used IRC for a short period of time and I think that it may be undergoing some code revision...so it may be \"dormant\" for a bit in the near future. Take a deep breath...you will be fine if IRC is dormant.  There are other minor things in Jojo that I expect could get fixed in dev (meter BG uploading to NS for Medtronic Loopers). Insulin delay will probably not be going into dev and instead there's some talk in the development channels about carb modelling improvements which would better address the reason insulin delay was helpful (to the extent it helped improve bolus amounts up-front). Finally, the bolusing below suspend threshold is a one-line code customization that I expect people could do on their own if it is added to LoopDocs.   So...in short...NO. JoJo will not be updated with any new code. Instead, JoJo will go into retirement and dev branch (and eventually master branch) will have all you'd need...the IOB tracking fix, overrides, NS profile updating, etc.  We have been running dev branch live on Anna (my daughter) for several weeks now on both Pods and Medtronic (she's been going between the two), with regular updates to get new code and test/watch.   The girl who maintains JoJo branches isn't even using JoJo branches. I think that says something, don't you?", 
            "title": "Will JoJo branch be updated? Does it have \"a fix\"?"
        }, 
        {
            "location": "/faqs/update-faqs/", 
            "text": "Updating/Rebuilding Loop FAQs\n\u2301\n\n\nSOOOO many questions about updating or rebuilding Loop. The general answer is that people tend to overthink this. Rebuilding your Loop app is really quite easy...so a short read of these questions should help a lot.\n\n\nFirst, please take a minute to understand what the words mean.\n\n\n\"Updating Loop\" is the process of getting a new download of Loop's code and using that to update your Loop. You do this when you want to switch branches. You do this when you want to get fixes or new features from the same branch. The process doesn't care if you are moving from omnipod-testing -\n dev or jojo -\n dev or master -\n dev or any other combination. \n\n\nUpdating Loop is the same idea as what happens to your other apps on your iPhone when you update them from the App Store on the phone. A refreshed version of the same app appears on the phone, simply replacing-in-place the same Loop you were using with an updated version.\n\n\nWhere should I start when I want to update my Loop?\n\u2301\n\n\nALWAYS start with the \nUpdate Loop page\n before any new build that you'd be doing.\n That page is important because it will offer information on the updates you need to do before building, as well as any late breaking things that might need to be considered.\n\n\nDo not simply build with your old downloaded folder from months ago. There is a high likelihood that your original code from awhile ago is outdated. Grab new code and you will get the version that has all the latest and greatest features and bug fixes.\n\n\nWhen do I have to update/rebuild?\n\u2301\n\n\nAbsolute minimum: 1 year from when you last built (paid account).\n\n\nGood idea minimum: If on dev branch, frequently. I've found valuable updates to dev branch at least once a week lately...but I'd say monthly minimum at least for dev right now. Master and omnipod-testing branch do not have changes frequently.\n\n\nIssue specific minimum: There are also times where you may need to update for \"hot-fixes\" to keep your Loop working when other things change. For example, the new style Dexcom transmitters changed their Bluetooth protocol. Loop's code was updated for the new transmitters so that offline looping can continue to work. If you don't update to get that fix, you will be forced to rely on internet-required looping because older versoin of Loop won't have the updated protocols.\n\n\nWill I have to delete my old Loop app?\n\u2301\n\n\nNo. Do not delete your old Loop. In fact, that is a bad idea as you will lose your currently paired pod and/or settings if you do that. So, don't delete (except for two situations below):\n\n\n\n\nYou broke it: There is a glitch in Loop where if you enter the target correction range backwards, then your Loop app will stop working. Correction range needs to be in minimum-maximum, for example 100-120 mg/dL. If you entered that as 120-100 mg/dL, Loop will not work during the time that backwards correction range is supposed to be active. In this case you would need to delete the app and rebuild.\n\n\nMoving from dev branch back down to jojo branch. The way the new dev branch is coded will require you to delete your dev build prior to going back jojo branch.\n\n\n\n\nDoes updating make a separate, second Loop app?\n\u2301\n\n\nNo. Loop is simply updated in-place, written right over the old version. \n\n\nThe only exception to this is if you update/build using a different developer signing team than your original Loop app was built with. The app's identity on your phone is defined by the developer team that you signed the app with. That team has a unique ID to identify the app. So, if you change that unique ID, your phone interprets that as a unique app as well...giving you two Loop apps on the phone. Therefore, if changing developer accounts...you will get a new Loop app, and you would need a new Pod. You'll need to transfer your settings manually to the new app and delete your old app.\n\n\nWill my settings be saved when I update?\n\u2301\n\n\nYes. That's why we don't delete the app. Your settings will be saved.\n\n\nWill my pod still work when I update?\n\u2301\n\n\nYes. So long as you use the same developer team as you originally built the app with before.\n\n\nHow can I confirm what version was installed?\n\u2301\n\n\nThe Loop's version is given at the top of the Loop settings page. Even better though, the new dev branch has very detailed info about the version of Loop you are using at the top of your Loop's Issue Report. This is a great new addition to help identify where, what, and when of your Loop version.\n\n\n\n\n\n\n\n\n\n\n\nWhat if I'm changing branches? Does that matter?\n\u2301\n\n\nDoes not matter. Moving between branches is an \"updating Loop\" action. Nothing about the information above changes.\n\n\nWhat if I'm changing phones?\n\u2301\n\n\nChanging phones is a little different than updating. You will need to change pods in order to move to the new phone's Loop. And you will have to enter all your setting in again. Loop will not be \"restored from backup\" the way other apps are when switching phones...so you will have to actually build it fresh.\n\n\nHow long does it take?\n\u2301\n\n\nAssuming your macOS and Xcode updates are done, then plan on about 30 minutes.", 
            "title": "Update/Rebuild Loop FAQs"
        }, 
        {
            "location": "/faqs/update-faqs/#updatingrebuilding-loop-faqs", 
            "text": "SOOOO many questions about updating or rebuilding Loop. The general answer is that people tend to overthink this. Rebuilding your Loop app is really quite easy...so a short read of these questions should help a lot.  First, please take a minute to understand what the words mean.  \"Updating Loop\" is the process of getting a new download of Loop's code and using that to update your Loop. You do this when you want to switch branches. You do this when you want to get fixes or new features from the same branch. The process doesn't care if you are moving from omnipod-testing -  dev or jojo -  dev or master -  dev or any other combination.   Updating Loop is the same idea as what happens to your other apps on your iPhone when you update them from the App Store on the phone. A refreshed version of the same app appears on the phone, simply replacing-in-place the same Loop you were using with an updated version.", 
            "title": "Updating/Rebuilding Loop FAQs"
        }, 
        {
            "location": "/faqs/update-faqs/#where-should-i-start-when-i-want-to-update-my-loop", 
            "text": "ALWAYS start with the  Update Loop page  before any new build that you'd be doing.  That page is important because it will offer information on the updates you need to do before building, as well as any late breaking things that might need to be considered.  Do not simply build with your old downloaded folder from months ago. There is a high likelihood that your original code from awhile ago is outdated. Grab new code and you will get the version that has all the latest and greatest features and bug fixes.", 
            "title": "Where should I start when I want to update my Loop?"
        }, 
        {
            "location": "/faqs/update-faqs/#when-do-i-have-to-updaterebuild", 
            "text": "Absolute minimum: 1 year from when you last built (paid account).  Good idea minimum: If on dev branch, frequently. I've found valuable updates to dev branch at least once a week lately...but I'd say monthly minimum at least for dev right now. Master and omnipod-testing branch do not have changes frequently.  Issue specific minimum: There are also times where you may need to update for \"hot-fixes\" to keep your Loop working when other things change. For example, the new style Dexcom transmitters changed their Bluetooth protocol. Loop's code was updated for the new transmitters so that offline looping can continue to work. If you don't update to get that fix, you will be forced to rely on internet-required looping because older versoin of Loop won't have the updated protocols.", 
            "title": "When do I have to update/rebuild?"
        }, 
        {
            "location": "/faqs/update-faqs/#will-i-have-to-delete-my-old-loop-app", 
            "text": "No. Do not delete your old Loop. In fact, that is a bad idea as you will lose your currently paired pod and/or settings if you do that. So, don't delete (except for two situations below):   You broke it: There is a glitch in Loop where if you enter the target correction range backwards, then your Loop app will stop working. Correction range needs to be in minimum-maximum, for example 100-120 mg/dL. If you entered that as 120-100 mg/dL, Loop will not work during the time that backwards correction range is supposed to be active. In this case you would need to delete the app and rebuild.  Moving from dev branch back down to jojo branch. The way the new dev branch is coded will require you to delete your dev build prior to going back jojo branch.", 
            "title": "Will I have to delete my old Loop app?"
        }, 
        {
            "location": "/faqs/update-faqs/#does-updating-make-a-separate-second-loop-app", 
            "text": "No. Loop is simply updated in-place, written right over the old version.   The only exception to this is if you update/build using a different developer signing team than your original Loop app was built with. The app's identity on your phone is defined by the developer team that you signed the app with. That team has a unique ID to identify the app. So, if you change that unique ID, your phone interprets that as a unique app as well...giving you two Loop apps on the phone. Therefore, if changing developer accounts...you will get a new Loop app, and you would need a new Pod. You'll need to transfer your settings manually to the new app and delete your old app.", 
            "title": "Does updating make a separate, second Loop app?"
        }, 
        {
            "location": "/faqs/update-faqs/#will-my-settings-be-saved-when-i-update", 
            "text": "Yes. That's why we don't delete the app. Your settings will be saved.", 
            "title": "Will my settings be saved when I update?"
        }, 
        {
            "location": "/faqs/update-faqs/#will-my-pod-still-work-when-i-update", 
            "text": "Yes. So long as you use the same developer team as you originally built the app with before.", 
            "title": "Will my pod still work when I update?"
        }, 
        {
            "location": "/faqs/update-faqs/#how-can-i-confirm-what-version-was-installed", 
            "text": "The Loop's version is given at the top of the Loop settings page. Even better though, the new dev branch has very detailed info about the version of Loop you are using at the top of your Loop's Issue Report. This is a great new addition to help identify where, what, and when of your Loop version.", 
            "title": "How can I confirm what version was installed?"
        }, 
        {
            "location": "/faqs/update-faqs/#what-if-im-changing-branches-does-that-matter", 
            "text": "Does not matter. Moving between branches is an \"updating Loop\" action. Nothing about the information above changes.", 
            "title": "What if I'm changing branches? Does that matter?"
        }, 
        {
            "location": "/faqs/update-faqs/#what-if-im-changing-phones", 
            "text": "Changing phones is a little different than updating. You will need to change pods in order to move to the new phone's Loop. And you will have to enter all your setting in again. Loop will not be \"restored from backup\" the way other apps are when switching phones...so you will have to actually build it fresh.", 
            "title": "What if I'm changing phones?"
        }, 
        {
            "location": "/faqs/update-faqs/#how-long-does-it-take", 
            "text": "Assuming your macOS and Xcode updates are done, then plan on about 30 minutes.", 
            "title": "How long does it take?"
        }, 
        {
            "location": "/faqs/ios13/", 
            "text": "iOS 13 FAQs\n\u2301\n\n\nEvery time a new iOS release comes out...there's loads of questions and a flurry of activity. To help answer these questions, this page will be here short term to help answer these FAQs.\n\n\nShould I update to iOS 13?\n\u2301\n\n\nThat is a question that you should answer separate from Loop considerations. New iOS releases often have bugs in them, so I tend to avoid updating my daughter's phone for a bit. Instead, I update my phone and test things out first. Dexcom's app could have problems even...who knows. But, I certainly want to get a chance to kick-the-tires (or watch other people kick tires) for a bit before I try new iOS releases. Once I see things are ok and working without major issues, then I'll update her phone's iOS. Plus, going backwards once you've updated is a pain and usually not possible shortly after the new version is released.\n\n\nAlso, I don't update iOS until I've had time to update my macOS and Xcode as well. Once you update iOS, you'll likely have to do matching updates to other Apple software for Loop building...so you might as well make sure you successfully update the other pieces so that everything is squared away.\n\n\nWill my Loop keep working if I don't update to iOS 13?\n\u2301\n\n\nYes. Your Loop app will work for one year after you built it (or until the developer team's enrollment/signing certificate expires, whichever comes first). So, if you don't update iOS...no big deal for your Loop app.\n\n\nWill my Loop keep working if I update to iOS 13?\n\u2301\n\n\nYes. We have not had one iOS update that has broken Loop apps already installed on the phone. I think we started Loop on iOS 9? Loop has worked through all the updates.\n\n\nDo I have to update my Loop if I change to iOS 13?\n\u2301\n\n\nNo. You don't have to. \n\n\nIs there a benefit to updating my Loop if I use iOS 13?\n\u2301\n\n\nNope. Unless you want to try dark mode which is in dev branch and being developed there...that's about the only thing that is iOS 13 specific in Loop.\n\n\nWhy is iOS update a big deal then?\n\u2301\n\n\nBecause iOS major releases (like going from iOS 12 to 13...where the whole number changes) involve updates to several major other Apple-related things. It's a cascade effect.\n\n\nIf you update iOS with a major release, then Xcode will need to update, too. Because Xcode will need the new command tools, Swift language updates, and simulators to be able to properly build for devices that have the new iOS.\n\n\nAnd then the cascade continues...that new Xcode will likely require a macOS update. And sometimes (as happened when Xcode 10 was released), the required update to macOS was also a major update (High Sierra to Mojave) that some computers couldn't do. They were \"unsupported\" by Apple and were aged-out. Luckily, the update to Xcode 11 does not involve aging out any computers this time. If you were running Xcode 10 already, you'll be able to update to Xcode 11 without fear that you'll be left out based on macOS age.\n\n\nSo, iOS updates are a big deal (for Loopers) because they involve needing to do some updates to be able to properly build Loop again the next time you want to. And people forget about updates. And then they forget about LoopDocs' page specifically to help with Updating your Loop app. And so they just blindly download and build like they did last time...unaware there were needed updates.\n\n\nIt's not so much about Loop when you update iOS...the issue is about what other things you need to update BEFORE you build Loop again and AFTER you update iOS.\n\n\nWhat do I need to do to build now with iOS 13?\n\u2301\n\n\nAs of today, September 23rd...things are much easier:\n\n\n\n\nDownload Xcode 11 from the App store\n\n\nIf you downloaded Xcode 11 GM previously, go to the App store and get the Xcode update waiting for you now. Xcode 11 GM is not what you need anymore...you need to get Xcode 11 from the App store.\n\n\n\n\n\n\nRestart computer after updating Xcode\n\n\nMake sure to restart your computer after updating Xcode. There's a known issue that happens often enough to be frustrating if you don't reboot. Either a build error about missing simulators or a \"device not connected\" (even when phone is connected). Just restart computer. It's easy enough.\n\n\n\n\n\n\nUse the Updating Loop app page in LoopDocs\n\n\nAnytime you want to update your Loop app (aka rebuild your Loop app), always start with the \nUpdating Loop page\n. That page will have current info to help you get going with what the new minimums are. Always start there. Is it possible there will be a slight delay in updating that page? Yes, I'm human. I have kids, job, house, etc. so it might be slightly delayed sometimes. But, generally during times like this when things are important to update...I make sure the pages reflect that. I'll do my part...your part is to check that page for current info.\n\n\n\n\n\n\nCHECK BUILD ERRORS PAGE\n\n\nIf you get a build error...still check the \nBuild Errors page\n. Because even if your exact error isn't there...the information you NEED to provide when asking for help is listed out on that page. And that information is critical. CRITICAL to be able to troubleshoot your build error.\n\n\n\n\nWhat if I don't have Xcode 11? Can I still build?\n\u2301\n\n\nI cannot understand why you wouldn't update to Xcode 11 at this point..but since you asked the answer depends on which version of iOS \nAND\n which branch of Loop you are using. If you are using iOS 13, YES...in any branch of Loop you want to build ever, you will need Xcode 11. If you are using dev branch, YES. No matter what iOS you are using with dev branch, you'll need Xcode 11.  Checkout out this chart to find out specifically about your combination of ios/branch and the needed Xcode minimum. (But really...just pull off the band-aid and install Xcode 11 anyways.)", 
            "title": "iOS 13 FAQs"
        }, 
        {
            "location": "/faqs/ios13/#ios-13-faqs", 
            "text": "Every time a new iOS release comes out...there's loads of questions and a flurry of activity. To help answer these questions, this page will be here short term to help answer these FAQs.", 
            "title": "iOS 13 FAQs"
        }, 
        {
            "location": "/faqs/ios13/#should-i-update-to-ios-13", 
            "text": "That is a question that you should answer separate from Loop considerations. New iOS releases often have bugs in them, so I tend to avoid updating my daughter's phone for a bit. Instead, I update my phone and test things out first. Dexcom's app could have problems even...who knows. But, I certainly want to get a chance to kick-the-tires (or watch other people kick tires) for a bit before I try new iOS releases. Once I see things are ok and working without major issues, then I'll update her phone's iOS. Plus, going backwards once you've updated is a pain and usually not possible shortly after the new version is released.  Also, I don't update iOS until I've had time to update my macOS and Xcode as well. Once you update iOS, you'll likely have to do matching updates to other Apple software for Loop building...so you might as well make sure you successfully update the other pieces so that everything is squared away.", 
            "title": "Should I update to iOS 13?"
        }, 
        {
            "location": "/faqs/ios13/#will-my-loop-keep-working-if-i-dont-update-to-ios-13", 
            "text": "Yes. Your Loop app will work for one year after you built it (or until the developer team's enrollment/signing certificate expires, whichever comes first). So, if you don't update iOS...no big deal for your Loop app.", 
            "title": "Will my Loop keep working if I don't update to iOS 13?"
        }, 
        {
            "location": "/faqs/ios13/#will-my-loop-keep-working-if-i-update-to-ios-13", 
            "text": "Yes. We have not had one iOS update that has broken Loop apps already installed on the phone. I think we started Loop on iOS 9? Loop has worked through all the updates.", 
            "title": "Will my Loop keep working if I update to iOS 13?"
        }, 
        {
            "location": "/faqs/ios13/#do-i-have-to-update-my-loop-if-i-change-to-ios-13", 
            "text": "No. You don't have to.", 
            "title": "Do I have to update my Loop if I change to iOS 13?"
        }, 
        {
            "location": "/faqs/ios13/#is-there-a-benefit-to-updating-my-loop-if-i-use-ios-13", 
            "text": "Nope. Unless you want to try dark mode which is in dev branch and being developed there...that's about the only thing that is iOS 13 specific in Loop.", 
            "title": "Is there a benefit to updating my Loop if I use iOS 13?"
        }, 
        {
            "location": "/faqs/ios13/#why-is-ios-update-a-big-deal-then", 
            "text": "Because iOS major releases (like going from iOS 12 to 13...where the whole number changes) involve updates to several major other Apple-related things. It's a cascade effect.  If you update iOS with a major release, then Xcode will need to update, too. Because Xcode will need the new command tools, Swift language updates, and simulators to be able to properly build for devices that have the new iOS.  And then the cascade continues...that new Xcode will likely require a macOS update. And sometimes (as happened when Xcode 10 was released), the required update to macOS was also a major update (High Sierra to Mojave) that some computers couldn't do. They were \"unsupported\" by Apple and were aged-out. Luckily, the update to Xcode 11 does not involve aging out any computers this time. If you were running Xcode 10 already, you'll be able to update to Xcode 11 without fear that you'll be left out based on macOS age.  So, iOS updates are a big deal (for Loopers) because they involve needing to do some updates to be able to properly build Loop again the next time you want to. And people forget about updates. And then they forget about LoopDocs' page specifically to help with Updating your Loop app. And so they just blindly download and build like they did last time...unaware there were needed updates.  It's not so much about Loop when you update iOS...the issue is about what other things you need to update BEFORE you build Loop again and AFTER you update iOS.", 
            "title": "Why is iOS update a big deal then?"
        }, 
        {
            "location": "/faqs/ios13/#what-do-i-need-to-do-to-build-now-with-ios-13", 
            "text": "As of today, September 23rd...things are much easier:   Download Xcode 11 from the App store  If you downloaded Xcode 11 GM previously, go to the App store and get the Xcode update waiting for you now. Xcode 11 GM is not what you need anymore...you need to get Xcode 11 from the App store.    Restart computer after updating Xcode  Make sure to restart your computer after updating Xcode. There's a known issue that happens often enough to be frustrating if you don't reboot. Either a build error about missing simulators or a \"device not connected\" (even when phone is connected). Just restart computer. It's easy enough.    Use the Updating Loop app page in LoopDocs  Anytime you want to update your Loop app (aka rebuild your Loop app), always start with the  Updating Loop page . That page will have current info to help you get going with what the new minimums are. Always start there. Is it possible there will be a slight delay in updating that page? Yes, I'm human. I have kids, job, house, etc. so it might be slightly delayed sometimes. But, generally during times like this when things are important to update...I make sure the pages reflect that. I'll do my part...your part is to check that page for current info.    CHECK BUILD ERRORS PAGE  If you get a build error...still check the  Build Errors page . Because even if your exact error isn't there...the information you NEED to provide when asking for help is listed out on that page. And that information is critical. CRITICAL to be able to troubleshoot your build error.", 
            "title": "What do I need to do to build now with iOS 13?"
        }, 
        {
            "location": "/faqs/ios13/#what-if-i-dont-have-xcode-11-can-i-still-build", 
            "text": "I cannot understand why you wouldn't update to Xcode 11 at this point..but since you asked the answer depends on which version of iOS  AND  which branch of Loop you are using. If you are using iOS 13, YES...in any branch of Loop you want to build ever, you will need Xcode 11. If you are using dev branch, YES. No matter what iOS you are using with dev branch, you'll need Xcode 11.  Checkout out this chart to find out specifically about your combination of ios/branch and the needed Xcode minimum. (But really...just pull off the band-aid and install Xcode 11 anyways.)", 
            "title": "What if I don't have Xcode 11? Can I still build?"
        }, 
        {
            "location": "/faqs/rileylink-faqs/", 
            "text": "RileyLink FAQs\n\u2301\n\n\nWhat is the RileyLink? Do I have to have one?\n\u2301\n\n\nYes, RileyLink is a required part of Loop. The RileyLink is a little device that helps your iPhone and pump (or Omnipod...that's a pump, too) speak to each other. The RileyLink is a critical part of the Loop system because the pump needs communications in radio form, and the iPhone needs communications in Bluetooth form. RileyLink is like a translator and can speak both formats so that the pump and iPhone can loop together. RileyLink helps get information to/from your pump by radio communications, and to/from your iPhone using Bluetooth.\n\n\nWhere can I buy a RileyLink?\n\u2301\n\n\nRileyLinks are made in batch productions (meaning sometimes they can go on backorder as another production is in process) and are available at GetRileyLink.org.\n\n\n\n\n\n\nIf you want to buy a RileyLink for Omnipods, click \nhere\n. \n\n\n\n\n\n\nIf you want to buy a RileyLink for Loop-compatible Medtronic pumps, click \nhere\n.\n\n\n\n\n\n\nDo I have to carry the RileyLink everywhere?\n\u2301\n\n\nThe short answer is yes. If you want your Loop to keep automatically adjusting basals and issuing commands to your pump, you will need the RileyLink so that these communications can happen. Put it in a purse, pocket, SPIbelt. Clip it to a backpack, belt, or bra...but please do bring it with you.\n\n\nHow far away can the RileyLink be?\n\u2301\n\n\nThat answer will depend, it is environmentally dependent. Generally speaking, RileyLink is solid about 10-12 feet away in most environments. In some situations, you could have RileyLink work fine even at 20+feet away. Other times, you may need to get RileyLink closer. What influences this distance? The biggest influences are (1) body-blocking and (2) \"noisy\" environments. The human body is a lot of water, and water is an excellent blocker of wireless communication.  So, sleeping on a pod and smothering it entirely with your body will possibly decrease the ability of RileyLink to communicate with the pod. Environments with a high concentration of wireless signals can also interfere with RileyLink's communications and make closer proximity a benefit. Where might those kinds of situations happen? Concerts, conferences, and sporting arenas are pretty prone to interference.\n\n\nWhat happens if I walk away from my RileyLink?\n\u2301\n\n\nWhile you are out of the communication range for your RileyLink, any running temp basal will keep going until it finishes (the longest temp basal that Loop sets are for 30 minutes duration...so within 30 minutes or less your pump would go back to your regularly scheduled basal). When you come back into range of your RileyLink, Loop will pick back up within 5-10 minutes without you needing to do anything.\n\n\nWhat are the differences between Medtronic and Omnipod RileyLinks?\n\u2301\n\n\nThere are two different types of RileyLink currently; the difference being the antenna is optimized for the pump you are using. Otherwise they are identical.\n\n\n\n\n\n\n\n\n\nIs the new antenna an \"upgrade\" in Loop performance?\n\u2301\n\n\nIt is a bit of a misnomer to think of the newer copper coil antenna as an \"upgrade\". It is only an upgrade if you want to pod Loop. The new antenna will actually decrease your range if you try to use it with a Medtronic Loop.  See the next FAQ for a more detailed description and chart.\n\n\nWhat will happen if you use a 916MHz antenna RileyLink with an Omnipod? Or vice versa?\n\u2301\n\n\nThe answer will first depend on exactly how old that RileyLink is and what firmware it has installed.\n\n\nBefore August 2018, RileyLinks had a firmware that works for only Medtronic pump communication. So, if you have the older firmware on a RileyLink, your pod will never pair in Loop using that RileyLink. The GetRileyLink site does offer a \nRileyLink firmware update service\n, if you want to update to the newer pod-usable firmware.\n\n\nRileyLinks produced after August 2018, include newer firmware that is needed for Omnipod pump communications as well. The newer firmware will say \nsubg_rfspy 2.2/ble_rfspy 2.0\n in the RileyLink menu, like below when paired in Loop.\n\n\n\n\n\n\n\n\n\nAssuming your has the newer RileyLink firmware, you can \ntechnically\n use that RileyLink with either pump on Loop. But, you will have significant frustrations with the short distances required between the pump/pod and RileyLink when using the \"wrong\" antenna. Even keeping RileyLink in the pocket on the opposite of where the POD is on your body can cause issues with the 916MHz antenna. With mismatched antenna/pump, the RileyLink needs to be very close and in clear line-of-sight to pump/pod, that it makes everyday living a bit hard. If you use the appropriate-antenna-for-your-pump RileyLink, the distances the pump/pod and RileyLink can tolerate from each other is much more \"real world\" friendly and stable.\n\n\nIn summary, definitely use the appropriate RileyLink with the antenna that matches your pump so that you are less frustrated. In a pinch, your old RileyLink might work as a backup, but you won't love it.\n\n\n\n\n\n\n\n\n\nCan you swap out the old antenna on a RileyLink?\n\u2301\n\n\nYes, the antenna swap is not a hard swap if you just have basic soldering skills. The old antenna can be removed easily by reheating the solder. New 433MHz antennas and a cap can be found on \nGetRileyLink site\n. Tips: use flux and clean the antenna stub before soldering. Poorly DIY-soldered antennas can lead to a decreased range and frequent communication drops between Loop and the pods.\n\n\nHow long will my RileyLink go between charging?\n\u2301\n\n\nRileyLinks can go about 30-32 hours (more or less) on a single charge. There is no way to see the remaining charge level, so most people just get into the habit of charging overnight while they sleep. The actual time to fully recharge is about 1 or 2 hours; you'll know it is fully charged when the red light turns off. After a full charge, the red light will turn off and then periodically turn on for short times while it \"tops off\" while still on a charger.\n\n\nHow long will my RileyLink battery last?\n\u2301\n\n\nEventually, lithium polymer (LiPo) batteries will lose charging capacity and you would want to replace if you notice the battery not lasting the full day. We've been using our current battery for nearly 2 years without issue.\n\n\nHow can I tell how much charge my RileyLink has?\n\u2301\n\n\nYou can't. There is no charge level indicator. Just charge it nightly, and you won't have a problem. Full battery charge should last about 30-36 hours depending on battery health. Charging takes less than 2 hours.\n\n\nHow should I carry the RileyLink? Does it make a difference?\n\u2301\n\n\nIn general, you want to get in the habit of carrying RileyLink with you, yes. A pocket, carabiner, lanyard, SPIbelt...the options are endless. What you don't want to do is put the RileyLink in a blocking bag that has RFID blocking (some travel fanny packs have that). The distance that your RileyLink can be away from your pump will depend heavily on the environment you are in.\n\n\nIs RileyLink waterproof?\n\u2301\n\n\nNope. Nor is it sweat-proof. Be careful.\n\n\nWhat is the most common issue for RileyLink?\n\u2301\n\n\nPeople not \npushing the LiPo battery\n in all the way when they first assemble their RileyLink. It takes quite a bit of push to get the plug inserted far enough. If not secured well, Loop will have more frequent problems.\n\n\nCan I use more than one RileyLink at a time? Will it improve anything?\n\u2301\n\n\nYes, you can have two turned on, but it won't help anything really. Loop only uses one RileyLink at a time. If you have several RileyLinks turned on in Loop settings, your Loop will only look for another RileyLink after Loop fails for over 15 minutes on the original RileyLink. In my experience, it is rare that Loop would fail for more than 15 minutes and a second RileyLink would help in the same environment. If one RileyLink gets damaged though and you need to swap out to a second RileyLink, there are no issues with that. \n\n\nCan I run Loop without a RileyLink?\n\u2301\n\n\nNope.", 
            "title": "RileyLink FAQs"
        }, 
        {
            "location": "/faqs/rileylink-faqs/#rileylink-faqs", 
            "text": "", 
            "title": "RileyLink FAQs"
        }, 
        {
            "location": "/faqs/rileylink-faqs/#what-is-the-rileylink-do-i-have-to-have-one", 
            "text": "Yes, RileyLink is a required part of Loop. The RileyLink is a little device that helps your iPhone and pump (or Omnipod...that's a pump, too) speak to each other. The RileyLink is a critical part of the Loop system because the pump needs communications in radio form, and the iPhone needs communications in Bluetooth form. RileyLink is like a translator and can speak both formats so that the pump and iPhone can loop together. RileyLink helps get information to/from your pump by radio communications, and to/from your iPhone using Bluetooth.", 
            "title": "What is the RileyLink? Do I have to have one?"
        }, 
        {
            "location": "/faqs/rileylink-faqs/#where-can-i-buy-a-rileylink", 
            "text": "RileyLinks are made in batch productions (meaning sometimes they can go on backorder as another production is in process) and are available at GetRileyLink.org.    If you want to buy a RileyLink for Omnipods, click  here .     If you want to buy a RileyLink for Loop-compatible Medtronic pumps, click  here .", 
            "title": "Where can I buy a RileyLink?"
        }, 
        {
            "location": "/faqs/rileylink-faqs/#do-i-have-to-carry-the-rileylink-everywhere", 
            "text": "The short answer is yes. If you want your Loop to keep automatically adjusting basals and issuing commands to your pump, you will need the RileyLink so that these communications can happen. Put it in a purse, pocket, SPIbelt. Clip it to a backpack, belt, or bra...but please do bring it with you.", 
            "title": "Do I have to carry the RileyLink everywhere?"
        }, 
        {
            "location": "/faqs/rileylink-faqs/#how-far-away-can-the-rileylink-be", 
            "text": "That answer will depend, it is environmentally dependent. Generally speaking, RileyLink is solid about 10-12 feet away in most environments. In some situations, you could have RileyLink work fine even at 20+feet away. Other times, you may need to get RileyLink closer. What influences this distance? The biggest influences are (1) body-blocking and (2) \"noisy\" environments. The human body is a lot of water, and water is an excellent blocker of wireless communication.  So, sleeping on a pod and smothering it entirely with your body will possibly decrease the ability of RileyLink to communicate with the pod. Environments with a high concentration of wireless signals can also interfere with RileyLink's communications and make closer proximity a benefit. Where might those kinds of situations happen? Concerts, conferences, and sporting arenas are pretty prone to interference.", 
            "title": "How far away can the RileyLink be?"
        }, 
        {
            "location": "/faqs/rileylink-faqs/#what-happens-if-i-walk-away-from-my-rileylink", 
            "text": "While you are out of the communication range for your RileyLink, any running temp basal will keep going until it finishes (the longest temp basal that Loop sets are for 30 minutes duration...so within 30 minutes or less your pump would go back to your regularly scheduled basal). When you come back into range of your RileyLink, Loop will pick back up within 5-10 minutes without you needing to do anything.", 
            "title": "What happens if I walk away from my RileyLink?"
        }, 
        {
            "location": "/faqs/rileylink-faqs/#what-are-the-differences-between-medtronic-and-omnipod-rileylinks", 
            "text": "There are two different types of RileyLink currently; the difference being the antenna is optimized for the pump you are using. Otherwise they are identical.", 
            "title": "What are the differences between Medtronic and Omnipod RileyLinks?"
        }, 
        {
            "location": "/faqs/rileylink-faqs/#is-the-new-antenna-an-upgrade-in-loop-performance", 
            "text": "It is a bit of a misnomer to think of the newer copper coil antenna as an \"upgrade\". It is only an upgrade if you want to pod Loop. The new antenna will actually decrease your range if you try to use it with a Medtronic Loop.  See the next FAQ for a more detailed description and chart.", 
            "title": "Is the new antenna an \"upgrade\" in Loop performance?"
        }, 
        {
            "location": "/faqs/rileylink-faqs/#what-will-happen-if-you-use-a-916mhz-antenna-rileylink-with-an-omnipod-or-vice-versa", 
            "text": "The answer will first depend on exactly how old that RileyLink is and what firmware it has installed.  Before August 2018, RileyLinks had a firmware that works for only Medtronic pump communication. So, if you have the older firmware on a RileyLink, your pod will never pair in Loop using that RileyLink. The GetRileyLink site does offer a  RileyLink firmware update service , if you want to update to the newer pod-usable firmware.  RileyLinks produced after August 2018, include newer firmware that is needed for Omnipod pump communications as well. The newer firmware will say  subg_rfspy 2.2/ble_rfspy 2.0  in the RileyLink menu, like below when paired in Loop.     Assuming your has the newer RileyLink firmware, you can  technically  use that RileyLink with either pump on Loop. But, you will have significant frustrations with the short distances required between the pump/pod and RileyLink when using the \"wrong\" antenna. Even keeping RileyLink in the pocket on the opposite of where the POD is on your body can cause issues with the 916MHz antenna. With mismatched antenna/pump, the RileyLink needs to be very close and in clear line-of-sight to pump/pod, that it makes everyday living a bit hard. If you use the appropriate-antenna-for-your-pump RileyLink, the distances the pump/pod and RileyLink can tolerate from each other is much more \"real world\" friendly and stable.  In summary, definitely use the appropriate RileyLink with the antenna that matches your pump so that you are less frustrated. In a pinch, your old RileyLink might work as a backup, but you won't love it.", 
            "title": "What will happen if you use a 916MHz antenna RileyLink with an Omnipod? Or vice versa?"
        }, 
        {
            "location": "/faqs/rileylink-faqs/#can-you-swap-out-the-old-antenna-on-a-rileylink", 
            "text": "Yes, the antenna swap is not a hard swap if you just have basic soldering skills. The old antenna can be removed easily by reheating the solder. New 433MHz antennas and a cap can be found on  GetRileyLink site . Tips: use flux and clean the antenna stub before soldering. Poorly DIY-soldered antennas can lead to a decreased range and frequent communication drops between Loop and the pods.", 
            "title": "Can you swap out the old antenna on a RileyLink?"
        }, 
        {
            "location": "/faqs/rileylink-faqs/#how-long-will-my-rileylink-go-between-charging", 
            "text": "RileyLinks can go about 30-32 hours (more or less) on a single charge. There is no way to see the remaining charge level, so most people just get into the habit of charging overnight while they sleep. The actual time to fully recharge is about 1 or 2 hours; you'll know it is fully charged when the red light turns off. After a full charge, the red light will turn off and then periodically turn on for short times while it \"tops off\" while still on a charger.", 
            "title": "How long will my RileyLink go between charging?"
        }, 
        {
            "location": "/faqs/rileylink-faqs/#how-long-will-my-rileylink-battery-last", 
            "text": "Eventually, lithium polymer (LiPo) batteries will lose charging capacity and you would want to replace if you notice the battery not lasting the full day. We've been using our current battery for nearly 2 years without issue.", 
            "title": "How long will my RileyLink battery last?"
        }, 
        {
            "location": "/faqs/rileylink-faqs/#how-can-i-tell-how-much-charge-my-rileylink-has", 
            "text": "You can't. There is no charge level indicator. Just charge it nightly, and you won't have a problem. Full battery charge should last about 30-36 hours depending on battery health. Charging takes less than 2 hours.", 
            "title": "How can I tell how much charge my RileyLink has?"
        }, 
        {
            "location": "/faqs/rileylink-faqs/#how-should-i-carry-the-rileylink-does-it-make-a-difference", 
            "text": "In general, you want to get in the habit of carrying RileyLink with you, yes. A pocket, carabiner, lanyard, SPIbelt...the options are endless. What you don't want to do is put the RileyLink in a blocking bag that has RFID blocking (some travel fanny packs have that). The distance that your RileyLink can be away from your pump will depend heavily on the environment you are in.", 
            "title": "How should I carry the RileyLink? Does it make a difference?"
        }, 
        {
            "location": "/faqs/rileylink-faqs/#is-rileylink-waterproof", 
            "text": "Nope. Nor is it sweat-proof. Be careful.", 
            "title": "Is RileyLink waterproof?"
        }, 
        {
            "location": "/faqs/rileylink-faqs/#what-is-the-most-common-issue-for-rileylink", 
            "text": "People not  pushing the LiPo battery  in all the way when they first assemble their RileyLink. It takes quite a bit of push to get the plug inserted far enough. If not secured well, Loop will have more frequent problems.", 
            "title": "What is the most common issue for RileyLink?"
        }, 
        {
            "location": "/faqs/rileylink-faqs/#can-i-use-more-than-one-rileylink-at-a-time-will-it-improve-anything", 
            "text": "Yes, you can have two turned on, but it won't help anything really. Loop only uses one RileyLink at a time. If you have several RileyLinks turned on in Loop settings, your Loop will only look for another RileyLink after Loop fails for over 15 minutes on the original RileyLink. In my experience, it is rare that Loop would fail for more than 15 minutes and a second RileyLink would help in the same environment. If one RileyLink gets damaged though and you need to swap out to a second RileyLink, there are no issues with that.", 
            "title": "Can I use more than one RileyLink at a time? Will it improve anything?"
        }, 
        {
            "location": "/faqs/rileylink-faqs/#can-i-run-loop-without-a-rileylink", 
            "text": "Nope.", 
            "title": "Can I run Loop without a RileyLink?"
        }, 
        {
            "location": "/faqs/algorithm-faqs/", 
            "text": "Algorithm FAQs\n\u2301\n\n\nDoes Loop \"learn\" or detect changes in your insulin needs?\n\u2301\n\n\nNo. Loop assumes the settings you've provided are correct. If outside factors (such as hormones, illness, exercise, medications, etc) affect your underlying settings that determine insulin needs (basals, insulin sensitivity factor, carb ratio) you may need to manually adjust your settings. Loop will not \"learn\" or \"assume\" that your underlying needs have changed. Instead, Loop is designed to react to the changes in blood glucose and its insulin dosing decisions are based on the settings that you have entered in the app.\n\n\nThere is a short-term retrospective analysis built into Loop which will apply a weighted-correction based on the past 60 minutes of blood glucose changes. While this does help some, larger-scale \"learning\" is not currently a part of Loop's algorithm.\n\n\nPerhaps in subsequent versions of Loop, auto-adjustment of settings or machine learning could be incorporated. Until then, you will need to tell Loop if your underlying settings need updating or make temporary adjustments for short term issues. To understand why your settings matter, check out \nLooptips.org\n.\n\n\nWhat does negative Active Insulin mean?\n\u2301\n\n\nWhen Loop withholds or suspends some of your expected basal insulin, that starts an accumulation of insulin deficit. Similar to if you have a kinked cannula and insulin is not delivered, you'd call yourself \"lacking insulin\". That is the same concept of having negative active insulin (aka negative insulin on board). When you have negative insulin on board, it is a sign that Loop has been actively helping you prevent a low blood sugar. If you find significant negative insulin on board regularly, you probably need to \nadjust/test your settings\n.\n\n\n\u2301", 
            "title": "Algorithm FAQs"
        }, 
        {
            "location": "/faqs/algorithm-faqs/#algorithm-faqs", 
            "text": "", 
            "title": "Algorithm FAQs"
        }, 
        {
            "location": "/faqs/algorithm-faqs/#does-loop-learn-or-detect-changes-in-your-insulin-needs", 
            "text": "No. Loop assumes the settings you've provided are correct. If outside factors (such as hormones, illness, exercise, medications, etc) affect your underlying settings that determine insulin needs (basals, insulin sensitivity factor, carb ratio) you may need to manually adjust your settings. Loop will not \"learn\" or \"assume\" that your underlying needs have changed. Instead, Loop is designed to react to the changes in blood glucose and its insulin dosing decisions are based on the settings that you have entered in the app.  There is a short-term retrospective analysis built into Loop which will apply a weighted-correction based on the past 60 minutes of blood glucose changes. While this does help some, larger-scale \"learning\" is not currently a part of Loop's algorithm.  Perhaps in subsequent versions of Loop, auto-adjustment of settings or machine learning could be incorporated. Until then, you will need to tell Loop if your underlying settings need updating or make temporary adjustments for short term issues. To understand why your settings matter, check out  Looptips.org .", 
            "title": "Does Loop \"learn\" or detect changes in your insulin needs?"
        }, 
        {
            "location": "/faqs/algorithm-faqs/#what-does-negative-active-insulin-mean", 
            "text": "When Loop withholds or suspends some of your expected basal insulin, that starts an accumulation of insulin deficit. Similar to if you have a kinked cannula and insulin is not delivered, you'd call yourself \"lacking insulin\". That is the same concept of having negative active insulin (aka negative insulin on board). When you have negative insulin on board, it is a sign that Loop has been actively helping you prevent a low blood sugar. If you find significant negative insulin on board regularly, you probably need to  adjust/test your settings .", 
            "title": "What does negative Active Insulin mean?"
        }, 
        {
            "location": "/faqs/cgm-faqs/", 
            "text": "CGM FAQs\n\u2301\n\n\nWhat CGMs does Loop work with?\n\u2301\n\n\nLoop works Dexcom G4 with share, G5, G6, Share and the Medtronic CGM systems compatible with Looping pumps.\n\n\nRead the details \nhere\n.\n\n\nCan I use Libre sensors with a reader like Miao Miao?\n\u2301\n\n\nIf you want to use a Libre sensor you will need to modify Loop to accomplish that use. Loop code does not natively support that sensor, nor readers.\n\n\nCan I use Eversense?\n\u2301\n\n\nNope. Eversense does not write to Apple Health nor has the BT communications protocol been reverse engineered the way it has been done with Dexcom.  \n\n\nCan Loop read CGM data from Nightscout?\n\u2301\n\n\nLoop does not read from, nor upload to, CGM data for Nightscout. You would need to use a solution such as NightscoutShareServer and make changes to Loop code in order to do that. Please search the Looped group on Facebook for posts regarding that option, as it is not a part of standard Loop use and is a community-based modification. You will need to do your homework and research to make that happen. At this time, there is not an active version of a modified Loop that appears to support this option easily.\n\n\nCan Spike or Xdrip be used with Loop?\n\u2301\n\n\nSpike and Xdrip are not supported by Loop. You will need to implement community-based modifications to Loop in order to use those apps with Loop. Helpful tip: Use \nspike loop\n as a search term in Looped group for additional info about community-modified Loop versions for Spike. Links to those modified Loop versions are not provided in these LoopDocs because we (the LoopDocs maintainers and Loop developers) do not actively watch those versions to ensure they are up-to-date.", 
            "title": "CGM FAQs"
        }, 
        {
            "location": "/faqs/cgm-faqs/#cgm-faqs", 
            "text": "", 
            "title": "CGM FAQs"
        }, 
        {
            "location": "/faqs/cgm-faqs/#what-cgms-does-loop-work-with", 
            "text": "Loop works Dexcom G4 with share, G5, G6, Share and the Medtronic CGM systems compatible with Looping pumps.  Read the details  here .", 
            "title": "What CGMs does Loop work with?"
        }, 
        {
            "location": "/faqs/cgm-faqs/#can-i-use-libre-sensors-with-a-reader-like-miao-miao", 
            "text": "If you want to use a Libre sensor you will need to modify Loop to accomplish that use. Loop code does not natively support that sensor, nor readers.", 
            "title": "Can I use Libre sensors with a reader like Miao Miao?"
        }, 
        {
            "location": "/faqs/cgm-faqs/#can-i-use-eversense", 
            "text": "Nope. Eversense does not write to Apple Health nor has the BT communications protocol been reverse engineered the way it has been done with Dexcom.", 
            "title": "Can I use Eversense?"
        }, 
        {
            "location": "/faqs/cgm-faqs/#can-loop-read-cgm-data-from-nightscout", 
            "text": "Loop does not read from, nor upload to, CGM data for Nightscout. You would need to use a solution such as NightscoutShareServer and make changes to Loop code in order to do that. Please search the Looped group on Facebook for posts regarding that option, as it is not a part of standard Loop use and is a community-based modification. You will need to do your homework and research to make that happen. At this time, there is not an active version of a modified Loop that appears to support this option easily.", 
            "title": "Can Loop read CGM data from Nightscout?"
        }, 
        {
            "location": "/faqs/cgm-faqs/#can-spike-or-xdrip-be-used-with-loop", 
            "text": "Spike and Xdrip are not supported by Loop. You will need to implement community-based modifications to Loop in order to use those apps with Loop. Helpful tip: Use  spike loop  as a search term in Looped group for additional info about community-modified Loop versions for Spike. Links to those modified Loop versions are not provided in these LoopDocs because we (the LoopDocs maintainers and Loop developers) do not actively watch those versions to ensure they are up-to-date.", 
            "title": "Can Spike or Xdrip be used with Loop?"
        }, 
        {
            "location": "/faqs/safety-faqs/", 
            "text": "Safety Tips\n\u2301\n\n\nBeware the Medtronic Easy Bolus button\n\u2301\n\n\nMedtronic's easy bolus button has been the cause of several accidental boluses when the pump has been carried in a pocket. Best practice would be to disable the Easy Bolus button since you will be doing boluses from the phone anyways.\n\n\nHealth app permissions\n\u2301\n\n\nDo not let other apps, such as Spike App or MyFitnessPal, on your iPhone write carbohydrates to Health app. Loop could read those carbohydrates and you could be dosed for those carbohydrates. You can read more about Health permissions \nhere\n.\n\n\nFinish your Medtronic priming\n\u2301\n\n\nAfter a site change and reservoir rewind, Medtronic's pump will have a menu on the pump screen related to finishing your prime. Make sure you complete that screen and always return to the main menu. Medtronic's pump won't resume basal insulin delivery until that priming screen is completed.\n\n\n\u2301", 
            "title": "Safety Tips"
        }, 
        {
            "location": "/faqs/safety-faqs/#safety-tips", 
            "text": "", 
            "title": "Safety Tips"
        }, 
        {
            "location": "/faqs/safety-faqs/#beware-the-medtronic-easy-bolus-button", 
            "text": "Medtronic's easy bolus button has been the cause of several accidental boluses when the pump has been carried in a pocket. Best practice would be to disable the Easy Bolus button since you will be doing boluses from the phone anyways.", 
            "title": "Beware the Medtronic Easy Bolus button"
        }, 
        {
            "location": "/faqs/safety-faqs/#health-app-permissions", 
            "text": "Do not let other apps, such as Spike App or MyFitnessPal, on your iPhone write carbohydrates to Health app. Loop could read those carbohydrates and you could be dosed for those carbohydrates. You can read more about Health permissions  here .", 
            "title": "Health app permissions"
        }, 
        {
            "location": "/faqs/safety-faqs/#finish-your-medtronic-priming", 
            "text": "After a site change and reservoir rewind, Medtronic's pump will have a menu on the pump screen related to finishing your prime. Make sure you complete that screen and always return to the main menu. Medtronic's pump won't resume basal insulin delivery until that priming screen is completed.", 
            "title": "Finish your Medtronic priming"
        }, 
        {
            "location": "/build/overview/", 
            "text": "Overview of Build Process\n\u2301\n\n\nThe overall installation process is pretty simple. We start with checking that you have the compatible gear needed to Loop, do a couple of  preparation steps on the computer, and then move onto building the Loop app.\n\n\nWhile all of this is probably quite intimidating at first, I promise that it is quite doable by the average computer user. \n\n\n\n\nTake it one step at a time...\n\n\nIf you are worried about how long this will take, you can always stop at one of the steps and come back later. The steps are meant to be nice stopping points to take breaks if needed.", 
            "title": "Overview"
        }, 
        {
            "location": "/build/overview/#overview-of-build-process", 
            "text": "The overall installation process is pretty simple. We start with checking that you have the compatible gear needed to Loop, do a couple of  preparation steps on the computer, and then move onto building the Loop app.  While all of this is probably quite intimidating at first, I promise that it is quite doable by the average computer user.    Take it one step at a time...  If you are worried about how long this will take, you can always stop at one of the steps and come back later. The steps are meant to be nice stopping points to take breaks if needed.", 
            "title": "Overview of Build Process"
        }, 
        {
            "location": "/build/step1/", 
            "text": "Step 1: Compatible Computer\n\u2301\n\n\n\n\nTime Estimate\n\n\n\n\n5 minutes, if already have Mojave macOS\n\n\n30-60 minutes, if need to install macOS updates\n\n\n\n\n\n\n\n\nSummary\n\n\n\n\nCheck your macOS and make sure it is Mojave.\n\n\nDo not use any of the beta macOS versions. (If you don't know what that means, don't worry...that means you aren't using one.)\n\n\nIf your macOS is not Mojave, check to see if you can up update your macOS to Mojave and do so.\n\n\nIf you cannot upgrade your existing computer to Mojave, you'll need to check into a borrowed computer, patcher tool, or perhaps a new/used computer compatible with Mojave.\n\n\nCheck the \nSoftware Update\n to see if your Mojave version has any updates available since you first installed it.\n\n\n\n\n\n\n\n\nFAQs\n\n\n\n\n\"Can I use a PC or Windows computer? I don't own an Apple computer.\"\n Yes...sort of. Please see \nthis FAQ about using Virtual Machine\n.\n\n\n\"What can I do if my computer is too old to be upgraded to Mojave?\"\n You could take a look at using \nMojave Patcher\n, but this is totally on your own and not part of these instructions. Just offering the answer to the FAQ...it is up to you to read about the patcher tool and what risks it may involve for you.\n\n\n\"Can I borrow someone else's Apple computer?\"\n Yes, please see \nthis FAQ about borrowing a computer\n to learn more.\n\n\n\"How often do I need to use the computer?\"\n Computer access is only required when you are initially installing the Loop app or updating to a newer Loop release. You do NOT need access to an Apple computer in order to troubleshoot or change Loop settings, such as basal profiles or carb ratios.\n\n\n\n\n\n\nCheck your macOS\n\u2301\n\n\nYou need an Apple computer that has at least macOS 10.14.3 (or newer) installed. This macOS is called Mojave. To find out if you have Mojave installed, click on the little Apple icon in your computer's upper left corner and select the \nAbout this Mac\n. It doesn't matter if the computer is a MacBook, iMac, macMini, etc...just so long as it has macOS Mojave. If your computer does not have Mojave, you'll need to check the \nSoftware Update\n button on that screen to see if you can update to Mojave.\n\n\n\n\n\n\n\n\n\nIf your computer does not give you the option to upgrade to Mojave...it is quite possible that Apple has decided your computer is too old to run Mojave. How old is too old? That will depend on your computer model and year as shown below:\n\n\n\n\n\n\n\n\n\nNext Step: Compatible iPhone/iPod touch\n\u2301\n\n\nNow you are ready to move onto Step 2 to check if you have a \nCompatible iPhone/iPod touch\n.", 
            "title": "Step 1 Compatible Computer"
        }, 
        {
            "location": "/build/step1/#step-1-compatible-computer", 
            "text": "Time Estimate   5 minutes, if already have Mojave macOS  30-60 minutes, if need to install macOS updates     Summary   Check your macOS and make sure it is Mojave.  Do not use any of the beta macOS versions. (If you don't know what that means, don't worry...that means you aren't using one.)  If your macOS is not Mojave, check to see if you can up update your macOS to Mojave and do so.  If you cannot upgrade your existing computer to Mojave, you'll need to check into a borrowed computer, patcher tool, or perhaps a new/used computer compatible with Mojave.  Check the  Software Update  to see if your Mojave version has any updates available since you first installed it.     FAQs   \"Can I use a PC or Windows computer? I don't own an Apple computer.\"  Yes...sort of. Please see  this FAQ about using Virtual Machine .  \"What can I do if my computer is too old to be upgraded to Mojave?\"  You could take a look at using  Mojave Patcher , but this is totally on your own and not part of these instructions. Just offering the answer to the FAQ...it is up to you to read about the patcher tool and what risks it may involve for you.  \"Can I borrow someone else's Apple computer?\"  Yes, please see  this FAQ about borrowing a computer  to learn more.  \"How often do I need to use the computer?\"  Computer access is only required when you are initially installing the Loop app or updating to a newer Loop release. You do NOT need access to an Apple computer in order to troubleshoot or change Loop settings, such as basal profiles or carb ratios.", 
            "title": "Step 1: Compatible Computer"
        }, 
        {
            "location": "/build/step1/#check-your-macos", 
            "text": "You need an Apple computer that has at least macOS 10.14.3 (or newer) installed. This macOS is called Mojave. To find out if you have Mojave installed, click on the little Apple icon in your computer's upper left corner and select the  About this Mac . It doesn't matter if the computer is a MacBook, iMac, macMini, etc...just so long as it has macOS Mojave. If your computer does not have Mojave, you'll need to check the  Software Update  button on that screen to see if you can update to Mojave.     If your computer does not give you the option to upgrade to Mojave...it is quite possible that Apple has decided your computer is too old to run Mojave. How old is too old? That will depend on your computer model and year as shown below:", 
            "title": "Check your macOS"
        }, 
        {
            "location": "/build/step1/#next-step-compatible-iphoneipod-touch", 
            "text": "Now you are ready to move onto Step 2 to check if you have a  Compatible iPhone/iPod touch .", 
            "title": "Next Step: Compatible iPhone/iPod touch"
        }, 
        {
            "location": "/build/step2/", 
            "text": "Step 2: Compatible iPhone or iPod touch\n\u2301\n\n\n\n\nTime Estimate\n\n\n\n\n5 minutes, if already have iOS 12.2 or newer\n\n\n20 minutes, if need to update your compatible device to iOS 12.2 or newer\n\n\n10 minutes, if you need to order a device from Apple website\n\n\n0 minutes, if you own an Android and won't buy Apple products...that's fine, too.\n\n\n\n\n\n\n\n\nSummary\n\n\n\n\nCheck your iOS version and make sure you have 12.2 minimum.\n\n\nDo not use any of the beta iOS versions. (Don't worry...if you don't know what that means, then you aren't using one.)\n\n\nIf using Dexcom CGM, your Looping iPhone/iPod touch will need the Dexcom app installed on it in order to Loop without an internet connection.\n\n\n\n\n\n\n\n\nFAQs\n\n\n\n\n\"Can I use an android?\"\n No.\n\n\n\"But why not?\"\n Because Loop is written in Apple's Swift language, which does not compile onto Android operating systems.\n\n\n\"Can I use an iPad?\"\n No. iPads do not support Apple Health and that is an important part of Loop's inner workings.\n\n\n\"Does my iPhone need cell plan?\"\n No. Loop will work without an internet connection...however you will not have Dexcom Follow data or Nightscout data if you choose to use a device that doesn't have an internet connection. In other words Loop will work, but remotely watching followers won't see Looping data unless the Loop device has an internet connection.\n\n\n\n\n\n\niOS check\n\u2301\n\n\nLoop is compatible with iPhone and iPod touch devices that can run iOS 12.2 or newer. Therefore, compatible devices include:\n\n\n\n\n\n\niPhone X, XS, XR, XS Max\n\n\n\n\n\n\niPhone 8, 8+\n\n\n\n\n\n\niPhone 7, 7+\n\n\n\n\n\n\niPhone 6, 6+, 6s, 6s+\n\n\n\n\n\n\niPhone SE\n\n\n\n\n\n\niPhone 5s\n\n\n\n\n\n\niPod Touch, 6th generation or newer\n\n\n\n\n\n\niOS 13 update\n\u2301\n\n\nOn September 19, 2019, iOS 13 will be released. The iPhone 5s, 6, 6+ models will not be able to update to iOS 13. This does not pose a problem currently. You can still build Loop. HOWEVER, there are upcoming Loop changes that will require users to have iOS 13 on their devices. There is no timeframe for when these Loop changes will be coming, but just be aware that we do anticipate all Loopers will need to be using iOS 13 in the future if they want the new versions of Loop.\n\n\nUntil then, you can use iOS 12.2 (or newer through iOS 13) without issue. Updating to iOS 13 is optional as far as Loop is concerned. Your Loop app on your phone will continue to run fine if you choose to update to iOS 13. It will also continue to run fine if you do not update to iOS 13. \n\n\nYour phone's iOS version can be found under the Settings app, General, About as shown below.\n\n\n\n\n\n\n\n\n\nNext Step: Compatible Pump\n\u2301\n\n\nNow you are ready to move onto Step 3 to check if you have a \nCompatible pump\n.", 
            "title": "Step 2 Compatible iPhone/iPod touch"
        }, 
        {
            "location": "/build/step2/#step-2-compatible-iphone-or-ipod-touch", 
            "text": "Time Estimate   5 minutes, if already have iOS 12.2 or newer  20 minutes, if need to update your compatible device to iOS 12.2 or newer  10 minutes, if you need to order a device from Apple website  0 minutes, if you own an Android and won't buy Apple products...that's fine, too.     Summary   Check your iOS version and make sure you have 12.2 minimum.  Do not use any of the beta iOS versions. (Don't worry...if you don't know what that means, then you aren't using one.)  If using Dexcom CGM, your Looping iPhone/iPod touch will need the Dexcom app installed on it in order to Loop without an internet connection.     FAQs   \"Can I use an android?\"  No.  \"But why not?\"  Because Loop is written in Apple's Swift language, which does not compile onto Android operating systems.  \"Can I use an iPad?\"  No. iPads do not support Apple Health and that is an important part of Loop's inner workings.  \"Does my iPhone need cell plan?\"  No. Loop will work without an internet connection...however you will not have Dexcom Follow data or Nightscout data if you choose to use a device that doesn't have an internet connection. In other words Loop will work, but remotely watching followers won't see Looping data unless the Loop device has an internet connection.", 
            "title": "Step 2: Compatible iPhone or iPod touch"
        }, 
        {
            "location": "/build/step2/#ios-check", 
            "text": "Loop is compatible with iPhone and iPod touch devices that can run iOS 12.2 or newer. Therefore, compatible devices include:    iPhone X, XS, XR, XS Max    iPhone 8, 8+    iPhone 7, 7+    iPhone 6, 6+, 6s, 6s+    iPhone SE    iPhone 5s    iPod Touch, 6th generation or newer", 
            "title": "iOS check"
        }, 
        {
            "location": "/build/step2/#ios-13-update", 
            "text": "On September 19, 2019, iOS 13 will be released. The iPhone 5s, 6, 6+ models will not be able to update to iOS 13. This does not pose a problem currently. You can still build Loop. HOWEVER, there are upcoming Loop changes that will require users to have iOS 13 on their devices. There is no timeframe for when these Loop changes will be coming, but just be aware that we do anticipate all Loopers will need to be using iOS 13 in the future if they want the new versions of Loop.  Until then, you can use iOS 12.2 (or newer through iOS 13) without issue. Updating to iOS 13 is optional as far as Loop is concerned. Your Loop app on your phone will continue to run fine if you choose to update to iOS 13. It will also continue to run fine if you do not update to iOS 13.   Your phone's iOS version can be found under the Settings app, General, About as shown below.", 
            "title": "iOS 13 update"
        }, 
        {
            "location": "/build/step2/#next-step-compatible-pump", 
            "text": "Now you are ready to move onto Step 3 to check if you have a  Compatible pump .", 
            "title": "Next Step: Compatible Pump"
        }, 
        {
            "location": "/build/step3/", 
            "text": "Step 3: Compatible Pump\n\u2301\n\n\n\n\nTime Estimate\n\n\n\n\nOmnipod users: 3 seconds to remember which PDM you've been using.\n\n\nMedtronic users: 10 minutes to put a battery in and look at model and firmware\n\n\nOther pump users: 5 days to email friends asking them to check closets for their old Medtronic pump or call your insurance to start prior authorization for Omnipod\n\n\n\n\n\n\n\n\nSummary\n\n\n\n\nIf you have a big clunky PDM with built-in BG meter...you can use your pods for Loop.\n\n\nIf you have a slim touch screen android-looking PDM...you can NOT use your pods for Loop.\n\n\nIf you have a Medtronic, check the list to ensure compatible model/firmware.    \n\n\n\n\n\n\n\n\nFAQs\n\n\n\n\n\"How can I find a compatible Medtronic pump?\"\n That question is answered in the Extra Details section below.\n\n\n\"What are the differences between Medtronic pump models?\"\n This question is also answered in the Extra Details section below.\n\n\n\"But what about the other types of pumps?\"\n Too bad, so sad...unless it is a DanaRS, DanaR, Accu-Chek Insight, Accu-Chek Combo. If you have one of those pumps, you could check out \nAndroidAPS looping system\n instead of Loop. If you have a Medtronic 512 or 712, you could check out \nOpenAPS\n as that system supports the 512 and 712 models in addition to the other Loop-compatible Medtronic pumps. Neither of those systems currently support Omnipod for looping.\n\n\n\"Can I change the firmware of my Medtronic pump?\"\n Do you work at Medtronic with insider access to the secret tools and firmware versions to do that? Might lose your job, but I'd bet you could do it then. We don't have access to that though.\n\n\n\n\n\n\nCheck pump version\n\u2301\n\n\nThis is a pretty simple step...check that you have a compatible pump to use Loop:\n\n\n\n\nMedtronic 515 or 715 (any firmware)\n\n\nMedtronic 522 or 722 (any firmware)\n\n\nMedtronic 523 or 723 (firmware 2.4 or older)\n\n\nMedtronic Worldwide Veo 554 or 754 (firmware 2.6A or lower)\n\n\nMedtronic Canadian/Australian Veo 554 or 754 (firmware 2.7A or lower)\n\n\nOmnipod \"Eros\" pods\n\n\n\n\nIf you have one of the pumps listed above, you are good to go on Loop! Congrats!\n\n\nExtra Details on Medtronic\n\u2301\n\n\n\n\nThere are a number of Medtronic insulin pumps manufactured between 2006 \u2013 2012 which are Loop compatible.  Compatibility has two requirements; (1) pump model and (2) firmware.\n\n\nMedtronic Pump Model\n\u2301\n\n\nTo determine your pump model, look at the backside of your pump.  There should be a sticker on the underside of the pump.  On the right-hand side of the sticker, it says REF MMT-XXXXXX\n\n\n\n\n\n\nMMT ---\n Pump Manufacturer Model (MiniMed Medtronic)\n\n722 ---\n Pump Model Number\n\nNA ---\n Pump Region (NA=North America, CA=Canada/Australia, WW=Worldwide)\n\nS ---\n Pump Color (S=Smoke, L=Clear/Lucite, B=Blue, P=Pink/Purple)\n\n\n\n\nSome pumps may have an \u201cL\u201d or \u201cS\u201d or \"R\" before the pump region, e.g. a model number like MMT-722LNAS.  This does not affect Loop compatibility.\n\n\nMedtronic Pump Firmware\n\u2301\n\n\nA pump\u2019s firmware is the internal software that runs your pump.  Older Medtronic firmware allows Loop to act as a \u201cremote control\u201d to set temp basals and report back pump data.  Newer firmware disabled that \u201cremote control\u201d access and therefore cannot be used with these DIY closed-loop systems.  There is currently no ability to downgrade a pump\u2019s firmware or replace it with older firmware.  Before you buy a used pump, make sure you are getting one with compatible firmware.\n\n\n\n\nThe firmware on all 515/715 and 522/722 model Medtronic pumps are all compatible with Loop. You will only need to check the firmware version for 523/723 and 554/754 model Medtronic pumps.\n\n+ Medtronic 515 or 715 --\n any firmware\n\n+ Medtronic 522 or 722  --\n any firmware\n\n+ Medtronic 523 or 723 --\n firmware 2.4 or older\n\n+ Medtronic Worldwide Veo 554 or 754 --\n firmware 2.6A or lower\n\n+ Medtronic Canadian/Australian Veo 554 or 754 --\n firmware 2.7A or lower\n\n\n\n\nTo find your pump\u2019s firmware you will need to power it on. If the pump has not been powered on for some time (i.e., has been in storage without a battery for a while), it will run through a start-up count and the firmware version will appear on the bottom right of the pump\u2019s screen.  Don\u2019t turn away, as the version number will only be displayed for a little while before the screen moves onto other information displays.  \n\n\nIf the pump has been active recently or has a reservoir installed, follow these steps:\n\n\n\n\n\n\nPress the \n button on your pump.  \n\n\n\n\n\n\nScroll down with the \n button to the bottom of the status display.  \n\n\n\n\n\n\nRead the bottom line of the display.\n\n\n\n\n\n\n\n\nMedtronic Pump Differences\n\u2301\n\n\nIf you are in the position of being able to shop around for different pump models, there are some slight differences between the Loop-compatible Medtronic pumps.\n\n\n500 vs 700\n:  The difference between the Medtronic 500 series and the 700 series pumps is the size of the insulin reservoirs.  The 500 series pumps use a 180 unit reservoir, and the 700 series pumps use a 300 unit reservoir (or smaller 180 unit reservoir, if you want).\n\n\nx15/x22 vs x23/x54\n:  The difference between the x15 and x22 pumps versus the x23 and x54 series pumps has only a few notable mentions:\n\n\n\n\nThe x23/x54 pumps will allow for smaller insulin deliveries in certain situations, if the smaller scroll rate is selected in the Bolus\nSetup\nScroll Rate menu.  \nLoop will have the insulin delivery automatically rounded by the pump to the units available in the pump model, and any smaller adjustments (to make up for the rounding) will be made through Loop\u2019s use of temp basals.  If you want the smaller increments of basal rates, you can still enter those values in Loop app's settings and Loop will use those values for the purposes of insulin delivery calculations.\n\n\n\n\n\n\n\n\n\n\nPump Model\n\n\nBasal increments\n\n\nBolus increments\n\n\nRange\n\n\n\n\n\n\n\n\n\n\n515/715\nand\n522/722\n\n\n0.05\n0.1\n\n\n0.1\n0.1\n\n\ndeliveries of less than 10 units\ngreater than 10 units\n\n\n\n\n\n\n523/723\nand\n554/754\n\n\n0.025\n0.05\n0.1\n\n\n0.025 \n0.05 \n0.1\n\n\nbetween 0.025 to 0.975 units\nbetween 1 to 9.95 units\ngreater than 10 units\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdditionally, because of the way Loop fetches information from the pump, the x23/x54 series of pumps are slightly better at conserving battery life through the use of the MySentry packets to collect information from the pump.  x22 pumps do not use MySentry.\n\n\n\n\n\n\nThe x23/x54 series pumps are also faster at delivering boluses greater than 10 units.  On an x23 pump, a 13-unit bolus takes 5:00 minutes to complete.  On an x22 pump, a 13-unit bolus takes 8:40 minutes to complete.\n\n\n\n\n\n\nFinding a Medtronic pump\n\u2301\n\n\nFinding a compatible Medtronic pump is probably the most difficult part for most new Loopers.  Our suggestion:\n\n\n\n\n\n\nTalk to friends in the diabetic community.\n\n\n\n\n\n\nAsk your endocrinologist.  \n\n\n\n\n\n\nAsk at a local JDRF chapter meeting if someone has an old backup pump they'd be willing to donate to you.  \n\n\n\n\n\n\nJoin diabetic supply groups on Facebook; both for-trade and for-sale groups.  \n\n\n\n\n\n\nCheck Craigslist often and be willing to expand your search area to include larger cities.\n\n\n\n\n\n\nCheck out the \nHelpAround, NextDoor, OfferUp, and/or LetGo\n apps for pumps.\n\n\n\n\n\n\nSearch \nMedwow\n for used Medtronic pumps.\n\n\n\n\n\n\nMedwow has been fairly frustrating for most people; poor response rate and high prices.  The most success appears to come from either one-on-one discussions with fellow diabetics/doctors or using apps (Craigslist, NextDoor, LetGo, HelpAround).  If you are using Craigslist, you may wish to use an app on your iPhone to make the searching easier.  There are apps to search multiple cities at once for your keywords and set up alerts.\n\n\n\n\nSafe Purchasing\n\u2301\n\n\nIf you choose to purchase from a remote or unknown seller, here are some tips for safe purchasing:\n\n\n\n\n\n\nUse PayPal and purchase using the \"Goods and Services\" payment option. This costs nothing for the buyer, but the seller will lose 2.95% of the sale to PayPal fees. PayPal offers some protection for both buyer and seller in the event of fraud.  \n\n\n\n\n\n\nAsk for photos of the pump. Check to make sure the serial number of the pump on the backside matches the serial number of the pump showing in the display menu. Ask for a short video of the pump, or at least a photo of the pump turned on, so that you can see the pump's firmware and model number. Cracks and some wear on these pumps are expected. These pumps are not usually free of marks. Many people are successfully looping on pumps that have cracks and rub marks, but you may want to ask if you are concerned about any you see in photos.\n\n\n\n\n\n\nBeware if the bottom of the reservoir/motor sleeve has the drive support cap pushed out, as shown \nhere\n. Those pumps will generally not work (or only work intermittently), however some people have successfully repaired those pumps as shown in that link. Just be aware that it should be checked in advance.\n\n\n\n\n\n\nRepairs to cracks or missing bits of plastic on battery cap area and reservoir caps are possible and not very difficult in most situations. You can read more about how to repair those \nhere\n.\n\n\n\n\n\n\nAsk for shipping that includes a tracking number. USPS Priority Mail's smallest box is a great option.  It's only $7.20 domestically in the US and includes tracking. Ask the seller to add a small bit of packing protection such as bubble wrap around the pump to keep it safe during shipping. Make sure you get a tracking number within a reasonable period of time after you have paid.  \n\n\n\n\n\n\nRed flags that may indicate a scam:\n\n\n\n\n\n\nAsking for payment through \"friends and family\" on PayPal, especially if you don't know the person or have any solid references for them. Paying in that way offers you no buyer protection. It's just like giving the seller cash, so you had better trust the seller.  \n\n\n\n\n\n\nOffering an \"almost new\" pump is a big red flag. These pumps should be at least 5-years-old by now. Do you really think a 5 year old pump should be unused and sitting in shrink wrap at this point? This seems highly suspicious. There are some out there, but they are very infrequent.  \n\n\n\n\n\n\nNot able to provide new pictures of the pump when requested. Sure they posted some pictures with the ad, but what if they just downloaded them from other people's ads? The seller should be able to furnish a couple of \"new\" photos at your request. A good one to ask for is the battery and reservoir tops so you can see the condition of those.\n\n\n\n\n\n\nPump Supplies\n\u2301\n\n\nMedtronic will not typically sell pump supplies directly to customers who have not previously purchased a registered Medtronic pump. Ask your insurance about purchasing pump supplies through a durable medical equipment (DME) provider. Typically, the DME provider will coordinate with your insurance and doctor's office to get the necessary insurance approval and prescriptions for the supplies. If you are brand new to Medtronic infusion sites, you may want to ask for help from friends to try a variety of infusion sets before purchasing a full 90-day supply of any type in particular.\n\n\nExtra Details on Omnipods\n\u2301\n\n\n\n\nReminder and Disclaimer\n\n\nThrough the work of the DIY community, Insulet's Omnipod (Eros) system is now Loop compatible. Using Eros pods with Loop is not supported by Insulet. Do not call Insulet asking for help with your Loop build, setup, or operation. This project is not FDA-approved and you are using this project under your own responsibility and risk. Please read the documents and familiarize yourself with Loop before using. \n\n\n\n\nEros\n\u2301\n\n\nLoop will work with these pods\n\n\nEros pods were launched in 2013 and continue to be sold by Insulet. As far as we know, there have been no plans or timelines announced for the discontinuation of Eros pods for existing customers. Insulet doesn't specifically call these \"Eros\" anymore, they just use the term \"omnipod system\". For clarity, from \nInsulet's webpage\n:\n\n\nEros system has that PDM we all recognize from the last several years.\n\n\n\n\n\n\n\n\n\n\n\nDASH\n\u2301\n\n\nLoop will not work with DASH pods\n\n\nInsulet has announced their DASH system as an eventual replacement for Eros/Omnipod System. There has already been a limited release of DASH to a select group of users, with a wider public rollout of DASH expected in 2019. The DASH system has the newer, slimmer locked-android PDM and built-in BLE communications in POD. Loop will not be compatible with the DASH system.\n\n\n\n\n\n\n\n\n\nNext Step: Compatible CGM\n\u2301\n\n\nNow you are ready to move onto Step 4 to check if you have a \nCompatible CGM\n.", 
            "title": "Step 3 Compatible Pump"
        }, 
        {
            "location": "/build/step3/#step-3-compatible-pump", 
            "text": "Time Estimate   Omnipod users: 3 seconds to remember which PDM you've been using.  Medtronic users: 10 minutes to put a battery in and look at model and firmware  Other pump users: 5 days to email friends asking them to check closets for their old Medtronic pump or call your insurance to start prior authorization for Omnipod     Summary   If you have a big clunky PDM with built-in BG meter...you can use your pods for Loop.  If you have a slim touch screen android-looking PDM...you can NOT use your pods for Loop.  If you have a Medtronic, check the list to ensure compatible model/firmware.         FAQs   \"How can I find a compatible Medtronic pump?\"  That question is answered in the Extra Details section below.  \"What are the differences between Medtronic pump models?\"  This question is also answered in the Extra Details section below.  \"But what about the other types of pumps?\"  Too bad, so sad...unless it is a DanaRS, DanaR, Accu-Chek Insight, Accu-Chek Combo. If you have one of those pumps, you could check out  AndroidAPS looping system  instead of Loop. If you have a Medtronic 512 or 712, you could check out  OpenAPS  as that system supports the 512 and 712 models in addition to the other Loop-compatible Medtronic pumps. Neither of those systems currently support Omnipod for looping.  \"Can I change the firmware of my Medtronic pump?\"  Do you work at Medtronic with insider access to the secret tools and firmware versions to do that? Might lose your job, but I'd bet you could do it then. We don't have access to that though.", 
            "title": "Step 3: Compatible Pump"
        }, 
        {
            "location": "/build/step3/#check-pump-version", 
            "text": "This is a pretty simple step...check that you have a compatible pump to use Loop:   Medtronic 515 or 715 (any firmware)  Medtronic 522 or 722 (any firmware)  Medtronic 523 or 723 (firmware 2.4 or older)  Medtronic Worldwide Veo 554 or 754 (firmware 2.6A or lower)  Medtronic Canadian/Australian Veo 554 or 754 (firmware 2.7A or lower)  Omnipod \"Eros\" pods   If you have one of the pumps listed above, you are good to go on Loop! Congrats!", 
            "title": "Check pump version"
        }, 
        {
            "location": "/build/step3/#extra-details-on-medtronic", 
            "text": "There are a number of Medtronic insulin pumps manufactured between 2006 \u2013 2012 which are Loop compatible.  Compatibility has two requirements; (1) pump model and (2) firmware.", 
            "title": "Extra Details on Medtronic"
        }, 
        {
            "location": "/build/step3/#medtronic-pump-model", 
            "text": "To determine your pump model, look at the backside of your pump.  There should be a sticker on the underside of the pump.  On the right-hand side of the sticker, it says REF MMT-XXXXXX    MMT ---  Pump Manufacturer Model (MiniMed Medtronic) \n722 ---  Pump Model Number \nNA ---  Pump Region (NA=North America, CA=Canada/Australia, WW=Worldwide) \nS ---  Pump Color (S=Smoke, L=Clear/Lucite, B=Blue, P=Pink/Purple)   Some pumps may have an \u201cL\u201d or \u201cS\u201d or \"R\" before the pump region, e.g. a model number like MMT-722LNAS.  This does not affect Loop compatibility.", 
            "title": "Medtronic Pump Model"
        }, 
        {
            "location": "/build/step3/#medtronic-pump-firmware", 
            "text": "A pump\u2019s firmware is the internal software that runs your pump.  Older Medtronic firmware allows Loop to act as a \u201cremote control\u201d to set temp basals and report back pump data.  Newer firmware disabled that \u201cremote control\u201d access and therefore cannot be used with these DIY closed-loop systems.  There is currently no ability to downgrade a pump\u2019s firmware or replace it with older firmware.  Before you buy a used pump, make sure you are getting one with compatible firmware.   The firmware on all 515/715 and 522/722 model Medtronic pumps are all compatible with Loop. You will only need to check the firmware version for 523/723 and 554/754 model Medtronic pumps. \n+ Medtronic 515 or 715 --  any firmware \n+ Medtronic 522 or 722  --  any firmware \n+ Medtronic 523 or 723 --  firmware 2.4 or older \n+ Medtronic Worldwide Veo 554 or 754 --  firmware 2.6A or lower \n+ Medtronic Canadian/Australian Veo 554 or 754 --  firmware 2.7A or lower   To find your pump\u2019s firmware you will need to power it on. If the pump has not been powered on for some time (i.e., has been in storage without a battery for a while), it will run through a start-up count and the firmware version will appear on the bottom right of the pump\u2019s screen.  Don\u2019t turn away, as the version number will only be displayed for a little while before the screen moves onto other information displays.    If the pump has been active recently or has a reservoir installed, follow these steps:    Press the   button on your pump.      Scroll down with the   button to the bottom of the status display.      Read the bottom line of the display.", 
            "title": "Medtronic Pump Firmware"
        }, 
        {
            "location": "/build/step3/#medtronic-pump-differences", 
            "text": "If you are in the position of being able to shop around for different pump models, there are some slight differences between the Loop-compatible Medtronic pumps.  500 vs 700 :  The difference between the Medtronic 500 series and the 700 series pumps is the size of the insulin reservoirs.  The 500 series pumps use a 180 unit reservoir, and the 700 series pumps use a 300 unit reservoir (or smaller 180 unit reservoir, if you want).  x15/x22 vs x23/x54 :  The difference between the x15 and x22 pumps versus the x23 and x54 series pumps has only a few notable mentions:   The x23/x54 pumps will allow for smaller insulin deliveries in certain situations, if the smaller scroll rate is selected in the Bolus Setup Scroll Rate menu.   Loop will have the insulin delivery automatically rounded by the pump to the units available in the pump model, and any smaller adjustments (to make up for the rounding) will be made through Loop\u2019s use of temp basals.  If you want the smaller increments of basal rates, you can still enter those values in Loop app's settings and Loop will use those values for the purposes of insulin delivery calculations.      Pump Model  Basal increments  Bolus increments  Range      515/715 and 522/722  0.05 0.1  0.1 0.1  deliveries of less than 10 units greater than 10 units    523/723 and 554/754  0.025 0.05 0.1  0.025  0.05  0.1  between 0.025 to 0.975 units between 1 to 9.95 units greater than 10 units       Additionally, because of the way Loop fetches information from the pump, the x23/x54 series of pumps are slightly better at conserving battery life through the use of the MySentry packets to collect information from the pump.  x22 pumps do not use MySentry.    The x23/x54 series pumps are also faster at delivering boluses greater than 10 units.  On an x23 pump, a 13-unit bolus takes 5:00 minutes to complete.  On an x22 pump, a 13-unit bolus takes 8:40 minutes to complete.", 
            "title": "Medtronic Pump Differences"
        }, 
        {
            "location": "/build/step3/#finding-a-medtronic-pump", 
            "text": "Finding a compatible Medtronic pump is probably the most difficult part for most new Loopers.  Our suggestion:    Talk to friends in the diabetic community.    Ask your endocrinologist.      Ask at a local JDRF chapter meeting if someone has an old backup pump they'd be willing to donate to you.      Join diabetic supply groups on Facebook; both for-trade and for-sale groups.      Check Craigslist often and be willing to expand your search area to include larger cities.    Check out the  HelpAround, NextDoor, OfferUp, and/or LetGo  apps for pumps.    Search  Medwow  for used Medtronic pumps.    Medwow has been fairly frustrating for most people; poor response rate and high prices.  The most success appears to come from either one-on-one discussions with fellow diabetics/doctors or using apps (Craigslist, NextDoor, LetGo, HelpAround).  If you are using Craigslist, you may wish to use an app on your iPhone to make the searching easier.  There are apps to search multiple cities at once for your keywords and set up alerts.", 
            "title": "Finding a Medtronic pump"
        }, 
        {
            "location": "/build/step3/#safe-purchasing", 
            "text": "If you choose to purchase from a remote or unknown seller, here are some tips for safe purchasing:    Use PayPal and purchase using the \"Goods and Services\" payment option. This costs nothing for the buyer, but the seller will lose 2.95% of the sale to PayPal fees. PayPal offers some protection for both buyer and seller in the event of fraud.      Ask for photos of the pump. Check to make sure the serial number of the pump on the backside matches the serial number of the pump showing in the display menu. Ask for a short video of the pump, or at least a photo of the pump turned on, so that you can see the pump's firmware and model number. Cracks and some wear on these pumps are expected. These pumps are not usually free of marks. Many people are successfully looping on pumps that have cracks and rub marks, but you may want to ask if you are concerned about any you see in photos.    Beware if the bottom of the reservoir/motor sleeve has the drive support cap pushed out, as shown  here . Those pumps will generally not work (or only work intermittently), however some people have successfully repaired those pumps as shown in that link. Just be aware that it should be checked in advance.    Repairs to cracks or missing bits of plastic on battery cap area and reservoir caps are possible and not very difficult in most situations. You can read more about how to repair those  here .    Ask for shipping that includes a tracking number. USPS Priority Mail's smallest box is a great option.  It's only $7.20 domestically in the US and includes tracking. Ask the seller to add a small bit of packing protection such as bubble wrap around the pump to keep it safe during shipping. Make sure you get a tracking number within a reasonable period of time after you have paid.      Red flags that may indicate a scam:    Asking for payment through \"friends and family\" on PayPal, especially if you don't know the person or have any solid references for them. Paying in that way offers you no buyer protection. It's just like giving the seller cash, so you had better trust the seller.      Offering an \"almost new\" pump is a big red flag. These pumps should be at least 5-years-old by now. Do you really think a 5 year old pump should be unused and sitting in shrink wrap at this point? This seems highly suspicious. There are some out there, but they are very infrequent.      Not able to provide new pictures of the pump when requested. Sure they posted some pictures with the ad, but what if they just downloaded them from other people's ads? The seller should be able to furnish a couple of \"new\" photos at your request. A good one to ask for is the battery and reservoir tops so you can see the condition of those.", 
            "title": "Safe Purchasing"
        }, 
        {
            "location": "/build/step3/#pump-supplies", 
            "text": "Medtronic will not typically sell pump supplies directly to customers who have not previously purchased a registered Medtronic pump. Ask your insurance about purchasing pump supplies through a durable medical equipment (DME) provider. Typically, the DME provider will coordinate with your insurance and doctor's office to get the necessary insurance approval and prescriptions for the supplies. If you are brand new to Medtronic infusion sites, you may want to ask for help from friends to try a variety of infusion sets before purchasing a full 90-day supply of any type in particular.", 
            "title": "Pump Supplies"
        }, 
        {
            "location": "/build/step3/#extra-details-on-omnipods", 
            "text": "Reminder and Disclaimer  Through the work of the DIY community, Insulet's Omnipod (Eros) system is now Loop compatible. Using Eros pods with Loop is not supported by Insulet. Do not call Insulet asking for help with your Loop build, setup, or operation. This project is not FDA-approved and you are using this project under your own responsibility and risk. Please read the documents and familiarize yourself with Loop before using.", 
            "title": "Extra Details on Omnipods"
        }, 
        {
            "location": "/build/step3/#eros", 
            "text": "Loop will work with these pods  Eros pods were launched in 2013 and continue to be sold by Insulet. As far as we know, there have been no plans or timelines announced for the discontinuation of Eros pods for existing customers. Insulet doesn't specifically call these \"Eros\" anymore, they just use the term \"omnipod system\". For clarity, from  Insulet's webpage :  Eros system has that PDM we all recognize from the last several years.", 
            "title": "Eros"
        }, 
        {
            "location": "/build/step3/#dash", 
            "text": "Loop will not work with DASH pods  Insulet has announced their DASH system as an eventual replacement for Eros/Omnipod System. There has already been a limited release of DASH to a select group of users, with a wider public rollout of DASH expected in 2019. The DASH system has the newer, slimmer locked-android PDM and built-in BLE communications in POD. Loop will not be compatible with the DASH system.", 
            "title": "DASH"
        }, 
        {
            "location": "/build/step3/#next-step-compatible-cgm", 
            "text": "Now you are ready to move onto Step 4 to check if you have a  Compatible CGM .", 
            "title": "Next Step: Compatible CGM"
        }, 
        {
            "location": "/build/step4/", 
            "text": "Step 4: Compatible CGM\n\u2301\n\n\n\n\nTime Estimate\n\n\n\n\n10 minutes to read through this page\n\n\n\n\n\n\n\n\nSummary\n\n\n\n\nIf you use a Dexcom G4 Share, G5, or G6 CGM system...you are good to use Loop.\n\n\nIf you use a Medtronic sensor compatible with a Loop-compatble Medtronic pump...you are good to use Loop.\n\n\nIf you have an Eversense...you cannot use Loop with that CGM.\n\n\nIf you use Libre...you will need to seek out a modified Loop\n\n\n\n\n\n\n\n\nFAQs\n\n\n\n\n\"What about Libre sensors?\"\n Libre sensors are not designed to be continuous glucose monitors. All use of Libre sensors as continuous glucose monitors involves the use of third-party applications (Xdrip or Spike) and reader devices (BluCon or Miao Miao). Loop developers have not seen data demonstrating sufficient safeguards from those readers and applications to feel comfortable adding main line Loop integration for those devices. If you use a Libre sensor, you'll have to use a \"not-main line\" branch of Loop that someone (or yourself) has modified to allow for use with those sensors/applications.\n\n\n\"What about Eversense?\"\n Eversense's application does not integrate with Apple Health, nor has the communications protocols for Eversense been reverse engineered. Therefore, Eversense is not compatible with Loop use currently.\n\n\n\n\n\n\nA continuous glucose monitor (CGM) provides Loop with current blood glucose readings. These readings allow Loop to predict what the current glucose trend is, and predict future blood glucose based on carbohydrate input and your Loop settings. The following are the types of CGMs compatible with Loop. CGM readings are a required part of looping. If your Loop is unable to retrieve BG data, it will not be able to loop.\n\n\nDexcom G5 and G6 CGM \n\u2301\n\n\nDexcom G5 and G6 receives CGM data directly to the Dexcom app on your iPhone via Bluetooth. Neither of these two systems require the use of a stand-alone receiver. For Loop to function, you will need the Dexcom app running.\n\n\nDexcom G4 CGM with Share Receiver \n\u2301\n\n\nDexcom G4 Share system transmits CGM data from the transmitter to a Dexcom G4 Share Receiver. The receiver, in turn, connects to the Dexcom Share2 app on your iPhone via Bluetooth. The Share2 app uploads CGM data to the Dexcom servers. For Loop to function, you will need the Dexcom app running.\n\n\nMedtronic CGM \n\u2301\n\n\nThe Minimed Enlite CGM, available with the Medtronic 522/722, 523/723, and 554/754, wirelessly sends blood glucose readings to the pump. Loop can read the Medtronic CGM data directly from the pump using the RileyLink.\n\n\nOffline Use\n\u2301\n\n\nOffline use means using Loop when there is no cell data or internet available. Loop does not require any special setup to operate offline. You will not need to do anything special if you go camping or find yourself out in the wilderness. For offline Loop use, the iPhone's Bluetooth still needs to be active; and for Dexcom system's, the Share2, G5, or G6 app also still needs to be open (but don't have to be actively \"sharing\" to the internet). If you put your iPhone into Airplane mode, remember to turn Bluetooth back on to keep your Loop running. If your offline use is failing, chances are you have forgotten to update your transmitter ID in Loop settings when you changed transmitters.\n\n\nDexcom Servers\n\u2301\n\n\nIn some rare instances, the Loop may fail to eavesdrop on the Bluetooth transmissions of the CGM systems.  When that happens, the Loop can pull directly from Dexcom Servers to get the data (assuming you have entered your Share account information in the Loop settings and have Share turned on). When Loop is operating in this mode, you will see a small cloud in the CGM reading in the Loop app. Operating in this mode requires a working internet or cell connection.\n\n\nCGMs not natively supported in Loop\n\u2301\n\n\nLibre (with BluCon or Miao Miao), Eversense, Medtronic Guardian sensors, etc.  Yes, there are other CGM systems available out there. Loop does not natively support those CGMs.  If you would like to use one of those alternate CGMs and Loop...you will need to look into third-party integrations to allow Loop to access the blood glucose data.  These docs do not cover the alternate methods of unsupported CGM systems or apps like Spike.\n\n\nNext Step: Order a RileyLink\n\u2301\n\n\nNow you are ready to move onto Step 5 to \nOrder a RileyLink\n.", 
            "title": "Step 4 Compatible CGM"
        }, 
        {
            "location": "/build/step4/#step-4-compatible-cgm", 
            "text": "Time Estimate   10 minutes to read through this page     Summary   If you use a Dexcom G4 Share, G5, or G6 CGM system...you are good to use Loop.  If you use a Medtronic sensor compatible with a Loop-compatble Medtronic pump...you are good to use Loop.  If you have an Eversense...you cannot use Loop with that CGM.  If you use Libre...you will need to seek out a modified Loop     FAQs   \"What about Libre sensors?\"  Libre sensors are not designed to be continuous glucose monitors. All use of Libre sensors as continuous glucose monitors involves the use of third-party applications (Xdrip or Spike) and reader devices (BluCon or Miao Miao). Loop developers have not seen data demonstrating sufficient safeguards from those readers and applications to feel comfortable adding main line Loop integration for those devices. If you use a Libre sensor, you'll have to use a \"not-main line\" branch of Loop that someone (or yourself) has modified to allow for use with those sensors/applications.  \"What about Eversense?\"  Eversense's application does not integrate with Apple Health, nor has the communications protocols for Eversense been reverse engineered. Therefore, Eversense is not compatible with Loop use currently.    A continuous glucose monitor (CGM) provides Loop with current blood glucose readings. These readings allow Loop to predict what the current glucose trend is, and predict future blood glucose based on carbohydrate input and your Loop settings. The following are the types of CGMs compatible with Loop. CGM readings are a required part of looping. If your Loop is unable to retrieve BG data, it will not be able to loop.", 
            "title": "Step 4: Compatible CGM"
        }, 
        {
            "location": "/build/step4/#dexcom-g5-and-g6-cgm", 
            "text": "Dexcom G5 and G6 receives CGM data directly to the Dexcom app on your iPhone via Bluetooth. Neither of these two systems require the use of a stand-alone receiver. For Loop to function, you will need the Dexcom app running.", 
            "title": "Dexcom G5 and G6 CGM "
        }, 
        {
            "location": "/build/step4/#dexcom-g4-cgm-with-share-receiver", 
            "text": "Dexcom G4 Share system transmits CGM data from the transmitter to a Dexcom G4 Share Receiver. The receiver, in turn, connects to the Dexcom Share2 app on your iPhone via Bluetooth. The Share2 app uploads CGM data to the Dexcom servers. For Loop to function, you will need the Dexcom app running.", 
            "title": "Dexcom G4 CGM with Share Receiver "
        }, 
        {
            "location": "/build/step4/#medtronic-cgm", 
            "text": "The Minimed Enlite CGM, available with the Medtronic 522/722, 523/723, and 554/754, wirelessly sends blood glucose readings to the pump. Loop can read the Medtronic CGM data directly from the pump using the RileyLink.", 
            "title": "Medtronic CGM "
        }, 
        {
            "location": "/build/step4/#offline-use", 
            "text": "Offline use means using Loop when there is no cell data or internet available. Loop does not require any special setup to operate offline. You will not need to do anything special if you go camping or find yourself out in the wilderness. For offline Loop use, the iPhone's Bluetooth still needs to be active; and for Dexcom system's, the Share2, G5, or G6 app also still needs to be open (but don't have to be actively \"sharing\" to the internet). If you put your iPhone into Airplane mode, remember to turn Bluetooth back on to keep your Loop running. If your offline use is failing, chances are you have forgotten to update your transmitter ID in Loop settings when you changed transmitters.", 
            "title": "Offline Use"
        }, 
        {
            "location": "/build/step4/#dexcom-servers", 
            "text": "In some rare instances, the Loop may fail to eavesdrop on the Bluetooth transmissions of the CGM systems.  When that happens, the Loop can pull directly from Dexcom Servers to get the data (assuming you have entered your Share account information in the Loop settings and have Share turned on). When Loop is operating in this mode, you will see a small cloud in the CGM reading in the Loop app. Operating in this mode requires a working internet or cell connection.", 
            "title": "Dexcom Servers"
        }, 
        {
            "location": "/build/step4/#cgms-not-natively-supported-in-loop", 
            "text": "Libre (with BluCon or Miao Miao), Eversense, Medtronic Guardian sensors, etc.  Yes, there are other CGM systems available out there. Loop does not natively support those CGMs.  If you would like to use one of those alternate CGMs and Loop...you will need to look into third-party integrations to allow Loop to access the blood glucose data.  These docs do not cover the alternate methods of unsupported CGM systems or apps like Spike.", 
            "title": "CGMs not natively supported in Loop"
        }, 
        {
            "location": "/build/step4/#next-step-order-a-rileylink", 
            "text": "Now you are ready to move onto Step 5 to  Order a RileyLink .", 
            "title": "Next Step: Order a RileyLink"
        }, 
        {
            "location": "/build/step5/", 
            "text": "Step 5: Order a RileyLink\n\u2301\n\n\n\n\nTime Estimate\n\n\n\n\n15 minutes to order a RileyLink\n\n\n15-20 minutes to assemble the RileyLink once you get it in the mail\n\n\n15-20 minutes to read about the RileyLink\n\n\n\n\n\n\n\n\nSummary\n\n\n\n\nOrder your \nOmnipod RileyLink\n or \nMedtronic RileyLink\n.\n\n\nAssemble the RileyLink, after hugging the postman\n\n\nRead the \"extra details\" to learn about RileyLink lights, charging, range, etc.\n\n\n\n\n\n\n\n\nFAQs\n\n\n\n\n\"Do I need a RileyLink?\"\n Yes. Loop will not work without a RileyLink. Omnipod users will not be able to bolus from their looping pod without a RileyLink.\n\n\n\"What happens if I lose my RileyLink or walk away from it?\"\n Good question...answered \nhere\n.\n\n\n\"Can I use an Omnipod RileyLink with a Medtronic pump? or vice versa?\"\n Good question...answered \nhere\n.\n\n\n\"Can I swap out RileyLinks at any time?\"\n Yes, you can. RileyLinks can be replaced quite simply without needing to start a new pod or rebuild Loop app. There's a place in Loop settings that you'd simply find your new RileyLink's name and turn \"on\" the Bluetooth connection to start using it.\n\n\n\"How close does the RileyLink need to be to me? Do I have to carry it with me?\"\n Good questions...answered \nhere\n.\n\n\n\"Why is it named RileyLink?\"\n Riley is the name of Pete Schwamb's daughter and he's the guy that created the RileyLink.\n\n\n\"Can I make my own RileyLink?\"\n Technically yes, however it is not an easy project. You'll need specialized tools and patience. If you want to explore doing that, I'd highly recommend checking out \nZulipchat\n from the other people who have done their own builds successfully over the last several years. Only 3 people have built their own RileyLinks so far...but I guess that technically means it is possible. The PCB files and software, with instructions on how to build your own hardware module can be found at the \nRileyLink Github repo\n.\n\n\n\n\n\n\nWhat is RileyLink\n\u2301\n\n\nThe RileyLink (RL) is an open-source hardware device that can bridge Bluetooth Low Energy (BLE) to 916MHz or 433MHz wireless communication. What does that mean to you? It means RileyLink is the communication highway between your insulin pump, CGM, and iPhone.\n\n\nLoop will not work without the RileyLink.\n\n\n\n\n\n\n\n\n\n\n\n\nOrder RileyLink\n\u2301\n\n\nThis is an easy step. You need to order a RileyLink from the \nGetRiley website\n. \n\n\nThere are two types of RileyLinks; \none for Omnipod\n users and \none for Medtronic\n users. Order the RileyLink specifically for the pump you'll be Looping with. \n\n\nAssemble RileyLink\n\u2301\n\n\nYour RL will come with the battery disconnected and the parts not already inside the case. It will be up to you to put the RL in the case and attach the battery.\n\n\nMake sure the lipo battery is well-plugged into the connection. Line up the little ridge appropriately, and push fairly firmly to get the connection tight.  Poor battery cable connection can make the Loop communications fail.  See photos below, for example.\n\n\n\n\nCommon new user errors\n\n\nThe most common two errors for new RL owners are (1) not fully pushing in the lipo battery cable connection and (2) failing to charge the RL. Compare your lipo battery cable with the photos; it takes a bit of oomph to push that plug fully in like the photos shown below. Remember to charge your RL each night.\n\n\n\n\n\n\n\n\nLoose battery cable on left, Proper battery cable on right\n\n\n\n\n\nFinally, the board and the battery fit into the slim case fairly tightly as well.  Click on the image below to watch a helpful \nassembly video\n.\n\n\n\n\nExtra Details about RileyLink\n\u2301\n\n\nRadio communications\n\u2301\n\n\nThe RL communicates with the pump through radio frequency communications.  Numerous factors can influence how well those communications can function...interferences from other devices, temperature, physical blocking, etc.\n\n\nWhen your RL and pump are first paired, Loop performs a series of tests that you won't see...they are tuning tests. Basically, RL sends little test messages to the pump and waits for a response. The RL tries this same \"ping\" to the pump a range of various radio frequencies. The range of radio frequencies it tries is based on the pump you've told RL to expect (Omnipod, Medtronic NA/CA, or Medtronic WW).  RL will then record the radio frequencies that provided the strongest response and use that frequency for future pump communications.\n\n\nUsually this best frequency is pretty constant for any given pump+RL, but during temperature changes it may be that the best frequency is not the one currently set. In the event that RL has problems communicating with the pump, Loop has code built-in that will automatically tell the RL \"Hey, try that tuning pump thing again...maybe there's a better frequency we need to try.\" This retuning is started automatically if pump communications fail for 14 minutes (in other words, two looping cycles).\n\n\nBluetooth communications\n\u2301\n\n\nRL communicates with your iPhone and Loop app through Bluetooth (BT).  If your iPhone has BT issues, your Loop will have failures.  There have been reports of BT audio devices (such as BT pairings in your car or home audio BT speakers) interfering with the Loop.  If you are finding Loop failures frequently happening at a particular location, you may try to troubleshoot if there are BT problems in the area.\n\n\nYour BT signal strength can be seen in the Loop settings, under the RL menu, on the \nSignal Strength\n line. As you move closer and further away from your phone, you can watch that number dynamically change. This line is \nnot\n displaying the signal strength of your pump communications discussed above.\n\n\n\n\n\n\n\n\n\nLights\n\u2301\n\n\nRL has several lights that you may notice from time to time. There is no 'power' light. If you suspect that your RL is not being powered, try turning it off and on using the small sliding switch. You should see lights in the middle of the board flash when you do this.  If they flash, that means the board has power.\n\n\n\n\n\n\nRed light: Charging light. The red light will remain on while RL is charging, and it will turn off when charging is complete. You may notice the red light turn on periodically even after charging is complete...it's just \"topping off\".\n\n\n\n\n\n\nGreen light: Bluetooth connection light. The green light will remain on while you have a BT connection with your iPhone.  If that green light fails to stay on, you should troubleshoot your BT connections. Try restarting BT on your iPhone and/or turning the RL off/on by its power switch.\n\n\n\n\n\n\nBlue light: Pump communications.  If you have an older firmware on your RL, some of the blue lights will flash periodically as it communicates with the pump. It's just letting you know that it is busy talking and collecting info. You will also see increased blue flashes if you have \"Enabled Diagnostic LEDs\" for MDT users that have the RLs with updated firmware (shipping since late August 2018).\n\n\n\n\n\n\nA solid blue light that consistently remains lit on the board could mean one of two things:\n\n\n\n\n\n\nA temporary issue that can be resolved by rebooting the RL physically (turning the switch off/on), or\n\n\n\n\n\n\nAn electrical short or damage to the board.  Sweat and moisture are most likely culprits, so try to keep case free from those environments. Don't keep RL in sports bras or waistband next to skin, for example, while exercising.\n\n\n\n\n\n\nIf your blue light remains on despite trying a restart, it is time to pull out your backup RL.\n\n\nCharging\n\u2301\n\n\nThe battery that comes with RL is not likely charged completely when it is shipped, so feel free to charge it up.  You'll need a \nmini-USB cable\n and \n0.5A USB charging power supply\n like your iPhone power supply.  RL takes about 2 hours to fully charge (the red light will turn off when fully charged, read note above about red light patterns) and should easily last at least a full day of constant Loop use.  Typically, it can go into the 30-hour range without any problems.  Most people charge their RL each night when they are sleeping.  You don't have to worry about leaving the RL plugged in \"too long\" for charging.  It will automatically stop charging the battery when it is fully charged.\n\n\nSince the best practice is to charge your RL overnight while you sleep, and the battery lasts safely over 24 hours, there is no battery level indicator for the RL.  The RL's charge level is not viewable on Nightscout, nor within the Loop app.  If you forget to charge your RL overnight, you can recharge it with a portable USB battery in a pinch.  A \nshort mini-USB cable\n could be a good addition to a small gear bag.\n\n\nRange\n\u2301\n\n\nThe range that your RL will function is \nheavily\n dependent on the environment that you are in. Most people wear the RL in a pocket or carry a belt holster during the day. The radio frequency communications will have a shorter range than the BT communications, therefore RL will do better closer to the pump rather than the iPhone if you are deciding on options for carrying gear. \n\n\nProblematic environments will be places like technical conferences, sports arenas, and other places where wireless communications are heavy and plenty.\n\n\nLipo Battery\n\u2301\n\n\nKeep your RL and lipo battery protected from damage.  Lipo batteries are unsafe when damaged or punctured, so the case is an important part of safe Looping. If your battery is damaged in some way, please disconnect it immediately, and dispose of it (they should be recycled). You can order new batteries on the \nGetRileyLink website\n\n\nRemoving Lipo Battery\n\u2301\n\n\nTo remove the lipo battery from the RL, please do so slowly and patiently. Work the battery connection side to side slowly to loosen it from the plug. Some people have reported success using small, curved needle-nose pliers such as hemostats. Others have used small flathead screwdrivers as shown in \nthis video\n.\n\n\n\n\nWaiting for RileyLink\n\u2301\n\n\nYes, waiting for RL to arrive is extremely difficult if they are backorder.  PLEASE be patient, since Loop CANNOT work without RL.\n\n\nIf you're really dying to do something while RL ships, you can proceed with finishing these build directions all the way through Step 14...but after that you'll have to wait for the RileyLink.  You can't properly enter any settings or pump info in Loop app without the RileyLink.\n\n\nNext Step: Enroll in Apple Developer Program\n\u2301\n\n\nNow you are ready to move onto Step 6 to \nenroll in the Apple Developer Program\n.", 
            "title": "Step 5 Order a RileyLink"
        }, 
        {
            "location": "/build/step5/#step-5-order-a-rileylink", 
            "text": "Time Estimate   15 minutes to order a RileyLink  15-20 minutes to assemble the RileyLink once you get it in the mail  15-20 minutes to read about the RileyLink     Summary   Order your  Omnipod RileyLink  or  Medtronic RileyLink .  Assemble the RileyLink, after hugging the postman  Read the \"extra details\" to learn about RileyLink lights, charging, range, etc.     FAQs   \"Do I need a RileyLink?\"  Yes. Loop will not work without a RileyLink. Omnipod users will not be able to bolus from their looping pod without a RileyLink.  \"What happens if I lose my RileyLink or walk away from it?\"  Good question...answered  here .  \"Can I use an Omnipod RileyLink with a Medtronic pump? or vice versa?\"  Good question...answered  here .  \"Can I swap out RileyLinks at any time?\"  Yes, you can. RileyLinks can be replaced quite simply without needing to start a new pod or rebuild Loop app. There's a place in Loop settings that you'd simply find your new RileyLink's name and turn \"on\" the Bluetooth connection to start using it.  \"How close does the RileyLink need to be to me? Do I have to carry it with me?\"  Good questions...answered  here .  \"Why is it named RileyLink?\"  Riley is the name of Pete Schwamb's daughter and he's the guy that created the RileyLink.  \"Can I make my own RileyLink?\"  Technically yes, however it is not an easy project. You'll need specialized tools and patience. If you want to explore doing that, I'd highly recommend checking out  Zulipchat  from the other people who have done their own builds successfully over the last several years. Only 3 people have built their own RileyLinks so far...but I guess that technically means it is possible. The PCB files and software, with instructions on how to build your own hardware module can be found at the  RileyLink Github repo .", 
            "title": "Step 5: Order a RileyLink"
        }, 
        {
            "location": "/build/step5/#what-is-rileylink", 
            "text": "The RileyLink (RL) is an open-source hardware device that can bridge Bluetooth Low Energy (BLE) to 916MHz or 433MHz wireless communication. What does that mean to you? It means RileyLink is the communication highway between your insulin pump, CGM, and iPhone.  Loop will not work without the RileyLink.", 
            "title": "What is RileyLink"
        }, 
        {
            "location": "/build/step5/#order-rileylink", 
            "text": "This is an easy step. You need to order a RileyLink from the  GetRiley website .   There are two types of RileyLinks;  one for Omnipod  users and  one for Medtronic  users. Order the RileyLink specifically for the pump you'll be Looping with.", 
            "title": "Order RileyLink"
        }, 
        {
            "location": "/build/step5/#assemble-rileylink", 
            "text": "Your RL will come with the battery disconnected and the parts not already inside the case. It will be up to you to put the RL in the case and attach the battery.  Make sure the lipo battery is well-plugged into the connection. Line up the little ridge appropriately, and push fairly firmly to get the connection tight.  Poor battery cable connection can make the Loop communications fail.  See photos below, for example.   Common new user errors  The most common two errors for new RL owners are (1) not fully pushing in the lipo battery cable connection and (2) failing to charge the RL. Compare your lipo battery cable with the photos; it takes a bit of oomph to push that plug fully in like the photos shown below. Remember to charge your RL each night.     Loose battery cable on left, Proper battery cable on right   Finally, the board and the battery fit into the slim case fairly tightly as well.  Click on the image below to watch a helpful  assembly video .", 
            "title": "Assemble RileyLink"
        }, 
        {
            "location": "/build/step5/#extra-details-about-rileylink", 
            "text": "", 
            "title": "Extra Details about RileyLink"
        }, 
        {
            "location": "/build/step5/#radio-communications", 
            "text": "The RL communicates with the pump through radio frequency communications.  Numerous factors can influence how well those communications can function...interferences from other devices, temperature, physical blocking, etc.  When your RL and pump are first paired, Loop performs a series of tests that you won't see...they are tuning tests. Basically, RL sends little test messages to the pump and waits for a response. The RL tries this same \"ping\" to the pump a range of various radio frequencies. The range of radio frequencies it tries is based on the pump you've told RL to expect (Omnipod, Medtronic NA/CA, or Medtronic WW).  RL will then record the radio frequencies that provided the strongest response and use that frequency for future pump communications.  Usually this best frequency is pretty constant for any given pump+RL, but during temperature changes it may be that the best frequency is not the one currently set. In the event that RL has problems communicating with the pump, Loop has code built-in that will automatically tell the RL \"Hey, try that tuning pump thing again...maybe there's a better frequency we need to try.\" This retuning is started automatically if pump communications fail for 14 minutes (in other words, two looping cycles).", 
            "title": "Radio communications"
        }, 
        {
            "location": "/build/step5/#bluetooth-communications", 
            "text": "RL communicates with your iPhone and Loop app through Bluetooth (BT).  If your iPhone has BT issues, your Loop will have failures.  There have been reports of BT audio devices (such as BT pairings in your car or home audio BT speakers) interfering with the Loop.  If you are finding Loop failures frequently happening at a particular location, you may try to troubleshoot if there are BT problems in the area.  Your BT signal strength can be seen in the Loop settings, under the RL menu, on the  Signal Strength  line. As you move closer and further away from your phone, you can watch that number dynamically change. This line is  not  displaying the signal strength of your pump communications discussed above.", 
            "title": "Bluetooth communications"
        }, 
        {
            "location": "/build/step5/#lights", 
            "text": "RL has several lights that you may notice from time to time. There is no 'power' light. If you suspect that your RL is not being powered, try turning it off and on using the small sliding switch. You should see lights in the middle of the board flash when you do this.  If they flash, that means the board has power.    Red light: Charging light. The red light will remain on while RL is charging, and it will turn off when charging is complete. You may notice the red light turn on periodically even after charging is complete...it's just \"topping off\".    Green light: Bluetooth connection light. The green light will remain on while you have a BT connection with your iPhone.  If that green light fails to stay on, you should troubleshoot your BT connections. Try restarting BT on your iPhone and/or turning the RL off/on by its power switch.    Blue light: Pump communications.  If you have an older firmware on your RL, some of the blue lights will flash periodically as it communicates with the pump. It's just letting you know that it is busy talking and collecting info. You will also see increased blue flashes if you have \"Enabled Diagnostic LEDs\" for MDT users that have the RLs with updated firmware (shipping since late August 2018).    A solid blue light that consistently remains lit on the board could mean one of two things:    A temporary issue that can be resolved by rebooting the RL physically (turning the switch off/on), or    An electrical short or damage to the board.  Sweat and moisture are most likely culprits, so try to keep case free from those environments. Don't keep RL in sports bras or waistband next to skin, for example, while exercising.    If your blue light remains on despite trying a restart, it is time to pull out your backup RL.", 
            "title": "Lights"
        }, 
        {
            "location": "/build/step5/#charging", 
            "text": "The battery that comes with RL is not likely charged completely when it is shipped, so feel free to charge it up.  You'll need a  mini-USB cable  and  0.5A USB charging power supply  like your iPhone power supply.  RL takes about 2 hours to fully charge (the red light will turn off when fully charged, read note above about red light patterns) and should easily last at least a full day of constant Loop use.  Typically, it can go into the 30-hour range without any problems.  Most people charge their RL each night when they are sleeping.  You don't have to worry about leaving the RL plugged in \"too long\" for charging.  It will automatically stop charging the battery when it is fully charged.  Since the best practice is to charge your RL overnight while you sleep, and the battery lasts safely over 24 hours, there is no battery level indicator for the RL.  The RL's charge level is not viewable on Nightscout, nor within the Loop app.  If you forget to charge your RL overnight, you can recharge it with a portable USB battery in a pinch.  A  short mini-USB cable  could be a good addition to a small gear bag.", 
            "title": "Charging"
        }, 
        {
            "location": "/build/step5/#range", 
            "text": "The range that your RL will function is  heavily  dependent on the environment that you are in. Most people wear the RL in a pocket or carry a belt holster during the day. The radio frequency communications will have a shorter range than the BT communications, therefore RL will do better closer to the pump rather than the iPhone if you are deciding on options for carrying gear.   Problematic environments will be places like technical conferences, sports arenas, and other places where wireless communications are heavy and plenty.", 
            "title": "Range"
        }, 
        {
            "location": "/build/step5/#lipo-battery", 
            "text": "Keep your RL and lipo battery protected from damage.  Lipo batteries are unsafe when damaged or punctured, so the case is an important part of safe Looping. If your battery is damaged in some way, please disconnect it immediately, and dispose of it (they should be recycled). You can order new batteries on the  GetRileyLink website", 
            "title": "Lipo Battery"
        }, 
        {
            "location": "/build/step5/#removing-lipo-battery", 
            "text": "To remove the lipo battery from the RL, please do so slowly and patiently. Work the battery connection side to side slowly to loosen it from the plug. Some people have reported success using small, curved needle-nose pliers such as hemostats. Others have used small flathead screwdrivers as shown in  this video .", 
            "title": "Removing Lipo Battery"
        }, 
        {
            "location": "/build/step5/#waiting-for-rileylink", 
            "text": "Yes, waiting for RL to arrive is extremely difficult if they are backorder.  PLEASE be patient, since Loop CANNOT work without RL.  If you're really dying to do something while RL ships, you can proceed with finishing these build directions all the way through Step 14...but after that you'll have to wait for the RileyLink.  You can't properly enter any settings or pump info in Loop app without the RileyLink.", 
            "title": "Waiting for RileyLink"
        }, 
        {
            "location": "/build/step5/#next-step-enroll-in-apple-developer-program", 
            "text": "Now you are ready to move onto Step 6 to  enroll in the Apple Developer Program .", 
            "title": "Next Step: Enroll in Apple Developer Program"
        }, 
        {
            "location": "/build/step6/", 
            "text": "Step 6: Enroll in Apple Developer Program\n\u2301\n\n\n\n\nTime Estimate\n\n\n\n\n15-20 minutes to complete the enrollment forms\n\n\nup to 2 days to wait for confirmation email that enrollment has been activated\n\n\n\n\n\n\n\n\nSummary\n\n\n\n\nIf you've decided to you'd like to use a paid developer account, you need to enroll now. Go to the \nApple Developer website\n to enroll in an individual account.\n\n\nIf you've decided you'd like too use a free developer account, you don't need to do anything now. We'll get you covered later.\n\n\n\n\n\n\n\n\nFAQs\n\n\n\n\n\"Can I use someone else's Apple Developer account?\"\n Great question...answer is \nhere\n.\n\n\n\"Do I use my Apple ID or my kid's Apple ID to enroll in the Apple Developer program?\"\n The Apple ID you use to enroll in the developer program does not need to be the same Apple ID as the Loop iPhone or Looper uses, for example a parent installing Loop on kid's iPhone. Typically for the developer enrollment, use the Apple ID of the person who will be doing the Loop app building. \n\n\n\"How long does it take to have my Apple Development account active after I enroll?\"\n After you enroll, make sure you look for a confirmation email. Apple says it can take up to 24-48 hours to confirm and setup a new Apple developer account, however some people have had the process only take minutes. It can vary. One SURE way to make it take longer? Use a different credit card to pay for the Apple Developer account enrollment than is already associated with the Apple ID you'll be enrolling with. When you do that, I've heard Apple makes you send in a xerox copy of your driver's license and a bunch of other hassle.\n\n\n\n\n\n\nIn order to build your own Loop app, you will need to use an Apple developer account.  You will have two options for an individual account; free or paid.\n\n\nFree Developer Account\n\u2301\n\n\nIf you decide to use a \nFREE\n developer account, here's what you need to know:\n\n\n\n\nLoop apps signed with a free developer team will expire after 7 days.  On the 7th day, your Loop app will simply turn white when you open it and then immediately close. To rebuild the Loop app, you will have to find a computer and rebuild the app onto your iPhone again. You cannot rebuild the app on day 5 (when it is convenient, for example)...hoping to reset the 7-day clock.  The app will still expire on the 7th day from when it was first signed and created.\n\n\nIf you decide to switch to a paid account after trying out the free account, you will need to rebuild your Loop app in order to sign it with the new paid account.\n\n\nYou will have to do an extra step during the build process to remove Siri capabilities in order to build with free accounts.\n\n\n\n\nPaid Developer Account\n\u2301\n\n\nIf you decide to use a \nPAID\n developer account, here's what you need to know:\n\n\n\n\nLoop apps signed with a paid developer team will last for a full year.\n\n\nThe paid developer account is $99 per year and is default set to auto-renew annually. You can change that selection in your developer account settings at any time.\n\n\nIf your household has multiple Loop users, only one developer account is needed.  That one developer account can be used to sign multiple Loop apps.\n\n\n\n\nSwitching from Free to Paid Memberships\n\u2301\n\n\nIn summary: This is no problem trying a free account first before you decide to buy a paid developer account. If you start with a free account, you'll build a Loop app (let's call it FreeLoop). When you switch to a paid account, you'll be building a totally new and separate Loop app onto your phone (let's call it PaidLoop). The two apps will look identical on your phone, but they will be functionally separate from each other...ideally you want to delete the FreeLoop app before using the PaidLoop app.\n\n\nPaidLoop will know nothing about the settings and information you had stored in FreeLoop, so you will need to re-enter all your settings (basal rates, ISF, carb ratios, etc.) and configurations into the new PaidLoop. It will also not connect or control any pods you are currently using with the old FreeLoop you had installed.\n\n\nSo, when switching from Free to Paid Loop builds...try to remember that you'll have the best luck by (1) timing it at pod change time and (2) take screenshots of your old app's settings so that you can enter them into the new app.\n\n\nEnrolling\n\u2301\n\n\nPaid account enrollment is all through Apple's Developer Program website. Go to the \nApple Developer website\n to enroll in an individual paid account. If you instead want the free account, you don't have to do anything on that website. You'll just wait for Step 8 Xcode Preferences and we will get your free account then.\n\n\nNext Step: Install Homebrew\n\u2301\n\n\nNow you are ready to move onto Step 7 to \ninstall Hombrew\n.", 
            "title": "Step 6 Enroll in Apple Developer Program"
        }, 
        {
            "location": "/build/step6/#step-6-enroll-in-apple-developer-program", 
            "text": "Time Estimate   15-20 minutes to complete the enrollment forms  up to 2 days to wait for confirmation email that enrollment has been activated     Summary   If you've decided to you'd like to use a paid developer account, you need to enroll now. Go to the  Apple Developer website  to enroll in an individual account.  If you've decided you'd like too use a free developer account, you don't need to do anything now. We'll get you covered later.     FAQs   \"Can I use someone else's Apple Developer account?\"  Great question...answer is  here .  \"Do I use my Apple ID or my kid's Apple ID to enroll in the Apple Developer program?\"  The Apple ID you use to enroll in the developer program does not need to be the same Apple ID as the Loop iPhone or Looper uses, for example a parent installing Loop on kid's iPhone. Typically for the developer enrollment, use the Apple ID of the person who will be doing the Loop app building.   \"How long does it take to have my Apple Development account active after I enroll?\"  After you enroll, make sure you look for a confirmation email. Apple says it can take up to 24-48 hours to confirm and setup a new Apple developer account, however some people have had the process only take minutes. It can vary. One SURE way to make it take longer? Use a different credit card to pay for the Apple Developer account enrollment than is already associated with the Apple ID you'll be enrolling with. When you do that, I've heard Apple makes you send in a xerox copy of your driver's license and a bunch of other hassle.    In order to build your own Loop app, you will need to use an Apple developer account.  You will have two options for an individual account; free or paid.", 
            "title": "Step 6: Enroll in Apple Developer Program"
        }, 
        {
            "location": "/build/step6/#free-developer-account", 
            "text": "If you decide to use a  FREE  developer account, here's what you need to know:   Loop apps signed with a free developer team will expire after 7 days.  On the 7th day, your Loop app will simply turn white when you open it and then immediately close. To rebuild the Loop app, you will have to find a computer and rebuild the app onto your iPhone again. You cannot rebuild the app on day 5 (when it is convenient, for example)...hoping to reset the 7-day clock.  The app will still expire on the 7th day from when it was first signed and created.  If you decide to switch to a paid account after trying out the free account, you will need to rebuild your Loop app in order to sign it with the new paid account.  You will have to do an extra step during the build process to remove Siri capabilities in order to build with free accounts.", 
            "title": "Free Developer Account"
        }, 
        {
            "location": "/build/step6/#paid-developer-account", 
            "text": "If you decide to use a  PAID  developer account, here's what you need to know:   Loop apps signed with a paid developer team will last for a full year.  The paid developer account is $99 per year and is default set to auto-renew annually. You can change that selection in your developer account settings at any time.  If your household has multiple Loop users, only one developer account is needed.  That one developer account can be used to sign multiple Loop apps.", 
            "title": "Paid Developer Account"
        }, 
        {
            "location": "/build/step6/#switching-from-free-to-paid-memberships", 
            "text": "In summary: This is no problem trying a free account first before you decide to buy a paid developer account. If you start with a free account, you'll build a Loop app (let's call it FreeLoop). When you switch to a paid account, you'll be building a totally new and separate Loop app onto your phone (let's call it PaidLoop). The two apps will look identical on your phone, but they will be functionally separate from each other...ideally you want to delete the FreeLoop app before using the PaidLoop app.  PaidLoop will know nothing about the settings and information you had stored in FreeLoop, so you will need to re-enter all your settings (basal rates, ISF, carb ratios, etc.) and configurations into the new PaidLoop. It will also not connect or control any pods you are currently using with the old FreeLoop you had installed.  So, when switching from Free to Paid Loop builds...try to remember that you'll have the best luck by (1) timing it at pod change time and (2) take screenshots of your old app's settings so that you can enter them into the new app.", 
            "title": "Switching from Free to Paid Memberships"
        }, 
        {
            "location": "/build/step6/#enrolling", 
            "text": "Paid account enrollment is all through Apple's Developer Program website. Go to the  Apple Developer website  to enroll in an individual paid account. If you instead want the free account, you don't have to do anything on that website. You'll just wait for Step 8 Xcode Preferences and we will get your free account then.", 
            "title": "Enrolling"
        }, 
        {
            "location": "/build/step6/#next-step-install-homebrew", 
            "text": "Now you are ready to move onto Step 7 to  install Hombrew .", 
            "title": "Next Step: Install Homebrew"
        }, 
        {
            "location": "/build/step7/", 
            "text": "Step 7: Install Homebrew\n\u2301\n\n\n\n\nTime Estimate\n\n\n\n\n10-15 minutes assuming you know your computer's password\n\n\n35 minutes if you can't remember your password and have to guess\n\n\n\n\n\n\n\n\nSummary\n\n\n\n\nInstall Homebrew by simply copying and pasting a long line of gibberish into the ugly Terminal application.\n\n\n\n\n\n\n\n\nFAQs\n\n\n\n\n\"What if I don't get an \"Installation successful\" message?\"\n If you don't see a successful installation message, please try the copy-paste again. If you fail to get Homebrew installed, your Loop build will also fail. You can't just skip this step. The most common cause of errors is failing to copy the ENTIRE line of code ...people sometimes fail to get that last \n\"\n at the end of the line. Also, you need to be using a user account on the computer that has \"admin\" rights, since this process is installing a program on the computer.\n\n\n\n\n\n\nBreath deep...this step looks kind of \"programmer code\" weirdness. BUT, it isn't. Well, it is...but we will be just simply copying and pasting one line of the weirdness and then walking away. We don't actually have to know much about Homebrew itself or what the line of code means exactly.\n\n\nHomebrew is a program that will allow us to install the needed packages to build Loop. Open the Terminal application on your computer. It is located in your Applications folder and then look in the Utilities subfolder...the Terminal application is in there like shown in the screenshot below.\n\n\n\n\n\n\n\n\n\nThe Terminal app is very plain looking when you open it. That is normal. Copy and paste the line in the little grey box below into Terminal prompt. \n\n\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\n\nYour screen should look like something like this after you copy it in...if it does, then go ahead and press return to continue on with the installation command. \n\n\n\n\n\n\n\n\n\n\n\nThere will be a prompt asking if you want to continue.  Press return to continue, then it will prompt for your password.  \nThe password is your computer's password.\n\n\nDon't freak out that you can't see your password while you type. That is normal. The Terminal app doesn't show keystrokes when you enter passwords, but it is still recording your password entry. If you think you messed up because you were confused, press the delete key a bunch of times and then start fresh with the password entry.\n  \n\n\nWait while the script does its thing...you\u2019ll see info scroll by and then it will pause for a while. Eventually, it will be done and you\u2019ll see something that says \u201cInstallation successful\u201d and you\u2019ll have a ready Terminal prompt again.\n\n\n\n\n\n\n\n\n\n\n\nYou can close the Terminal application now. You\u2019re done with it. You do not need to do these steps again for any subsequent Loop builds. This is one of those \"just do it once\" installations. If you get a new computer though, you will have to repeat this step for the new computer.\n\n\nNext Step: Download Xcode\n\u2301\n\n\nNow you are ready to move onto Step 8 to \ndownload Xcode\n.", 
            "title": "Step 7 Install Homebrew"
        }, 
        {
            "location": "/build/step7/#step-7-install-homebrew", 
            "text": "Time Estimate   10-15 minutes assuming you know your computer's password  35 minutes if you can't remember your password and have to guess     Summary   Install Homebrew by simply copying and pasting a long line of gibberish into the ugly Terminal application.     FAQs   \"What if I don't get an \"Installation successful\" message?\"  If you don't see a successful installation message, please try the copy-paste again. If you fail to get Homebrew installed, your Loop build will also fail. You can't just skip this step. The most common cause of errors is failing to copy the ENTIRE line of code ...people sometimes fail to get that last  \"  at the end of the line. Also, you need to be using a user account on the computer that has \"admin\" rights, since this process is installing a program on the computer.    Breath deep...this step looks kind of \"programmer code\" weirdness. BUT, it isn't. Well, it is...but we will be just simply copying and pasting one line of the weirdness and then walking away. We don't actually have to know much about Homebrew itself or what the line of code means exactly.  Homebrew is a program that will allow us to install the needed packages to build Loop. Open the Terminal application on your computer. It is located in your Applications folder and then look in the Utilities subfolder...the Terminal application is in there like shown in the screenshot below.     The Terminal app is very plain looking when you open it. That is normal. Copy and paste the line in the little grey box below into Terminal prompt.   /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"  Your screen should look like something like this after you copy it in...if it does, then go ahead and press return to continue on with the installation command.       There will be a prompt asking if you want to continue.  Press return to continue, then it will prompt for your password.   The password is your computer's password.  Don't freak out that you can't see your password while you type. That is normal. The Terminal app doesn't show keystrokes when you enter passwords, but it is still recording your password entry. If you think you messed up because you were confused, press the delete key a bunch of times and then start fresh with the password entry.     Wait while the script does its thing...you\u2019ll see info scroll by and then it will pause for a while. Eventually, it will be done and you\u2019ll see something that says \u201cInstallation successful\u201d and you\u2019ll have a ready Terminal prompt again.      You can close the Terminal application now. You\u2019re done with it. You do not need to do these steps again for any subsequent Loop builds. This is one of those \"just do it once\" installations. If you get a new computer though, you will have to repeat this step for the new computer.", 
            "title": "Step 7: Install Homebrew"
        }, 
        {
            "location": "/build/step7/#next-step-download-xcode", 
            "text": "Now you are ready to move onto Step 8 to  download Xcode .", 
            "title": "Next Step: Download Xcode"
        }, 
        {
            "location": "/build/step8/", 
            "text": "Step 8: Download Xcode\n\u2301\n\n\n\n\nTime Estimate\n\n\n\n\n45 minutes to 2 hours, depending on internet connection...but you don't need to babysit the download.\n\n\n\n\n\n\n\n\nSummary\n\n\n\n\nAfter making sure your Mojave is up-to-date, download Xcode from your computer's App Store application.\n\n\n\n\n\n\n\n\nFAQs\n\n\n\n\n\"Why isn't my Xcode installing?\"\n I can't see your computer to know exactly why...but the two most common reasons are (1) lack of internet connection or (2) not enough free space on the computer's hard drive. Xcode is a pretty beefy-sized download...and needs even a little more space to properly unpack and install itself. Best to try to have about 12-15GB of free space on your hard drive before starting to be on the safe side. If you get low on free space, I've seen installation failures. You can check your free space by clicking on the \nAbout this Mac\n (like in Step 1) and clicking the \nStorage\n tab.\n\n\n\n\n\n\nToday is an easy one, but probably takes the longest of most of any of the days in terms of time...only because the download takes a while. The good news is that you don't have to watch this. Instead, you can start the download and simply walk away for the rest of it.\n\n\nXcode is a free application for Apple computers. Xcode will turn the Loop \"raw\" code into an iOS application and install it onto your iPhone/iPod. \nMake sure you have updated your macOS to Mojave AND checked the \nSoftware Updates\n button before proceeding...in other words, make sure you did Step 1's work.\n\n\nOpen your App Store in your computer and search for Xcode...you'll either be downloading it brand new or updating an existing installation. The version you are looking for is Xcode 11 at the minimum. It should be showing in the \"what's new\" description as shown in the image below. This is a big download (over 7GB) so don't expected this to be fast.\n\n\n\n\n\n\n\n\n\n\n\nIf your download fails to finish, you can try directly downloading from your Apple developer account. Login to your developer account and then use \nthis link to download Xcode 11 directly\n.\n\n\nIf you have anti-virus software, you may also want to grant an exception for downloading Xcode (uncommon issue, but we have had one person using anti-virus report that they needed to disable their virus protection to complete the download).\n\n\nNext Step: Xcode Preferences\n\u2301\n\n\nNow you are ready to move onto Step 9 to \nwork on Xcode Preferences\n.", 
            "title": "Step 8 Download Xcode"
        }, 
        {
            "location": "/build/step8/#step-8-download-xcode", 
            "text": "Time Estimate   45 minutes to 2 hours, depending on internet connection...but you don't need to babysit the download.     Summary   After making sure your Mojave is up-to-date, download Xcode from your computer's App Store application.     FAQs   \"Why isn't my Xcode installing?\"  I can't see your computer to know exactly why...but the two most common reasons are (1) lack of internet connection or (2) not enough free space on the computer's hard drive. Xcode is a pretty beefy-sized download...and needs even a little more space to properly unpack and install itself. Best to try to have about 12-15GB of free space on your hard drive before starting to be on the safe side. If you get low on free space, I've seen installation failures. You can check your free space by clicking on the  About this Mac  (like in Step 1) and clicking the  Storage  tab.    Today is an easy one, but probably takes the longest of most of any of the days in terms of time...only because the download takes a while. The good news is that you don't have to watch this. Instead, you can start the download and simply walk away for the rest of it.  Xcode is a free application for Apple computers. Xcode will turn the Loop \"raw\" code into an iOS application and install it onto your iPhone/iPod.  Make sure you have updated your macOS to Mojave AND checked the  Software Updates  button before proceeding...in other words, make sure you did Step 1's work.  Open your App Store in your computer and search for Xcode...you'll either be downloading it brand new or updating an existing installation. The version you are looking for is Xcode 11 at the minimum. It should be showing in the \"what's new\" description as shown in the image below. This is a big download (over 7GB) so don't expected this to be fast.      If your download fails to finish, you can try directly downloading from your Apple developer account. Login to your developer account and then use  this link to download Xcode 11 directly .  If you have anti-virus software, you may also want to grant an exception for downloading Xcode (uncommon issue, but we have had one person using anti-virus report that they needed to disable their virus protection to complete the download).", 
            "title": "Step 8: Download Xcode"
        }, 
        {
            "location": "/build/step8/#next-step-xcode-preferences", 
            "text": "Now you are ready to move onto Step 9 to  work on Xcode Preferences .", 
            "title": "Next Step: Xcode Preferences"
        }, 
        {
            "location": "/build/step9/", 
            "text": "Step 9: Xcode Preferences\n\u2301\n\n\n\n\nTime Estimate\n\n\n\n\nabout 10-15 minutes to install the Command Line Tools\n\n\n5 minutes to add your Apple ID, assuming you remember your password\n\n\n\n\n\n\n\n\nSummary\n\n\n\n\nOpen Xcode Preferences and add your Apple ID under the Accounts tab.\n\n\nVerify that Command Line Tools has been properly installed under Xcode Preferences under the Locations tab.\n\n\n\n\n\n\n\n\nFAQs\n\n\n\n\n\"I still only see an account with \n(personal team)\n beside it even though I enrolled in the paid Developer Account program...what should I do?\"\n You should check your spam email box in case Apple sent you an email there. Make sure you've waited the 48 hours that Apple says it may take to get your account approved. If it's been 48 hours and you still don't see anything in your email, contact Apple support and ask them about the status of your enrollment. It may be held up by something on their end.\n\n\n\n\n\n\nSince you've been working in order, you will now have Xcode installed on your computer from Step 8. You will also have enrolled in the Apple Developer program with a paid account, if that was your selection, in Step 6. Now we need to tell Xcode about your Developer Account.\n\n\nOpen Xcode from your Applications folder. \n\n\nCommand Line Tools\n\u2301\n\n\nThere may be a short delay the very first time you open Xcode because it will install a package of tools. Don't close that window out, let it finish...we will need those Command Line Tools. Helpful tip: When the Command Line Tools installation is done and the pop-up window closes, check that your Command Line Tools installed correctly. Open Xcode's Preferences by clicking on the word \nXcode\n \n in the top menu bar (just to the right of the Apple icon in the upper-left corner) and selecting \nPreferences\n in the drop-down menu. The keyboard shortcut to open Xcode Preferences is \ncommand-comma\n if that's easier for you. Then select the \nLocations\n tab of Preferences window and you'll see the dropdown menu for Command Line Tools. Make sure that Xcode 11 (or newer) is selected there.\n\n\n\n\n\n\n\nAdd Apple ID\n\u2301\n\n\nGo to the Xcode Preferences window from above, click on the \nAccounts\n tab and then press the \n+\n in the lower-left corner to add an Apple ID account.\n\n\n\n\n\n\n\n\n\nIf you want to use a free developer account, you will simply enter your Apple ID in this section and Xcode will automatically enroll your Apple ID in the free developer program. If you enrolled in the paid account already and have confirmation that your account is active, enter the Apple ID of the paid developer account. The screenshot below shows the labeling of team names based on whether from free account vs. paid account. Free teams will have \n(personal team)\n after the name.\n\n\n\n\n\n\n\n\n\nYou are now done setting up Xcode.  Great job!  You will not need to redo the account setup steps on any subsequent builds or updates of your Loop app.  Xcode will remember these settings.\n\n\nNext Step: Test Settings\n\u2301\n\n\nNow you are ready to move onto Step 10 to \nTest Your Settings\n.", 
            "title": "Step 9 Xcode Preferences"
        }, 
        {
            "location": "/build/step9/#step-9-xcode-preferences", 
            "text": "Time Estimate   about 10-15 minutes to install the Command Line Tools  5 minutes to add your Apple ID, assuming you remember your password     Summary   Open Xcode Preferences and add your Apple ID under the Accounts tab.  Verify that Command Line Tools has been properly installed under Xcode Preferences under the Locations tab.     FAQs   \"I still only see an account with  (personal team)  beside it even though I enrolled in the paid Developer Account program...what should I do?\"  You should check your spam email box in case Apple sent you an email there. Make sure you've waited the 48 hours that Apple says it may take to get your account approved. If it's been 48 hours and you still don't see anything in your email, contact Apple support and ask them about the status of your enrollment. It may be held up by something on their end.    Since you've been working in order, you will now have Xcode installed on your computer from Step 8. You will also have enrolled in the Apple Developer program with a paid account, if that was your selection, in Step 6. Now we need to tell Xcode about your Developer Account.  Open Xcode from your Applications folder.", 
            "title": "Step 9: Xcode Preferences"
        }, 
        {
            "location": "/build/step9/#command-line-tools", 
            "text": "There may be a short delay the very first time you open Xcode because it will install a package of tools. Don't close that window out, let it finish...we will need those Command Line Tools. Helpful tip: When the Command Line Tools installation is done and the pop-up window closes, check that your Command Line Tools installed correctly. Open Xcode's Preferences by clicking on the word  Xcode    in the top menu bar (just to the right of the Apple icon in the upper-left corner) and selecting  Preferences  in the drop-down menu. The keyboard shortcut to open Xcode Preferences is  command-comma  if that's easier for you. Then select the  Locations  tab of Preferences window and you'll see the dropdown menu for Command Line Tools. Make sure that Xcode 11 (or newer) is selected there.", 
            "title": "Command Line Tools"
        }, 
        {
            "location": "/build/step9/#add-apple-id", 
            "text": "Go to the Xcode Preferences window from above, click on the  Accounts  tab and then press the  +  in the lower-left corner to add an Apple ID account.     If you want to use a free developer account, you will simply enter your Apple ID in this section and Xcode will automatically enroll your Apple ID in the free developer program. If you enrolled in the paid account already and have confirmation that your account is active, enter the Apple ID of the paid developer account. The screenshot below shows the labeling of team names based on whether from free account vs. paid account. Free teams will have  (personal team)  after the name.     You are now done setting up Xcode.  Great job!  You will not need to redo the account setup steps on any subsequent builds or updates of your Loop app.  Xcode will remember these settings.", 
            "title": "Add Apple ID"
        }, 
        {
            "location": "/build/step9/#next-step-test-settings", 
            "text": "Now you are ready to move onto Step 10 to  Test Your Settings .", 
            "title": "Next Step: Test Settings"
        }, 
        {
            "location": "/build/step10/", 
            "text": "Step 10: Test Settings\n\u2301\n\n\n\n\nTime Estimate\n\n\n\n\n2 hours to read the web pages thoroughly and thoughtfully\n\n\n1-3 days to test settings if you are a normal person who wants to get the most out of Loop\n\n\n\n\n\n\n\n\nSummary\n\n\n\n\nA small amount of effort to test/validate basals, carb ratios, and ISF (correction factor) will eliminate a lot of uncertainty when you start Looping.\n\n\nKeep an open mind that settings may need to change just as you start Loop. Hormones, illness, and failed sites can still happen just like always.\n\n\n\n\n\n\n\n\nFAQs\n\n\n\n\n\"My endo makes my pump settings, so do I really need to test them?\"\n Well, nobody is going to force you...but testing your settings even just a couple days will give you a tremendous advantage going into Loop. Your endo may have very conservative overnight ISF and carb ratios that normally don't get used in traditional pump therapy, but will be used by Loop for sure. So, keep an open mind as you head into Looping on old settings if you haven't tested them recently.\n\n\n\"I have great control, why would I need to test my settings?\"\n Awesome for you! However, it is quite possible that your \"great control\" comes with a lot of little adjustments all the time. We all got used to needing little bumps and nudges of insulin or carbs over time...and sometimes those bumps and nudges are covering for underlying settings that need adjustment. Testing your settings will help...especially if you are coming from a treatment style that involves memorizing your insulin doses for meals...you may not know your actual carb ratio or ISF as a result of \"just knowing\" your boluses.\n\n\n\"I can't basal test with my 2-year-old. What can I do?\"\n I agree, that would be pretty tough. Consult your endo, watch your patterns, and do the best you can...little kiddos are a difficult group to do settings testing with. I feel ya.\n\n\n\n\n\n\nLoop is just a fancy calculator underneath the hood. The math problems that it is solving depend on some settings that you will be providing it. It's a good idea to make sure you do a bit of settings testing before using Loop.\n\n\nBasal rates\n, if properly set, will keep your blood glucose steady without food present. You can test your basals by having a relaxing set of 4-6 hours without eating at least two hours before you begin the test. Does your blood sugar stay steady? Or do you climb and need a correction? Or do you go low and need to eat? Setting basals is a HUGE important step to setting yourself up for Loop success.\n\n\nInsulin Sensitivity Factor\n (sometimes called Correction Factor) is how much one unit of insulin will bring down your blood sugar. The higher the value of this setting, the more sensitive to insulin you are. An ISF of 30 means one unit of insulin brings your blood sugar down 30 mg/dL. You can test this setting after you get good basals set and tested. Simply bring yourself to a higher BG with a glucose tab or other small quick carbs. Wait until you see yourself plateau again at the higher BG, then make a correction. Wait 4-6 hours (again no food) and see where your correction lands your blood sugar. Divide the BG drop by the amount of correction insulin you delivered...that\u2019s your ISF. \n\n\nCarb Ratio\n is the amount of carbs covered by one unit of insulin. Ideally a good carb ratio will bring your BG back to starting point within 2-3 hours\n of the meal. (\nHigh fat/protein meals may cause BGs to be impacted longer.) If you are spiking higher than you\u2019d like after a meal but still coming back to starting BG, consider prebolusing your meal by 15-20 minutes rather than changing carb ratio. \n\n\nCheck \nLoopTips.org\n for a discussion on how to \ncheck all these settings\n and \nwhy they are important\n. If you\u2019re fascinated by this topic, read the book \nThink Like A Pancreas\n for a really great discussion. Finally remember settings can change periodically. Hormone cycles, steroids, illness, etc may lead to a \nneed to change settings\n.\n\n\nNext Step: Make Plans for Loop Data\n\u2301\n\n\nNow you are ready to move onto Step 11 to \nMake Plans for Loop Data\n.", 
            "title": "Step 10 Test Settings"
        }, 
        {
            "location": "/build/step10/#step-10-test-settings", 
            "text": "Time Estimate   2 hours to read the web pages thoroughly and thoughtfully  1-3 days to test settings if you are a normal person who wants to get the most out of Loop     Summary   A small amount of effort to test/validate basals, carb ratios, and ISF (correction factor) will eliminate a lot of uncertainty when you start Looping.  Keep an open mind that settings may need to change just as you start Loop. Hormones, illness, and failed sites can still happen just like always.     FAQs   \"My endo makes my pump settings, so do I really need to test them?\"  Well, nobody is going to force you...but testing your settings even just a couple days will give you a tremendous advantage going into Loop. Your endo may have very conservative overnight ISF and carb ratios that normally don't get used in traditional pump therapy, but will be used by Loop for sure. So, keep an open mind as you head into Looping on old settings if you haven't tested them recently.  \"I have great control, why would I need to test my settings?\"  Awesome for you! However, it is quite possible that your \"great control\" comes with a lot of little adjustments all the time. We all got used to needing little bumps and nudges of insulin or carbs over time...and sometimes those bumps and nudges are covering for underlying settings that need adjustment. Testing your settings will help...especially if you are coming from a treatment style that involves memorizing your insulin doses for meals...you may not know your actual carb ratio or ISF as a result of \"just knowing\" your boluses.  \"I can't basal test with my 2-year-old. What can I do?\"  I agree, that would be pretty tough. Consult your endo, watch your patterns, and do the best you can...little kiddos are a difficult group to do settings testing with. I feel ya.    Loop is just a fancy calculator underneath the hood. The math problems that it is solving depend on some settings that you will be providing it. It's a good idea to make sure you do a bit of settings testing before using Loop.  Basal rates , if properly set, will keep your blood glucose steady without food present. You can test your basals by having a relaxing set of 4-6 hours without eating at least two hours before you begin the test. Does your blood sugar stay steady? Or do you climb and need a correction? Or do you go low and need to eat? Setting basals is a HUGE important step to setting yourself up for Loop success.  Insulin Sensitivity Factor  (sometimes called Correction Factor) is how much one unit of insulin will bring down your blood sugar. The higher the value of this setting, the more sensitive to insulin you are. An ISF of 30 means one unit of insulin brings your blood sugar down 30 mg/dL. You can test this setting after you get good basals set and tested. Simply bring yourself to a higher BG with a glucose tab or other small quick carbs. Wait until you see yourself plateau again at the higher BG, then make a correction. Wait 4-6 hours (again no food) and see where your correction lands your blood sugar. Divide the BG drop by the amount of correction insulin you delivered...that\u2019s your ISF.   Carb Ratio  is the amount of carbs covered by one unit of insulin. Ideally a good carb ratio will bring your BG back to starting point within 2-3 hours  of the meal. ( High fat/protein meals may cause BGs to be impacted longer.) If you are spiking higher than you\u2019d like after a meal but still coming back to starting BG, consider prebolusing your meal by 15-20 minutes rather than changing carb ratio.   Check  LoopTips.org  for a discussion on how to  check all these settings  and  why they are important . If you\u2019re fascinated by this topic, read the book  Think Like A Pancreas  for a really great discussion. Finally remember settings can change periodically. Hormone cycles, steroids, illness, etc may lead to a  need to change settings .", 
            "title": "Step 10: Test Settings"
        }, 
        {
            "location": "/build/step10/#next-step-make-plans-for-loop-data", 
            "text": "Now you are ready to move onto Step 11 to  Make Plans for Loop Data .", 
            "title": "Next Step: Make Plans for Loop Data"
        }, 
        {
            "location": "/build/step11/", 
            "text": "Step 11: Make Plans for your Loop Data\n\u2301\n\n\n\n\nTime Estimate\n\n\n\n\nNightscout: 1-2 hours if you've never done it before and work slowly\n\n\nNightscout: 20-30 minutes if you have experience in Github and Heroku previously\n\n\nTidepool: 30-40 minutes to set up account and Tidepool Mobile app\n\n\nApple Health: 0 minutes\n\n\n\n\n\n\n\n\nSummary\n\n\n\n\nReview the three major systems that can store and show your Loop data. \n\n\nSet up either Tidepool or Nightscout prior to your next endo appointment in order to provide them Looping data to review.\n\n\n\n\n\n\n\n\nFAQs\n\n\n\n\n\"Do I have to set one of these up?\"\n No. But, your health care provider really does need data. Insurance companies definitely demand data too...so make them happy.\n\n\n\"Do I need all three?\"\n No, you can mix-and-match. Apple Health is already built into your iPhone, so there's no setup involved anyways. Nightscout setup is really actually quite easy and Loopdocs has a \ncomplete set of instructions for Loop users\n. Nightscout has a lot of useful alarms and alerts, too. Tidepool is free and easy to set up, and many clinics already have Tidepool integration.\n\n\nIs it worth the time to setup Nightscout? I feel like I'm already doing so much outside my comfort zone.\"\n Yes. The feedback from the thousands of people that have come before you is YES, it is worth the minimal time investment to set up a Nightscout site.\n\n\n\n\n\n\nOk, technically this step could wait until after you build Loop app...but I have your attention now, so I'm taking advantage of it.\n\n\nWith Loop use, you will no longer be using your PDM (if you use Omnipods) and your pump (if you use Medtronic) will so full of temp basals that the endos will have nothing to download at your next visit. This \nlack of data\n will cause a little friction with the health care industry; not good for your insurance records, not good for your endo to feel comfortable, and not good for you to know how your Loop use might be improved with settings tweaks.\n\n\nSo let's explore options for your Loop data. There are three great options for where your Loop data can be stored and retrieved:\n\n\n\n\nApple Health app\n\n\nNightscout\n\n\nTidepool\n\n\n\n\nAll of the options are free and easy to setup. Take some time to familiarize yourself with these options and setup your preferred system(s). Personally, I use all three for various aspects of my data's story to me...Nightscout being the most useful day-to-day as a remote caregiver of a young Looper.\n\n\nNext Step: Meet Community\n\u2301\n\n\nNow you are ready to move onto Step 12 to \nMeet Community\n.", 
            "title": "Step 11 Make plans for Loop Data"
        }, 
        {
            "location": "/build/step11/#step-11-make-plans-for-your-loop-data", 
            "text": "Time Estimate   Nightscout: 1-2 hours if you've never done it before and work slowly  Nightscout: 20-30 minutes if you have experience in Github and Heroku previously  Tidepool: 30-40 minutes to set up account and Tidepool Mobile app  Apple Health: 0 minutes     Summary   Review the three major systems that can store and show your Loop data.   Set up either Tidepool or Nightscout prior to your next endo appointment in order to provide them Looping data to review.     FAQs   \"Do I have to set one of these up?\"  No. But, your health care provider really does need data. Insurance companies definitely demand data too...so make them happy.  \"Do I need all three?\"  No, you can mix-and-match. Apple Health is already built into your iPhone, so there's no setup involved anyways. Nightscout setup is really actually quite easy and Loopdocs has a  complete set of instructions for Loop users . Nightscout has a lot of useful alarms and alerts, too. Tidepool is free and easy to set up, and many clinics already have Tidepool integration.  Is it worth the time to setup Nightscout? I feel like I'm already doing so much outside my comfort zone.\"  Yes. The feedback from the thousands of people that have come before you is YES, it is worth the minimal time investment to set up a Nightscout site.    Ok, technically this step could wait until after you build Loop app...but I have your attention now, so I'm taking advantage of it.  With Loop use, you will no longer be using your PDM (if you use Omnipods) and your pump (if you use Medtronic) will so full of temp basals that the endos will have nothing to download at your next visit. This  lack of data  will cause a little friction with the health care industry; not good for your insurance records, not good for your endo to feel comfortable, and not good for you to know how your Loop use might be improved with settings tweaks.  So let's explore options for your Loop data. There are three great options for where your Loop data can be stored and retrieved:   Apple Health app  Nightscout  Tidepool   All of the options are free and easy to setup. Take some time to familiarize yourself with these options and setup your preferred system(s). Personally, I use all three for various aspects of my data's story to me...Nightscout being the most useful day-to-day as a remote caregiver of a young Looper.", 
            "title": "Step 11: Make Plans for your Loop Data"
        }, 
        {
            "location": "/build/step11/#next-step-meet-community", 
            "text": "Now you are ready to move onto Step 12 to  Meet Community .", 
            "title": "Next Step: Meet Community"
        }, 
        {
            "location": "/build/step12/", 
            "text": "Step 12: Meet the Community\n\u2301\n\n\n\n\nTime Estimate\n\n\n\n\nJoining Looped Group: 5 minutes\n\n\nJoining Zulipchat: 10 minutes\n\n\n\n\n\n\n\n\nSummary\n\n\n\n\nUse the search tools in Looped, Zulipchat, Loopdocs, and Looptips\n\n\nIf asking for help, remember the motto \"Help me help you\"...provide information. Avoid vague phrases and the word \"it\". Aim for details and specifics. Screenshots are gold.\n\n\n\n\n\n\n\n\nFAQs\n\n\n\n\n\"I'm worried I'll ask a stupid question\"\n Don't worry about that...instead just focus on asking a \nthorough\n question. A thorough question explains what you've already tried or read, has screenshots of what you are confused by, and any other details that you can provide.\n\n\n\n\n\n\nOnline groups\n\u2301\n\n\nThere's a whole wonderful community of people already Looping who willing to help you through the process. You can find them in two main areas; \nLooped group on Facebook\n and \nZulipchat\n.\n\n\nThese groups, as with Loop itself, are entirely driven by VOLUNTEERS. None of the people are paid to answer questions or spend time troubleshooting...they do it because they want to help others. Please decrease that support burden by doing some simple steps yourself before turning to others for help. Please click the image below to watch this video full of tips to make the most of your online resources.\n\n\n\n\nScreenshots\n\u2301\n\n\nOne super valuable tool for posting to online groups is the ability to take screenshots of your issue and use them in your posts. On an Apple computer, simply press \nshift-command-4\n keys at the same time and a little crosshairs tool for taking screenshots will appear. Click-and-drag across the area you'd like to screenshot. When you let go of the button, the screenshot will be saved to your desktop with a file name starting with \"screenshot\". Use screenshots over cell phone images or words whenever possible...screenshots are higher resolution and easier to read.\n\n\nAdditionally, take a wider screenshot than you may initially think you need. Especially if you are posting asking for help with settings or Xcode build errors. Nightscout and Xcode have lots of valuable information off-to-the-side that many people dismiss, when really it can be valuable for troubleshooters.\n\n\nDescriptive Language\n\u2301\n\n\nDescriptive language doesn't mean the four-letter words that get you frowns at the cocktail parties. Instead, this phrase means to use the most accurate, detailed words that you can when asking for help. In summary, try to avoid the word \"it\" and instead use details and information to help fill in the story about why you're asking for help, what you've already tried, and what happened when you tried those things (including screenshots). Let's illustrate with a couple of examples.\n\n\nExample 1\n\u2301\n\n\nBad:\n \"It's not working.\" \n----makes me wonder what \"it\" is? What part of \"it\" isn't working exactly? The app? The BG control? The pump integration? Alarms? Bolusing? Their Dexcom?\n\n\nOk:\n \"My Loop app won't open.\" \n---- Ok, so now I know the Loop app itself seems to be the problem, but still don't know if this is a build error or an error that has happened after building. The solutions would be different potentially. \n\n\nBetter:\n \"My Loop app was working yesterday just fine, and now today it's not doing the things like I expect.\" \n----- Getting closer. Now I know this is not a build error and that it sounds like a more recent issue. I'm starting to narrow down the potential causes...this is about as much detail as it takes for me, as a volunteer, to consider to start helping. I might not have to ask 42 questions but instead only 4 questions now to find the remaining information for troubleshooting. But, if there were more details...I'd be more likely to wade in to help because more details saves me from questions.\n\n\nAwesome:\n \"My Loop app was working yesterday just fine. Around lunch time, I went into the settings screen and made some adjustments and ever since it just turns white and closes no matter what I try.\" \n---- DEFINITELY getting closer. Now I have a strong suspicion about where the bug is happening and can help with a couple links.\n\n\nGOLD MEDAL WORTHY:\n \"My Loop app was working yesterday just fine. Around lunch time, I went into the settings screen and made some adjustments to correction ranges. Ever since I did that, the app immediately turns white and shuts down. I have tried restarting my phone, but it has not fixed the problem. I tried searching the docs for 'loop closing' but didn't see results that matched my issue.\" \n----- This person is doing an outstanding job of describing the problem. Lots of good details. Has shown initiative to try to use the resources already. Throw in a screenshot, if it was appropriate, and this person will have done an excellent job of helping all of us help him/her.\n\n\nExample 2\n\u2301\n\n\nBad:\n \"My Loop app won't build.\" \n----- What step are you on? What kind of computer are you using? What macOS? What Xcode version? Have you built successfully before or is this new?\n\n\nOk:\n \"I'm trying to update my Loop app to the new omnipod-testing branch, and am getting a few errors that I don't understand.\" \n----- Wow, sure would be nice to know what those error messages are. Are they red or yellow? A screenshot sure would help here.\n\n\nBetter:\n \"I have a macOS Mojave 10.14.5 computer with Xcode 10.3. Downloaded Loop-omnipod-testing branch this morning and I'm getting some red errors about an exit code that I don't understand.\" \n----- Cool, now I don't have to ask if they updated their macOS like the directions say to do, and I can rule out Xcode being old. Still would be great to have screenshots so I can see the exact error message.\n\n\nAwesome:\n \"I have a macOS Mojave 10.14.5 computer with Xcode 10.3. Downloaded Loop-omnipod-testing branch this morning and I'm getting some red errors about an exit code that I don't understand. I've tried everything in the docs and nothing worked.\" \n---- While I'm super happy they \"tried everything\", I'm no closer to knowing what the exact error message is nor which \"stuff\" exactly they tried. \n\n\nGOLD MEDAL WORTHY:\n \"I have a macOS Mojave 10.14.5 computer with Xcode 10.3. Downloaded Loop-omnipod-testing branch this morning and I'm getting some red errors about an exit code 645 that I don't understand. Here's the screenshot of the error message. I tried searching the docs for \"exit code 645\" and didn't see any responses that helped. I tried the \"carthage update\" solution but got an error message during that too...here's the screenshot for that as well.\" \n---- OH BABY I love you. This is the kind of detail that will get you to an answer very fast.\n\n\nBe ok with links\n\u2301\n\n\nA lot of time, the answer to your question for help will be answered with a link. Please don't take offense to getting a quick link back to LoopDocs or LoopTips. This is most often because the question is already answered there and the person is simply saving time by not typing out what already exists elsewhere. \n\n\nIf you've searched the docs and read the info already, then please include that in your post. That way you don't get linked back to the same part you're already confused about. Plus, letting us know when these docs can be improved is very useful. \n\n\nNext Step: Download Loop Code\n\u2301\n\n\nNow you are ready to move onto Step 13 to \nDownload Loop Code\n.", 
            "title": "Step 12 Meet Community"
        }, 
        {
            "location": "/build/step12/#step-12-meet-the-community", 
            "text": "Time Estimate   Joining Looped Group: 5 minutes  Joining Zulipchat: 10 minutes     Summary   Use the search tools in Looped, Zulipchat, Loopdocs, and Looptips  If asking for help, remember the motto \"Help me help you\"...provide information. Avoid vague phrases and the word \"it\". Aim for details and specifics. Screenshots are gold.     FAQs   \"I'm worried I'll ask a stupid question\"  Don't worry about that...instead just focus on asking a  thorough  question. A thorough question explains what you've already tried or read, has screenshots of what you are confused by, and any other details that you can provide.", 
            "title": "Step 12: Meet the Community"
        }, 
        {
            "location": "/build/step12/#online-groups", 
            "text": "There's a whole wonderful community of people already Looping who willing to help you through the process. You can find them in two main areas;  Looped group on Facebook  and  Zulipchat .  These groups, as with Loop itself, are entirely driven by VOLUNTEERS. None of the people are paid to answer questions or spend time troubleshooting...they do it because they want to help others. Please decrease that support burden by doing some simple steps yourself before turning to others for help. Please click the image below to watch this video full of tips to make the most of your online resources.", 
            "title": "Online groups"
        }, 
        {
            "location": "/build/step12/#screenshots", 
            "text": "One super valuable tool for posting to online groups is the ability to take screenshots of your issue and use them in your posts. On an Apple computer, simply press  shift-command-4  keys at the same time and a little crosshairs tool for taking screenshots will appear. Click-and-drag across the area you'd like to screenshot. When you let go of the button, the screenshot will be saved to your desktop with a file name starting with \"screenshot\". Use screenshots over cell phone images or words whenever possible...screenshots are higher resolution and easier to read.  Additionally, take a wider screenshot than you may initially think you need. Especially if you are posting asking for help with settings or Xcode build errors. Nightscout and Xcode have lots of valuable information off-to-the-side that many people dismiss, when really it can be valuable for troubleshooters.", 
            "title": "Screenshots"
        }, 
        {
            "location": "/build/step12/#descriptive-language", 
            "text": "Descriptive language doesn't mean the four-letter words that get you frowns at the cocktail parties. Instead, this phrase means to use the most accurate, detailed words that you can when asking for help. In summary, try to avoid the word \"it\" and instead use details and information to help fill in the story about why you're asking for help, what you've already tried, and what happened when you tried those things (including screenshots). Let's illustrate with a couple of examples.", 
            "title": "Descriptive Language"
        }, 
        {
            "location": "/build/step12/#example-1", 
            "text": "Bad:  \"It's not working.\"  ----makes me wonder what \"it\" is? What part of \"it\" isn't working exactly? The app? The BG control? The pump integration? Alarms? Bolusing? Their Dexcom?  Ok:  \"My Loop app won't open.\"  ---- Ok, so now I know the Loop app itself seems to be the problem, but still don't know if this is a build error or an error that has happened after building. The solutions would be different potentially.   Better:  \"My Loop app was working yesterday just fine, and now today it's not doing the things like I expect.\"  ----- Getting closer. Now I know this is not a build error and that it sounds like a more recent issue. I'm starting to narrow down the potential causes...this is about as much detail as it takes for me, as a volunteer, to consider to start helping. I might not have to ask 42 questions but instead only 4 questions now to find the remaining information for troubleshooting. But, if there were more details...I'd be more likely to wade in to help because more details saves me from questions.  Awesome:  \"My Loop app was working yesterday just fine. Around lunch time, I went into the settings screen and made some adjustments and ever since it just turns white and closes no matter what I try.\"  ---- DEFINITELY getting closer. Now I have a strong suspicion about where the bug is happening and can help with a couple links.  GOLD MEDAL WORTHY:  \"My Loop app was working yesterday just fine. Around lunch time, I went into the settings screen and made some adjustments to correction ranges. Ever since I did that, the app immediately turns white and shuts down. I have tried restarting my phone, but it has not fixed the problem. I tried searching the docs for 'loop closing' but didn't see results that matched my issue.\"  ----- This person is doing an outstanding job of describing the problem. Lots of good details. Has shown initiative to try to use the resources already. Throw in a screenshot, if it was appropriate, and this person will have done an excellent job of helping all of us help him/her.", 
            "title": "Example 1"
        }, 
        {
            "location": "/build/step12/#example-2", 
            "text": "Bad:  \"My Loop app won't build.\"  ----- What step are you on? What kind of computer are you using? What macOS? What Xcode version? Have you built successfully before or is this new?  Ok:  \"I'm trying to update my Loop app to the new omnipod-testing branch, and am getting a few errors that I don't understand.\"  ----- Wow, sure would be nice to know what those error messages are. Are they red or yellow? A screenshot sure would help here.  Better:  \"I have a macOS Mojave 10.14.5 computer with Xcode 10.3. Downloaded Loop-omnipod-testing branch this morning and I'm getting some red errors about an exit code that I don't understand.\"  ----- Cool, now I don't have to ask if they updated their macOS like the directions say to do, and I can rule out Xcode being old. Still would be great to have screenshots so I can see the exact error message.  Awesome:  \"I have a macOS Mojave 10.14.5 computer with Xcode 10.3. Downloaded Loop-omnipod-testing branch this morning and I'm getting some red errors about an exit code that I don't understand. I've tried everything in the docs and nothing worked.\"  ---- While I'm super happy they \"tried everything\", I'm no closer to knowing what the exact error message is nor which \"stuff\" exactly they tried.   GOLD MEDAL WORTHY:  \"I have a macOS Mojave 10.14.5 computer with Xcode 10.3. Downloaded Loop-omnipod-testing branch this morning and I'm getting some red errors about an exit code 645 that I don't understand. Here's the screenshot of the error message. I tried searching the docs for \"exit code 645\" and didn't see any responses that helped. I tried the \"carthage update\" solution but got an error message during that too...here's the screenshot for that as well.\"  ---- OH BABY I love you. This is the kind of detail that will get you to an answer very fast.", 
            "title": "Example 2"
        }, 
        {
            "location": "/build/step12/#be-ok-with-links", 
            "text": "A lot of time, the answer to your question for help will be answered with a link. Please don't take offense to getting a quick link back to LoopDocs or LoopTips. This is most often because the question is already answered there and the person is simply saving time by not typing out what already exists elsewhere.   If you've searched the docs and read the info already, then please include that in your post. That way you don't get linked back to the same part you're already confused about. Plus, letting us know when these docs can be improved is very useful.", 
            "title": "Be ok with links"
        }, 
        {
            "location": "/build/step12/#next-step-download-loop-code", 
            "text": "Now you are ready to move onto Step 13 to  Download Loop Code .", 
            "title": "Next Step: Download Loop Code"
        }, 
        {
            "location": "/build/step13/", 
            "text": "Step 13: Download Loop code\n\u2301\n\n\n\n\nTime Estimate\n\n\n\n\n1 minute to download Loop code\n\n\n10 minutes to read this page\n\n\n\n\n\n\n\n\nSummary\n\n\n\n\nIf you want to use Omnipod Loop, you should use the omnipod-testing branch\n\n\nDev branch technically has Omnipod support now, but is still considered less stable than omnipod-testing branch for the average user\n\n\nMedtronic pumps are supported on all branches of Loop\n\n\n\n\n\n\n\n\nFAQs\n\n\n\n\n\"What the heck is a branch?\"\n Let's use an analogy of when a book is published, sometimes a little later the author decides to make edits to the published book. They will have a \"mark-up\" copy of the original version and make edits. In this analogy, \nmaster branch\n is a published book. It is considered a stable, well-reviewed and tested version of the Loop app. As new features and improvements are made, they are made into the \"mark-up copy\" called \ndev branch\n. The dev branch will likely have some bugs and changes on a more frequent basis as the new edits are tested and revised. Other people may also have their own branches, based on the original published book since this is an open-source project, beyond just the Loop developers. There are no documents that track all the \"unofficial\" branches of Loop that others may have...there could be an endless amount, updated randomly, and not all of them in good working order so would be pointless to try to track them all.\n\n\n\"How can I tell which version I have downloaded if I'm unsure?\"\n The downloaded Loop folder's name will give you an indication of which branch you downloaded. The folder name will be in the format \nLoop-BranchName\n. \n\n\n\"When do I need to download new Loop code?\"\n Anytime you want to update your Loop app to get new features, you'll simply download the code again by clicking on the links below. The links always go to the most recent version of each of the branches. It's a good idea is to delete your old downloads before making a new one, just to avoid confusion.\n\n\n\n\n\n\nYou\u2019ll need to download the Loop code in order to build the app on your computer.  Wondering which to choose? Read the discussion below \nBEFORE\n clicking on one of the links to download.\n\n\n\n\n\n\nLoop: Master branch\n\n\nLoop: Dev branch\n\n\nLoop: Omnipod-testing branch\n\n\n\n\nLoop Branches\n\u2301\n\n\nMaster vs Dev? The Loop code resides in a website called \nGitHub\n. The various projects in GitHub use \"repositories\". A repository is kind of like a project's bookshelf, holding various books versions (aka branches) of a project. The master branch is considered a stable version of the project. Any new features or options are first tested in a public feature branch or dev (short for \"development\") branch of the Loop. If you hear of \"new features\" being tested, these are things that may eventually be merged into the master branch once any bugs are worked out. \n\n\nIf you want to build a version of Loop that supports Omnipod, you should select the Omnipod-testing branch download above.\n Technically the dev branch can work for Omnipod loopers now, but there are a lot of bugs actively being addressed in dev branch. It is considered more unstable than omnipod-testing branch at this time. You should only choose dev branch if you are able to watch your Loop carefully and have no problem updating often (like several times a week at the moment). \n\n\nIf you are choosing to use a testing branch, such as dev or omnipod-testing, please be prepared to update your Loop app to get bug fixes as they are released. As you encounter any bugs or glitches, please check the docs first to see if that issue is already answered. If you think you truly are seeing strange behavior, report the bug to Loop's GitHub by \ncreating a \"New Issue\" here\n. You can also look through the list of known issues already reported, as there is a chance your issue has already been seen by others. \n\n\nOk, now that you've read about the various branches, go ahead and pick a link to download.\n\n\nWhat about \"other branches\"\n\u2301\n\n\nThere are other branches and features (JoJo, IRC, Spike-Loop, etc) that other Loop users may develop from time to time. Those users may choose to share their work publicly or keep their work more quietly on their Github accounts. If someone develops a new feature for their own Loop use and they think it has wider value to others, they may submit a \"Pull Request\" asking the Loop developers to consider the new feature/code into Loop officially. Submittal of a Pull Request does not guarantee that the feature/code will eventually be incorporated into the main Loop versions.\n\n\nThese docs only refer to Loop branches maintained and reviewed by the Loop developers. It would be too difficult to track and index (much less test and explain) all the possible customized personal branches that could be out there for all the Loop users. \nIf you are interested in one of the non-official Loop branches, PLEASE use the search tool in Looped Group to find links where you can learn about those personal branches.\n\n\nOne note: I (Katie) have shared my JoJo branches in Looped Group on Facebook for quite some time.  JoJo branches have features that other people have created and I've simply packaged them together for my own personal use. I do expect that soon there will be no more JoJo branches and they will be retired, as the important core features will hopefully be available in Loop official branches. No promises, but we are working towards that. It will be so much easier to have no JoJo branch in the future...I'm really looking forward to that.\n\n\nStore and name your download properly\n\u2301\n\n\nIt is best practice to leave your Loop code in your Downloads folder. If you store your Loop code in a different folder than Downloads (such as your Documents folder or Desktop), make sure the specified folder is \nnot\n an iCloud drive. Storing your Loop code in an iCloud drive folder will prevent Loop from building successfully.  How do you know if a folder is an iCloud drive? Check your System Preferences. If your System Preferences for iCloud is set as shown below, your Documents and Desktop folders are iCloud drives and \nNOT\n appropriate places to save your Loop download.\n\n\n\n\n\n\n\nDepending on your browser and settings, your Loop download may or may not automatically unzip. If it does not unzip automatically, you can right-click on the zip file and choose to \"Open With\" Archive Utility. This will create a blue folder called \nLoop-master\n.  HOWEVER, if you already have an existing \nLoop-master\n folder from a previous download, the name of the next download will be something like \nLoop-master (1)\n.  The problem with that folder name is that it contains a space...and spaces in the name will cause your Loop build to fail. So, either delete old copies of Loop before downloading/unzipping -OR- rename the folder(s) to ensure that NO SPACES are in the folder name.\n\n\n\n\n\n\n\nNext Step: Build Loop app\n\u2301\n\n\nNow you are ready to move onto Step 14 to \nBuild Loop app\n.", 
            "title": "Step 13 Download Loop code"
        }, 
        {
            "location": "/build/step13/#step-13-download-loop-code", 
            "text": "Time Estimate   1 minute to download Loop code  10 minutes to read this page     Summary   If you want to use Omnipod Loop, you should use the omnipod-testing branch  Dev branch technically has Omnipod support now, but is still considered less stable than omnipod-testing branch for the average user  Medtronic pumps are supported on all branches of Loop     FAQs   \"What the heck is a branch?\"  Let's use an analogy of when a book is published, sometimes a little later the author decides to make edits to the published book. They will have a \"mark-up\" copy of the original version and make edits. In this analogy,  master branch  is a published book. It is considered a stable, well-reviewed and tested version of the Loop app. As new features and improvements are made, they are made into the \"mark-up copy\" called  dev branch . The dev branch will likely have some bugs and changes on a more frequent basis as the new edits are tested and revised. Other people may also have their own branches, based on the original published book since this is an open-source project, beyond just the Loop developers. There are no documents that track all the \"unofficial\" branches of Loop that others may have...there could be an endless amount, updated randomly, and not all of them in good working order so would be pointless to try to track them all.  \"How can I tell which version I have downloaded if I'm unsure?\"  The downloaded Loop folder's name will give you an indication of which branch you downloaded. The folder name will be in the format  Loop-BranchName .   \"When do I need to download new Loop code?\"  Anytime you want to update your Loop app to get new features, you'll simply download the code again by clicking on the links below. The links always go to the most recent version of each of the branches. It's a good idea is to delete your old downloads before making a new one, just to avoid confusion.    You\u2019ll need to download the Loop code in order to build the app on your computer.  Wondering which to choose? Read the discussion below  BEFORE  clicking on one of the links to download.    Loop: Master branch  Loop: Dev branch  Loop: Omnipod-testing branch", 
            "title": "Step 13: Download Loop code"
        }, 
        {
            "location": "/build/step13/#loop-branches", 
            "text": "Master vs Dev? The Loop code resides in a website called  GitHub . The various projects in GitHub use \"repositories\". A repository is kind of like a project's bookshelf, holding various books versions (aka branches) of a project. The master branch is considered a stable version of the project. Any new features or options are first tested in a public feature branch or dev (short for \"development\") branch of the Loop. If you hear of \"new features\" being tested, these are things that may eventually be merged into the master branch once any bugs are worked out.   If you want to build a version of Loop that supports Omnipod, you should select the Omnipod-testing branch download above.  Technically the dev branch can work for Omnipod loopers now, but there are a lot of bugs actively being addressed in dev branch. It is considered more unstable than omnipod-testing branch at this time. You should only choose dev branch if you are able to watch your Loop carefully and have no problem updating often (like several times a week at the moment).   If you are choosing to use a testing branch, such as dev or omnipod-testing, please be prepared to update your Loop app to get bug fixes as they are released. As you encounter any bugs or glitches, please check the docs first to see if that issue is already answered. If you think you truly are seeing strange behavior, report the bug to Loop's GitHub by  creating a \"New Issue\" here . You can also look through the list of known issues already reported, as there is a chance your issue has already been seen by others.   Ok, now that you've read about the various branches, go ahead and pick a link to download.", 
            "title": "Loop Branches"
        }, 
        {
            "location": "/build/step13/#what-about-other-branches", 
            "text": "There are other branches and features (JoJo, IRC, Spike-Loop, etc) that other Loop users may develop from time to time. Those users may choose to share their work publicly or keep their work more quietly on their Github accounts. If someone develops a new feature for their own Loop use and they think it has wider value to others, they may submit a \"Pull Request\" asking the Loop developers to consider the new feature/code into Loop officially. Submittal of a Pull Request does not guarantee that the feature/code will eventually be incorporated into the main Loop versions.  These docs only refer to Loop branches maintained and reviewed by the Loop developers. It would be too difficult to track and index (much less test and explain) all the possible customized personal branches that could be out there for all the Loop users.  If you are interested in one of the non-official Loop branches, PLEASE use the search tool in Looped Group to find links where you can learn about those personal branches.  One note: I (Katie) have shared my JoJo branches in Looped Group on Facebook for quite some time.  JoJo branches have features that other people have created and I've simply packaged them together for my own personal use. I do expect that soon there will be no more JoJo branches and they will be retired, as the important core features will hopefully be available in Loop official branches. No promises, but we are working towards that. It will be so much easier to have no JoJo branch in the future...I'm really looking forward to that.", 
            "title": "What about \"other branches\""
        }, 
        {
            "location": "/build/step13/#store-and-name-your-download-properly", 
            "text": "It is best practice to leave your Loop code in your Downloads folder. If you store your Loop code in a different folder than Downloads (such as your Documents folder or Desktop), make sure the specified folder is  not  an iCloud drive. Storing your Loop code in an iCloud drive folder will prevent Loop from building successfully.  How do you know if a folder is an iCloud drive? Check your System Preferences. If your System Preferences for iCloud is set as shown below, your Documents and Desktop folders are iCloud drives and  NOT  appropriate places to save your Loop download.    Depending on your browser and settings, your Loop download may or may not automatically unzip. If it does not unzip automatically, you can right-click on the zip file and choose to \"Open With\" Archive Utility. This will create a blue folder called  Loop-master .  HOWEVER, if you already have an existing  Loop-master  folder from a previous download, the name of the next download will be something like  Loop-master (1) .  The problem with that folder name is that it contains a space...and spaces in the name will cause your Loop build to fail. So, either delete old copies of Loop before downloading/unzipping -OR- rename the folder(s) to ensure that NO SPACES are in the folder name.", 
            "title": "Store and name your download properly"
        }, 
        {
            "location": "/build/step13/#next-step-build-loop-app", 
            "text": "Now you are ready to move onto Step 14 to  Build Loop app .", 
            "title": "Next Step: Build Loop app"
        }, 
        {
            "location": "/build/step14/", 
            "text": "Step 14: Build Loop app\n\u2301\n\n\n\n\nTime Estimate\n\n\n\n\n60-80 minutes if first time builder\n\n\n10-15 minutes if a repeat builder\n\n\n\n\n\n\n\n\nSummary\n\n\n\n\nOpen the Loop code you downloaded in Step 13\n\n\nConnect the phone to the computer\n\n\nSet the phone to not lock for awhile\n\n\nTrust the computer (on the phone)\n\n\nSelect your phone from the device list\n\n\nRegister the device\n\n\nSign the 4 targets\n\n\nPress the build button\n\n\nEnter computer password four times during the build\n\n\nWatch in awe as you just built your very own Loop app\n\n\n\n\n\n\n\n\nFAQs\n\n\n\n\n\"I got a build error! YIKES...what do I do?\"\n Check out the Build Errors page for all the solutions you'd need.\n\n\n\"The build seems to take a long time, is that normal?\"\n Yes, the first build of a new download will take quite a long time. Just be patient...one of the build steps to take \nmuch\n longer than all the others. The build process does always end in a success or failure message, so just wait it out until you see one of those displayed.\n\n\n\n\n\n\nOpen Loop project in Xcode\n\u2301\n\n\nGo to your Downloads folder, open your downloaded Loop code folder and double click on Loop.xcodeproj. For Omnipod Loop, the downloaded Loop code folder will likely be named \nLoop-omnipod-testing\n. If you downloaded dev branch, your folder would be named \nLoop-dev\n and similar for \nLoop-master\n download.\n\n\n\n\n\n\n\n\n\nA warning may appear asking if you really want to open it, click Open. Xcode will get itself organized, this may take a few minutes.  \n\n\n\n\n\n\n\n\n\nOnce Xcode has finished indexing, the Loop project's various folders and files will appear in the far left column. We are now going to make three important clicks:\n\n\n\n\n\n\nFirst click: At the very top of all the folders and files listed, click on the blue \"Loop\". This will populate the middle part of the Xcode window with some information. \nIf a couple of little boxes appear saying \"The folder \u201cDerivedWatchAssets.xcassets\u201d doesn\u2019t exist.\"...just click the ok buttons and ignore those. They will come up a couple of times during your build if you are using dev branch right now...don't worry, won't be a problem.\n\n\n\n\n\n\n\n\n\n\n\n\nSecond click: Now click on the box in the middle screen to reveal the targets column underneath that box. The four targets we will sign in the upcoming steps are now easily viewable.\n\n\n\n\n\n\n\n\n\n\n\n\nThird Click: Click on the \"Signing \n Capabilities\" up near the top of the screen. After you click on that, you should see a \"Signing\" section occupying the bulk of your middle window. If you are missing the \"Signing \n Capabilities\" section and didn't have to click somewhere else to see that part...that means you have missed updating to Xcode 11 from an older version of Xcode. Please go back and update Xcode now. Thanks.\n\n\n\n\n\n\n\n\n\n\n\n\nConnect your iPhone to Computer\n\u2301\n\n\nConnect your iPhone via cable to the computer, select your iPhone from the very top of the drop-down list.  Your \niPhone\u2019s personal name\n should be at the top of the list. Don't accidentally select the generic iOS simulators listed below your iPhone's name.  \n\n\n\n\nHelpful Tips\n\n\n\n\nIf your iPhone has a lock enabled, Xcode will not be able to install Loop app once your phone locks during the build progress.  Please temporarily disable the lock until you finish building Loop app.  Go to your iPhone Settings \n Display \n Brightness \n Auto-Lock and set it to \nNever\n.  You can reset your lock once Loop is done building onto the phone. If you can't or don't want to set the auto-lock to never, then please remember to tap your phone screen periodically during the build process later to keep it \"awake\".\n\n\nIf this is the first time your iPhone has been plugged into this computer, you will need to open the iPhone and select \"Trust this Computer\" before your device will be useable in the menu selection.\n\n\n\n\n\n\n\n\nMost Common Mistake\n\n\n\n\nThe most common mistake in this step is not selecting your actual phone as shown in the second screenshot below. The default list is just a name of general phone models under a subheading called \"iOS Simulators\"...don't be fooled by those. Your ACTUAL phone will be up above that list of all the various simulator phone models. Make sure you select your actual phone, not just a simulator phone model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSign Four Targets\n\u2301\n\n\nOnce you select your device (your iPhone's name), we are ready to start signing the four targets. We will start with the Loop target, the first one on the target list.  Under the \"Signing\" area, select the dropdown menu where it currently says \"none\". Choose your team that you'd like to sign with. If you select a team name with (personal team), your app will expire after 7 days. If you select a team name without that (personal team), your app will last a full year.  If you never signed up for a free developer account, you will not have a (personal team) showing. Make sure you keep the \"automatically manage signing\" box checked above the team selection area.\n\n\n\n\n\n\n\n\n\nOnce you choose your signing team, Xcode will automatically generate provisioning profiles and signing certificates.  If this is the first time you are building on this iPhone with this developer account, you may be prompted to register the device.  Simply click on the \"Register Device\" button to confirm.\n\n\n\n\n\n\n\n\n\n\n\nFree Developer Account Users: READ ME\n\n\nIf you are using a free developer account to sign your targets, you will need to do an extra step. As a free developer, you are restricted from building apps that have Siri capabilities built-in. Loop has Siri capabilities...so you will need to disable them before proceeding on with signing and building your app. Click on the small x next to the Siri line located at the bottom of your Signing \n Capabilities page. You need to do this in both the Loop and WatchApp Extension targets.\n\n\n\n\n\n\n\n\n\nA successfully signed target will have a provisioning profile and signing certificate similar to the screenshot below.  Click on each of the three remaining targets, and repeat the signing steps by choosing the same team name as you selected in the first target.\n\n\n\n\n\n\n\n\n\nCode Customizations\n\u2301\n\n\nNew Loop users\n: Customizations are not a required part of any Loop build. As you gain experience in how you use your Loop app, you may want to customize some of the features. You can always update your Loop app to add customizations at a later time. Really though, building with the standard, the default installation is JUST FINE.\n\n\nIf you want any custom configurations to your Loop or Loop Apple Watch apps, now is the time to make them before you finish with the last step of Loop installation on your iPhone. Follow the step-by-step instructions on the \nCode Customizations\n page. If you are a person familiar with Apple's Swift language, feel free to make your own customizations as well.\n\n\nWhen you've finished your customizations, come on back to this section and continue on with the rest of the build.\n\n\nPair your Apple Watch\n\u2301\n\n\nNew Apple Watch users\n: If you have an unopened Apple watch and want to use it with Loop, first pair the watch with the iPhone before continuing to the next steps.  If you get a new watch after building the Loop app, you'll need to redo your Loop build. (Don't worry, it's as easy as pressing play on your saved Loop project.)\n\n\nExisting Apple Watch users\n: Please update your watchOS prior to building the Loop app.  The current version of Loop requires watchOS 4.1 or newer.\n\n\n\n\nSeries 0 Apple Watch users: Read Me\n\n\nSeries 0 Apple Watch users\n: Please you will need to do a minor change in Loop code for your watch to use Loop. Select the WatchApp Extension target and under the 'Linked Frameworks and Libraries' section, click the '+' and type 'ClockKit' and press 'Add'. In the 'Status' column of the new row where ClockKit been added, change 'Required' to 'Optional'. You can move on with the rest of the instructions below now that you've completed that step. Whew, that old Apple Watch is still gonna work with this modern app.\n\n\n\n\n\n\n\n\n\nINTERMISSION\n\u2301\n\n\nSTOP STOP STOP\n\n\nYou guys...this is about safety.\n\n\nPeople keep ignoring this advice and I'm frankly a little stumped as to why. So, I'm moving this advice up in the process so that you don't ignore it.\n\n\n\n\n\n\n\n\n\n\n\nDO NOT WING THE SETUP\n\n\nI have warnings all over these instructions to \ncontinue to use these docs to finish setting up your app after it builds. DO NOT IGNORE THAT ADVICE. DO NOT ENTER ONE LOOP APP SETTING WITHOUT HAVING THE DOCS OPEN AND FOLLOWING ALONG AT THE SAME TIME.\n\n\n\n\nThe section in these docs called \"Set up App\" (See it? Look for it now...at the top of your webpage) needs to be used to input all the settings in your Loop app when it is done building. READ ALONG WITH THE DOCS to enter those settings. There are important safety tips and advice in there. And then after you finish setup, you need to read the \"Operate\" section...like BEFORE YOU OPERATE LOOP. Don't bolus for a meal, or enter a meal, until you've read through the Operate section. \n\n\nI'm worried you will fail to heed the advice about using the setup and operate sections. People have ignored it before. They skim read and think that's good enough. DO NOT BE LIKE THAT. Read each section. \n\n\nBUT, to mitigate the inevitable people who will ignore that advice....here's the two most important safety tips that I feel obliged to present out of order because (damn it), people will ignore my advice still.\n\n\n\n\nTOP TWO SAFETY MISTAKES YOU SHOULD AVOID\n\n\n\n\n\n\nDO NOT ENTER SETTINGS YOU ARE UNSURE OF. If you don't know your settings or know what the terms mean, stop. Read the docs, all the settings entries are explained there. Ask your endo if you don't have established values for those settings. Don't just guess an ISF, carb ratio, basal rate, or maximum delivery limits.\n\n\n\n\n\n\nDO NOT ENTER ACCIDENTAL DUPLICATE CARB ENTRIES. When you enter a meal in Loop and press the \nsave\n button...those carbs are saved. Let me repeat: THOSE CARBS ARE SAVED...even if you cancel the bolus for them. This is an automated insulin delivery system and if it thinks you have carbs on board, it will try to give you appropriate insulin for those carbs. Most common new user mistake: enters a meal, saves the carbs, has a change of heart or gets confused, and cancels the bolus screen...thinking they've just canceled the entire meal entry. Then they enter in a new carb entry. AND NOW, when you go to bolus...you'll be bolusing for the meal you wanted AND the meal you are mistakenly thinking you had \"canceled\". You didn't cancel that carb entry though, you had only canceled the bolus...you didn't \"unsave\" the carbs. If you make a mistake or change your mind on a carb entry after you pressed save, then tap the green carb chart in Loop's main display and edit or delete that entry. \nCANCELING A BOLUS DOES NOT CANCEL THE CARB ENTRY THAT GOT YOU THERE. You must delete or edit a saved carb entry if you no longer want Loop to provide insulin for it.\n\n\n\n\n\n\n\n\nOk, so now that I've got your attention, you can continue on with the last step in building you app...but remember, we just pinky swore that you would use the setup and operate sections to finish this all? Don't break my heart, keep your promise.\n\n\nBuild Loop\n\u2301\n\n\nHave you signed the four targets? Are you all done with any customizations? Has your Apple watch been paired and updated? Is your iPhone unlocked and plugged into the computer?\n\n\nLet\u2019s finish the installation of the Loop app onto your iPhone. Double-check to make sure your iPhone's name is still selected and then press the \u201cbuild\u201d button to start Xcode on its way. \n\n\n\n\n\n\n\n\n\nYou\u2019ll see the progression of the build in the status window (top middle of Xcode). New builds can take about 40-60 minutes depending on the speed of the computer and the internet.  \nJust be patient.\n  The progress will get \"stuck\" on one step/task for a very long time, and then the others will fly by when that one slow step is done. Not every step is equal in duration. Do not give up on the build. \nXcode will ALWAYS tell you eventually that the build either succeeded or failed...it will not just leave you hanging without an answer.\n  \n\n\n\n\nAre you the impatient type?\n\n\nIf you just simply can't bear the uncertainty of not seeing that things are progressing, you can take a peek \"under the hood\" and watch the individual build steps by clicking on the report navigator icon and then the build row at the top of the list. You can watch the slow list of scheme building while you wait.\n\n\n\n\n\n\n\n\n\n\n\nFirst-time builders\n\n\nBe aware though! Sometime during your first ever build on a computer, be ready for a codesign/keychain access prompt that you will see part-way through the build process.\n\n\n\n\n\n\n\n\nThis prompt above, when you see it, requires you to enter your computer password and then select \"Always Allow\". Normal behavior, this prompt will come up four times in a row even after you enter the correct password. In frustration, people think the prompt must be broken because it keeps reappearing and then people will press deny or cancel. \nDon't press deny.\n Keep entering your computer password and pressing the \"Always Allow\" button...as many times as it takes (four times to be exact; one for each target that Xcode is saving the password for). After four times of successful password entry, the build will keep proceeding.\n\n\n\n\nBuild Finished\n\u2301\n\n\n\n\nFirst time building on a new device?\n\n\nIf this is the first time you have installed an app on your iPhone using your developer account, you may get a warning like below after a successful build. Don't worry, Loop installed just fine on the phone but needs you to do an extra step on the phone before Loop app can open. Just follow the directions shown in the warning for what you need to do on your iPhone, and the issue resolves very quickly. Click ok and you can safely disconnect your iPhone from the computer.  (If you don\u2019t get a warning and the Loop app installs but does not open, you may still need to go to Settings-\nGeneral-\nDevice Management and enable trust for your Developer Account.)\n\n\n\n\n\n\n\n\n\n\n\nBUILD SUCCEEDED\n\n\nCongrats! If the build is successful, your brand new Loop app will have a screen open immediately on the iPhone asking about allowing Loop notifications and Health App access. \nAllow\n Loop to send you notifications. In the next screen that follows that, click on the \nTurn All Categories On\n line and then click \nAllow\n in the upper right corner. \n\n\n\n\n\n\n\n\nYou can unplug your phone from the computer now. And like we promised earlier, you will use the \nSetup App section of this website\n to keep proceeding safely.\n\n\n\n\n\n\nFAQ: But what about those yellow alerts that remain in Xcode? Should I worry about them?\n\n\nIf you see yellow alerts after your build is done...those are not an issue. Whether your build succeeded or failed...the yellow warnings play no role in either outcome. Don't try to resolve them or fret about them. They mean nothing to the successful use of your Loop app.\n\n\n\n\n \n\n\n\n\n\n\nBUILD FAILED\n\n\nDon't despair. Build failures are pretty easily fixed. If you get a message that your build failed and see \nRED ERROR\n messages, just go to the \nBuild Errors\n page to find the steps to fix your build error based on the message displayed.\n\n\n\n\n\n\n\n\n\n\nNext Step: Loop App Setup\n\u2301\n\n\nYou're done building your Loop app...\n\n\n\n\n\n\n\n\n\nRemember your promise though? You still owe me that you will use the \nSetup App\n section of this website now to keep proceeding safely.", 
            "title": "Step 14 Build Loop app"
        }, 
        {
            "location": "/build/step14/#step-14-build-loop-app", 
            "text": "Time Estimate   60-80 minutes if first time builder  10-15 minutes if a repeat builder     Summary   Open the Loop code you downloaded in Step 13  Connect the phone to the computer  Set the phone to not lock for awhile  Trust the computer (on the phone)  Select your phone from the device list  Register the device  Sign the 4 targets  Press the build button  Enter computer password four times during the build  Watch in awe as you just built your very own Loop app     FAQs   \"I got a build error! YIKES...what do I do?\"  Check out the Build Errors page for all the solutions you'd need.  \"The build seems to take a long time, is that normal?\"  Yes, the first build of a new download will take quite a long time. Just be patient...one of the build steps to take  much  longer than all the others. The build process does always end in a success or failure message, so just wait it out until you see one of those displayed.", 
            "title": "Step 14: Build Loop app"
        }, 
        {
            "location": "/build/step14/#open-loop-project-in-xcode", 
            "text": "Go to your Downloads folder, open your downloaded Loop code folder and double click on Loop.xcodeproj. For Omnipod Loop, the downloaded Loop code folder will likely be named  Loop-omnipod-testing . If you downloaded dev branch, your folder would be named  Loop-dev  and similar for  Loop-master  download.     A warning may appear asking if you really want to open it, click Open. Xcode will get itself organized, this may take a few minutes.       Once Xcode has finished indexing, the Loop project's various folders and files will appear in the far left column. We are now going to make three important clicks:    First click: At the very top of all the folders and files listed, click on the blue \"Loop\". This will populate the middle part of the Xcode window with some information.  If a couple of little boxes appear saying \"The folder \u201cDerivedWatchAssets.xcassets\u201d doesn\u2019t exist.\"...just click the ok buttons and ignore those. They will come up a couple of times during your build if you are using dev branch right now...don't worry, won't be a problem.       Second click: Now click on the box in the middle screen to reveal the targets column underneath that box. The four targets we will sign in the upcoming steps are now easily viewable.       Third Click: Click on the \"Signing   Capabilities\" up near the top of the screen. After you click on that, you should see a \"Signing\" section occupying the bulk of your middle window. If you are missing the \"Signing   Capabilities\" section and didn't have to click somewhere else to see that part...that means you have missed updating to Xcode 11 from an older version of Xcode. Please go back and update Xcode now. Thanks.", 
            "title": "Open Loop project in Xcode"
        }, 
        {
            "location": "/build/step14/#connect-your-iphone-to-computer", 
            "text": "Connect your iPhone via cable to the computer, select your iPhone from the very top of the drop-down list.  Your  iPhone\u2019s personal name  should be at the top of the list. Don't accidentally select the generic iOS simulators listed below your iPhone's name.     Helpful Tips   If your iPhone has a lock enabled, Xcode will not be able to install Loop app once your phone locks during the build progress.  Please temporarily disable the lock until you finish building Loop app.  Go to your iPhone Settings   Display   Brightness   Auto-Lock and set it to  Never .  You can reset your lock once Loop is done building onto the phone. If you can't or don't want to set the auto-lock to never, then please remember to tap your phone screen periodically during the build process later to keep it \"awake\".  If this is the first time your iPhone has been plugged into this computer, you will need to open the iPhone and select \"Trust this Computer\" before your device will be useable in the menu selection.     Most Common Mistake   The most common mistake in this step is not selecting your actual phone as shown in the second screenshot below. The default list is just a name of general phone models under a subheading called \"iOS Simulators\"...don't be fooled by those. Your ACTUAL phone will be up above that list of all the various simulator phone models. Make sure you select your actual phone, not just a simulator phone model.", 
            "title": "Connect your iPhone to Computer"
        }, 
        {
            "location": "/build/step14/#sign-four-targets", 
            "text": "Once you select your device (your iPhone's name), we are ready to start signing the four targets. We will start with the Loop target, the first one on the target list.  Under the \"Signing\" area, select the dropdown menu where it currently says \"none\". Choose your team that you'd like to sign with. If you select a team name with (personal team), your app will expire after 7 days. If you select a team name without that (personal team), your app will last a full year.  If you never signed up for a free developer account, you will not have a (personal team) showing. Make sure you keep the \"automatically manage signing\" box checked above the team selection area.     Once you choose your signing team, Xcode will automatically generate provisioning profiles and signing certificates.  If this is the first time you are building on this iPhone with this developer account, you may be prompted to register the device.  Simply click on the \"Register Device\" button to confirm.      Free Developer Account Users: READ ME  If you are using a free developer account to sign your targets, you will need to do an extra step. As a free developer, you are restricted from building apps that have Siri capabilities built-in. Loop has Siri capabilities...so you will need to disable them before proceeding on with signing and building your app. Click on the small x next to the Siri line located at the bottom of your Signing   Capabilities page. You need to do this in both the Loop and WatchApp Extension targets.     A successfully signed target will have a provisioning profile and signing certificate similar to the screenshot below.  Click on each of the three remaining targets, and repeat the signing steps by choosing the same team name as you selected in the first target.", 
            "title": "Sign Four Targets"
        }, 
        {
            "location": "/build/step14/#code-customizations", 
            "text": "New Loop users : Customizations are not a required part of any Loop build. As you gain experience in how you use your Loop app, you may want to customize some of the features. You can always update your Loop app to add customizations at a later time. Really though, building with the standard, the default installation is JUST FINE.  If you want any custom configurations to your Loop or Loop Apple Watch apps, now is the time to make them before you finish with the last step of Loop installation on your iPhone. Follow the step-by-step instructions on the  Code Customizations  page. If you are a person familiar with Apple's Swift language, feel free to make your own customizations as well.  When you've finished your customizations, come on back to this section and continue on with the rest of the build.", 
            "title": "Code Customizations"
        }, 
        {
            "location": "/build/step14/#pair-your-apple-watch", 
            "text": "New Apple Watch users : If you have an unopened Apple watch and want to use it with Loop, first pair the watch with the iPhone before continuing to the next steps.  If you get a new watch after building the Loop app, you'll need to redo your Loop build. (Don't worry, it's as easy as pressing play on your saved Loop project.)  Existing Apple Watch users : Please update your watchOS prior to building the Loop app.  The current version of Loop requires watchOS 4.1 or newer.   Series 0 Apple Watch users: Read Me  Series 0 Apple Watch users : Please you will need to do a minor change in Loop code for your watch to use Loop. Select the WatchApp Extension target and under the 'Linked Frameworks and Libraries' section, click the '+' and type 'ClockKit' and press 'Add'. In the 'Status' column of the new row where ClockKit been added, change 'Required' to 'Optional'. You can move on with the rest of the instructions below now that you've completed that step. Whew, that old Apple Watch is still gonna work with this modern app.", 
            "title": "Pair your Apple Watch"
        }, 
        {
            "location": "/build/step14/#intermission", 
            "text": "STOP STOP STOP  You guys...this is about safety.  People keep ignoring this advice and I'm frankly a little stumped as to why. So, I'm moving this advice up in the process so that you don't ignore it.      DO NOT WING THE SETUP  I have warnings all over these instructions to  continue to use these docs to finish setting up your app after it builds. DO NOT IGNORE THAT ADVICE. DO NOT ENTER ONE LOOP APP SETTING WITHOUT HAVING THE DOCS OPEN AND FOLLOWING ALONG AT THE SAME TIME.   The section in these docs called \"Set up App\" (See it? Look for it now...at the top of your webpage) needs to be used to input all the settings in your Loop app when it is done building. READ ALONG WITH THE DOCS to enter those settings. There are important safety tips and advice in there. And then after you finish setup, you need to read the \"Operate\" section...like BEFORE YOU OPERATE LOOP. Don't bolus for a meal, or enter a meal, until you've read through the Operate section.   I'm worried you will fail to heed the advice about using the setup and operate sections. People have ignored it before. They skim read and think that's good enough. DO NOT BE LIKE THAT. Read each section.   BUT, to mitigate the inevitable people who will ignore that advice....here's the two most important safety tips that I feel obliged to present out of order because (damn it), people will ignore my advice still.   TOP TWO SAFETY MISTAKES YOU SHOULD AVOID    DO NOT ENTER SETTINGS YOU ARE UNSURE OF. If you don't know your settings or know what the terms mean, stop. Read the docs, all the settings entries are explained there. Ask your endo if you don't have established values for those settings. Don't just guess an ISF, carb ratio, basal rate, or maximum delivery limits.    DO NOT ENTER ACCIDENTAL DUPLICATE CARB ENTRIES. When you enter a meal in Loop and press the  save  button...those carbs are saved. Let me repeat: THOSE CARBS ARE SAVED...even if you cancel the bolus for them. This is an automated insulin delivery system and if it thinks you have carbs on board, it will try to give you appropriate insulin for those carbs. Most common new user mistake: enters a meal, saves the carbs, has a change of heart or gets confused, and cancels the bolus screen...thinking they've just canceled the entire meal entry. Then they enter in a new carb entry. AND NOW, when you go to bolus...you'll be bolusing for the meal you wanted AND the meal you are mistakenly thinking you had \"canceled\". You didn't cancel that carb entry though, you had only canceled the bolus...you didn't \"unsave\" the carbs. If you make a mistake or change your mind on a carb entry after you pressed save, then tap the green carb chart in Loop's main display and edit or delete that entry.  CANCELING A BOLUS DOES NOT CANCEL THE CARB ENTRY THAT GOT YOU THERE. You must delete or edit a saved carb entry if you no longer want Loop to provide insulin for it.     Ok, so now that I've got your attention, you can continue on with the last step in building you app...but remember, we just pinky swore that you would use the setup and operate sections to finish this all? Don't break my heart, keep your promise.", 
            "title": "INTERMISSION"
        }, 
        {
            "location": "/build/step14/#build-loop", 
            "text": "Have you signed the four targets? Are you all done with any customizations? Has your Apple watch been paired and updated? Is your iPhone unlocked and plugged into the computer?  Let\u2019s finish the installation of the Loop app onto your iPhone. Double-check to make sure your iPhone's name is still selected and then press the \u201cbuild\u201d button to start Xcode on its way.      You\u2019ll see the progression of the build in the status window (top middle of Xcode). New builds can take about 40-60 minutes depending on the speed of the computer and the internet.   Just be patient.   The progress will get \"stuck\" on one step/task for a very long time, and then the others will fly by when that one slow step is done. Not every step is equal in duration. Do not give up on the build.  Xcode will ALWAYS tell you eventually that the build either succeeded or failed...it will not just leave you hanging without an answer.      Are you the impatient type?  If you just simply can't bear the uncertainty of not seeing that things are progressing, you can take a peek \"under the hood\" and watch the individual build steps by clicking on the report navigator icon and then the build row at the top of the list. You can watch the slow list of scheme building while you wait.      First-time builders  Be aware though! Sometime during your first ever build on a computer, be ready for a codesign/keychain access prompt that you will see part-way through the build process.     This prompt above, when you see it, requires you to enter your computer password and then select \"Always Allow\". Normal behavior, this prompt will come up four times in a row even after you enter the correct password. In frustration, people think the prompt must be broken because it keeps reappearing and then people will press deny or cancel.  Don't press deny.  Keep entering your computer password and pressing the \"Always Allow\" button...as many times as it takes (four times to be exact; one for each target that Xcode is saving the password for). After four times of successful password entry, the build will keep proceeding.", 
            "title": "Build Loop"
        }, 
        {
            "location": "/build/step14/#build-finished", 
            "text": "First time building on a new device?  If this is the first time you have installed an app on your iPhone using your developer account, you may get a warning like below after a successful build. Don't worry, Loop installed just fine on the phone but needs you to do an extra step on the phone before Loop app can open. Just follow the directions shown in the warning for what you need to do on your iPhone, and the issue resolves very quickly. Click ok and you can safely disconnect your iPhone from the computer.  (If you don\u2019t get a warning and the Loop app installs but does not open, you may still need to go to Settings- General- Device Management and enable trust for your Developer Account.)      BUILD SUCCEEDED  Congrats! If the build is successful, your brand new Loop app will have a screen open immediately on the iPhone asking about allowing Loop notifications and Health App access.  Allow  Loop to send you notifications. In the next screen that follows that, click on the  Turn All Categories On  line and then click  Allow  in the upper right corner.      You can unplug your phone from the computer now. And like we promised earlier, you will use the  Setup App section of this website  to keep proceeding safely.    FAQ: But what about those yellow alerts that remain in Xcode? Should I worry about them?  If you see yellow alerts after your build is done...those are not an issue. Whether your build succeeded or failed...the yellow warnings play no role in either outcome. Don't try to resolve them or fret about them. They mean nothing to the successful use of your Loop app.  \n     BUILD FAILED  Don't despair. Build failures are pretty easily fixed. If you get a message that your build failed and see  RED ERROR  messages, just go to the  Build Errors  page to find the steps to fix your build error based on the message displayed.", 
            "title": "Build Finished"
        }, 
        {
            "location": "/build/step14/#next-step-loop-app-setup", 
            "text": "You're done building your Loop app...     Remember your promise though? You still owe me that you will use the  Setup App  section of this website now to keep proceeding safely.", 
            "title": "Next Step: Loop App Setup"
        }, 
        {
            "location": "/build/build_errors/", 
            "text": "Build Errors\n\u2301\n\n\nThere are two types of build errors that happen; they are yellow warnings and red alerts. You'll see the warnings and alerts in the left-hand column of the Xcode window.\n\n\nYellow warnings\n do not cause the build to fail, those are just warnings.  Occasionally, a Loop version may have some minor discrepancies that cause a yellow alert...ignore those. Do not try to do anything to fix those...leave them alone.\n\n\nRed error alerts\n \n will have to be resolved before you can successfully build the Loop app. The steps below explain how to resolve them based on the messages you are seeing.\n\n\nStart with the obvious error causes\n\u2301\n\n\nBefore you start trying to resolve your red errors...start with the most obvious things that can cause a red error message:\n\n\n\n\n\n\nDO NOT USE BETA VERSIONS\n  If you are using an iOS beta version or an Xcode beta version, your Loop will not build. If you have Xcode beta, uninstall it and get regular Xcode. If you have iOS beta on your iPhone, you will need to restore your iPhone entirely. You can restore to either (1) the last non-beta backup version you saved or (2) restore as a new iPhone (default settings). Yes, deleting iOS beta is a pain...so don't install it in the first place.\n\n\n\n\n\n\nDid you check for updates?\n \n\n\n\n\nMinimum Versions\n\n\nIf you are building for Omnipod Loop, Loop dev, or have iOS 13 installed, make sure you have macOS 10.14.3 (Mojave) and Xcode 11 at a minimum. You will not be able to build for those without the minimum updates. Download Xcode 11 from the App Store to replace your Xcode 11 GM if you downloaded that previously.\n\n\n\n\n\n\n\n\nDid you reboot your computer after updating Xcode?\n Yup...that was in the message on the Update Loop page...did you ignore it? ;)\n\n\n\n\n\n\nGet a fresh download of Loop code, don't just recycle an old download that you built with a long time ago.\n That old version may not be compatible with new iOS and new Xcode versions.\n\n\n\n\n\n\nIf you are using a free developer account, you need to have finished the \nremoval of Siri capabilities\n.\n\n\n\n\n\n\nPosting for help\n\u2301\n\n\nSTOP!!  Read this section! Important!\n\n\nBefore you post in Zulipchat or Looped Group asking for help with build errors, \ndo your work first\n. The build errors listed below (and the obvious checks listed above) are very successful \nIF PEOPLE READ THIS PAGE\n. The volunteer group of people answering questions in Looped and Zulipchat would love to spend more time on improving Loop in other ways than answering build error questions that can be answered by using this page as a first step.\n\n\nTherefore, first use the error topics (listed in sections below) to try to resolve your build error yourself. Then, if you need to post for help because this page did not fix your problem, you'll need to include information with the post so we (the troubleshooters) know you read this page and where you are in your troubleshooting attempts\n\n\n\n\nMust include in your post\n\n\n\n\nThe version of Xcode you are using\n\n\nThe version of Loop you are building with\n\n\nThe version of iOS on your Loop iPhone\n\n\nSpecify if you are using a free or paid account, and if free...confirm you deleted Siri capabilities\n\n\nConfirm you are not using an Xcode beta or iOS beta version (so we don't have to ask, actually type \"I am not using beta versions\"...this will save a lot of time and hassle)\n\n\nScreenshots of your WHOLE Xcode window and/or Terminal window showing your error and any messages you've seen while working through the build errors/solutions.\n\n\nState which fixes from the below list that you have already tried AND post the screenshots of the results of those fix attempts.\n\n\n\n\n\n\nHelpful tip #1: Shift-Command-4 will give you a little screenshot tool that you can click-and-drag to highlight the area you'd like to screenshot. When you release the drag, the screenshot will save to your desktop so you can include it in your post. Phone photos of your computer screen won't likely be of sufficient clarity to read the needed information.\n\n\nHelpful tip #2: When taking screenshots for a post, include the whole Xcode window. Don't zoom in on any one area. There is information in all parts of the Xcode window that are helpful to the troubleshooters, so it saves time to see the whole Xcode window at once.\n\n\nFind your error message(s)\n\u2301\n\n\nTo begin fixing the error (assuming you didn't have one of the obvious issues listed above), the key is to (1) \nREAD THE ERROR MESSAGE\n and then (2) \nFIND YOUR MESSAGE IN ONE OF THE TOPICS BELOW\n.\n\n\nHere's a super tip: Merely seeing the \"exit code\" in Xcode is not enough information to discern what error is causing your build to fail. Look at the detailed message to really help guide your search for the matching solution.\n\n\nNotice how in the screenshots in the topics below, there are red circles highlighting certain error messages? Read your error messages similar to where those red circles are in the screenshots below. Once you find your error message (hint: not \"exit code\"), you can either:\n\n\n\n\n\n\nTake the error message from your Xcode screen and use LoopDoc's search function to enter in some of that phrase to bring up the appropriate solution topic, or\n\n\n\n\n\n\nTake the error message from your Xcode screen and read through EACH OF THE TOPICS BELOW. Check each of the red circles to see if you have a match. Kind of like a matching puzzle.\n\n\n\n\n\n\nFor example, if you see \"Invalid active developer path (/Library/Developer/CommandLineTools)\" in your error message, use the search tool in LoopDocs with simply \"invalid active\". You will get a couple of links and one is the Command Line Tools fix for that error message. Click on the link and you'll find your solution.\n\n\n\n\n\n\n\n\n\n\nNo such module 'LoopKit' or similar message\n\u2301\n\n\nIf you see a \nCartfile failure\n and several other red errors (in particular saying there is \"no such module 'LoopKit'\"), double click on the Cartfile error message.  If it says that the build failed in one of the schemes, as shown in the screenshot below, then you need to open the Terminal app.  You will use the command \ncd ~/downloads/loop-master \n carthage update\n.  NOTE:  YOU MAY HAVE TO CHANGE THE COMMAND SLIGHTLY.  If your loop folder isn't named loop-master and instead is loop-master-2 or loop-dev or some other folder name...change the command to match your folder's actual name. \n\n\n\n\n\n\n\n\n\n\nCarthage update will take about 15-25 minutes to run successfully.  A successful carthage update will look like the following:\n\n\n\n\n\n\n\n\n\n\nOnce carthage update has run successfully, you can return to Xcode and press the build button again.  Your project should build successfully.\n\n\nIf your carthage update fails, try opening the Terminal app and running these commands to clear out your carthage cache and saved derived data in Xcode:\n\n\nrm -rf ~/Library/Caches/org.carthage.CarthageKit\n and \nrm -rf ~/Library/Developer/Xcode/DerivedData\n\n\nAfter running those commands, retry the \ncd ~/downloads/loop-master \n carthage update\n (remembering to update the name of your Loop download folder, as needed).\n\n\nCarthage version outdated\n\u2301\n\n\nIf you see a message about updating carthage version, open Terminal app and enter the following command \nbrew update \n brew upgrade carthage\n\n\n\n\n\n\n\n\n\n\nMissing Command Line Tools\n\u2301\n\n\nError message:  \"\nInvalid active developer path (/Library/Developer/CommandLineTools)\n\" or \"\nunable to find utility \"xcodebuild\", not a developer tool or in PATH\n\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution: Go to your Xcode preferences and under the Locations tab, select \"Xcode 11\" in the dropdown menu for Command Line Tools.\n\n\n\n\n\n\n\n\n\n\nPending Certificate Request\n\u2301\n\n\nError message: \"You already have a current iOS Development certificate or a pending certificate request.\"\n\n\n\n\n\n\n\n\n\nSolution: This error message has just recently started to appear for some new Loop builders. To resolve the issue, please log in to your Developer account at \ndeveloper.apple.com\n and then click on \"Certificates, Identifiers \n Profiles\".  Under that screen, you will see \"Development\" under the \"Certificates\" section in the column on the left.  You will need to click on the certificates, and choose to \"revoke\" from the options that show after you click on the certificate. Confirm the warning message that will appear asking \"Do you want to revoke the certificate?\"\n\n\n\n\n\n\n\n\n\nAfter you do that, return to Xcode and open up Xcode preferences.  Under the Accounts section of Preferences, click on the minus sign to delete your Apple ID.\n\n\n\n\n\n\n\n\n\nRe-enter your Apple ID (yes...add that account right back that you literally just deleted), return to your Loop's target signing areas in Xcode and your error message should have resolved itself now as a new certificate will have been issued and a provisioning profile should have been created automatically.\n\n\nFor double measure, you can verify that the iOS development certificates are all in good working order by clicking on your \"Manage Certificates\" in your Xcode Preferences, Accounts and viewing the iOS development Certificates.  You should have one for your account that has a clean status similar to the screenshot below.\n\n\n\n\n\n\n\n\n\nCommand CodeSign failed\n\u2301\n\n\nError message: \"\nerrSecInternalComponent,  Command CodeSign failed with a nonzero exit code\n\"\n\n\n\n\n\n\n\n\n\n\nSolution:  This error message is likely due to inadvertently saying \"no\" to allowing Keychain Access or changing your computer or AppleID password. Regardless, the solution is as follows:\n\n\n\n\nClose Xcode\n\n\nOpen your Keychain Access application (found in Applications within the Utilities folder, similar to where Terminal app is found)\n\n\nIn the upper left corner of keychain access, make sure you have the keychain \nlogin\n highlighted and then click the large lock icon above the keychains area (High Sierra users) or right-click the lock next to the \nlogin\n (Mojave macOS users).  Click the lock closed, and then click the lock to open it again. You will be prompted for a password.  Enter your computer admin password.  Close Keychain Access app.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOpen your Loop project again in Xcode.\n\n\nIn the main Xcode menu (grey menu bar at the very top of your Apple display area), select the word \nProduct\n and then select the option for \nClean\n. (keyboard shortcut is shift-command-k)\n\n\nNow try rebuilding your Loop app.  If you ever get prompted again to allow Xcode access to Keychain, make sure to Always Allow.\n\n\n\n\nDeveloper License Update\n\u2301\n\n\nError message: \"\nThe Apple Developer Program License Agreement has been updated,  In order to access certain membership resources, you must accept the latest license agreement.\n\"\n\n\nSolution: You'll need to log onto your developer account at \ndeveloper.apple.com\n and accept the latest license agreement.\n\n\n\n\n\n\n\nUnrecognized arguments: --cache-builds\n\u2301\n\n\nError message: \"\nUnrecognized arguments: --cache-builds\n\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSolution: Please open your Terminal app found in the Applications\nUtilities folder and then enter \n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n  Confirm installation by pressing enter, and then typing in your computer password.  When the installation finishes, use the command \nbrew link --overwrite carthage\n.  After those two steps, you can close out Terminal app, return to Xcode and press the build/play button again.\n\n\nAbort with Payload\n\u2301\n\n\nError message: \"\nAbort with payload\n\"  Your app will only open briefly with a white screen and then close, if you build with this error.\n\n\n\n\n\n\nSolution: This error message is caused by either\n\n\n\n\nSaving Loop download folder into an iCloud mapped drive, or\n\n\nHaving a space in the name of your Loop download folder.\n\n\n\n\nRename the folder to have no spaces and/or move it back to the Downloads folder, then rebuild.\n\n\nApple Watch: Loop app not appearing\n\u2301\n\n\nError: \nApple watch app is not appearing\n.\n\n\nSolution: Usually because you have not updated to watchOS prior to when you built Loop, or you didn't have your Apple watch paired at the time of building Loop.  Don't forget to open the iPhone's Watch app, select My Watch tab on the bottom left, scroll all the way down, and click \nInstall\n for the Loop app listed at the very bottom under \"available apps\".\n\n\nApple Watch: Loop app not installing\n\u2301\n\n\nError: \nThe Loop app appears on the list of apps available to install on the watch, but when you press \"install\", and it goes through the animation of filling in the circle while it's installing, but then at the end it just toggles back to saying \"INSTALL\"\n.\n\n\nSolution:  Plug your iPhone into the computer and start Xcode.  On your watch, look for a prompt that says \"Trust this computer\".  Scroll down on the watch face and select the \"Trust\" button.  \n\n\nNow we need to do one step before rebuilding Loop app again. Go to the top menu bar of Xcode and select \"Clean Build Folder\" from the Product menu option. Rebuild your Loop app. \n\n\nFor an unknown reason (developers are working on fixing it currently), if you do repeated builds in the same Loop project folder...the watch app can fail to install properly after the first build. Therefore, a simple \"Clean Build Folder\" will reset the folder back to new and you'll be able to install the watch after that fresh build.\n\n\nXcode path not set correctly after using Xcode 11 GM\n\u2301\n\n\nError: \nxcrun: error: active developer path (\"/Users/pops/Downloads/Xcode.app/Contents/Developer\") does not exist\nUse sudo xcode-select --switch path/to/Xcode.app to specify the Xcode that you wish to use for command line developer tools, or use xcode-select --install to install the standalone command line developer tools.\nSee man xcode-select for more details.\n.\n\n\nPlease note that the path in the example error above is just an example. Your path in the error may be different.\n\n\nSolution:  This may occur if you have installed Xcode 11 GM before you installed the updated general release version. So, Xcode may get confused on which path to be using. Run the command below:\n\n\nsudo xcode-select --switch /Applications/Xcode.app\n\n\nEnter your password that you use to login to your Mac with and press Enter. You may now proceed with your build commands.", 
            "title": "Oh dear! Build errors?"
        }, 
        {
            "location": "/build/build_errors/#build-errors", 
            "text": "There are two types of build errors that happen; they are yellow warnings and red alerts. You'll see the warnings and alerts in the left-hand column of the Xcode window.  Yellow warnings  do not cause the build to fail, those are just warnings.  Occasionally, a Loop version may have some minor discrepancies that cause a yellow alert...ignore those. Do not try to do anything to fix those...leave them alone.  Red error alerts    will have to be resolved before you can successfully build the Loop app. The steps below explain how to resolve them based on the messages you are seeing.", 
            "title": "Build Errors"
        }, 
        {
            "location": "/build/build_errors/#start-with-the-obvious-error-causes", 
            "text": "Before you start trying to resolve your red errors...start with the most obvious things that can cause a red error message:    DO NOT USE BETA VERSIONS   If you are using an iOS beta version or an Xcode beta version, your Loop will not build. If you have Xcode beta, uninstall it and get regular Xcode. If you have iOS beta on your iPhone, you will need to restore your iPhone entirely. You can restore to either (1) the last non-beta backup version you saved or (2) restore as a new iPhone (default settings). Yes, deleting iOS beta is a pain...so don't install it in the first place.    Did you check for updates?     Minimum Versions  If you are building for Omnipod Loop, Loop dev, or have iOS 13 installed, make sure you have macOS 10.14.3 (Mojave) and Xcode 11 at a minimum. You will not be able to build for those without the minimum updates. Download Xcode 11 from the App Store to replace your Xcode 11 GM if you downloaded that previously.     Did you reboot your computer after updating Xcode?  Yup...that was in the message on the Update Loop page...did you ignore it? ;)    Get a fresh download of Loop code, don't just recycle an old download that you built with a long time ago.  That old version may not be compatible with new iOS and new Xcode versions.    If you are using a free developer account, you need to have finished the  removal of Siri capabilities .", 
            "title": "Start with the obvious error causes"
        }, 
        {
            "location": "/build/build_errors/#posting-for-help", 
            "text": "STOP!!  Read this section! Important!  Before you post in Zulipchat or Looped Group asking for help with build errors,  do your work first . The build errors listed below (and the obvious checks listed above) are very successful  IF PEOPLE READ THIS PAGE . The volunteer group of people answering questions in Looped and Zulipchat would love to spend more time on improving Loop in other ways than answering build error questions that can be answered by using this page as a first step.  Therefore, first use the error topics (listed in sections below) to try to resolve your build error yourself. Then, if you need to post for help because this page did not fix your problem, you'll need to include information with the post so we (the troubleshooters) know you read this page and where you are in your troubleshooting attempts   Must include in your post   The version of Xcode you are using  The version of Loop you are building with  The version of iOS on your Loop iPhone  Specify if you are using a free or paid account, and if free...confirm you deleted Siri capabilities  Confirm you are not using an Xcode beta or iOS beta version (so we don't have to ask, actually type \"I am not using beta versions\"...this will save a lot of time and hassle)  Screenshots of your WHOLE Xcode window and/or Terminal window showing your error and any messages you've seen while working through the build errors/solutions.  State which fixes from the below list that you have already tried AND post the screenshots of the results of those fix attempts.    Helpful tip #1: Shift-Command-4 will give you a little screenshot tool that you can click-and-drag to highlight the area you'd like to screenshot. When you release the drag, the screenshot will save to your desktop so you can include it in your post. Phone photos of your computer screen won't likely be of sufficient clarity to read the needed information.  Helpful tip #2: When taking screenshots for a post, include the whole Xcode window. Don't zoom in on any one area. There is information in all parts of the Xcode window that are helpful to the troubleshooters, so it saves time to see the whole Xcode window at once.", 
            "title": "Posting for help"
        }, 
        {
            "location": "/build/build_errors/#find-your-error-messages", 
            "text": "To begin fixing the error (assuming you didn't have one of the obvious issues listed above), the key is to (1)  READ THE ERROR MESSAGE  and then (2)  FIND YOUR MESSAGE IN ONE OF THE TOPICS BELOW .  Here's a super tip: Merely seeing the \"exit code\" in Xcode is not enough information to discern what error is causing your build to fail. Look at the detailed message to really help guide your search for the matching solution.  Notice how in the screenshots in the topics below, there are red circles highlighting certain error messages? Read your error messages similar to where those red circles are in the screenshots below. Once you find your error message (hint: not \"exit code\"), you can either:    Take the error message from your Xcode screen and use LoopDoc's search function to enter in some of that phrase to bring up the appropriate solution topic, or    Take the error message from your Xcode screen and read through EACH OF THE TOPICS BELOW. Check each of the red circles to see if you have a match. Kind of like a matching puzzle.    For example, if you see \"Invalid active developer path (/Library/Developer/CommandLineTools)\" in your error message, use the search tool in LoopDocs with simply \"invalid active\". You will get a couple of links and one is the Command Line Tools fix for that error message. Click on the link and you'll find your solution.", 
            "title": "Find your error message(s)"
        }, 
        {
            "location": "/build/build_errors/#no-such-module-loopkit-or-similar-message", 
            "text": "If you see a  Cartfile failure  and several other red errors (in particular saying there is \"no such module 'LoopKit'\"), double click on the Cartfile error message.  If it says that the build failed in one of the schemes, as shown in the screenshot below, then you need to open the Terminal app.  You will use the command  cd ~/downloads/loop-master   carthage update .  NOTE:  YOU MAY HAVE TO CHANGE THE COMMAND SLIGHTLY.  If your loop folder isn't named loop-master and instead is loop-master-2 or loop-dev or some other folder name...change the command to match your folder's actual name.       Carthage update will take about 15-25 minutes to run successfully.  A successful carthage update will look like the following:      Once carthage update has run successfully, you can return to Xcode and press the build button again.  Your project should build successfully.  If your carthage update fails, try opening the Terminal app and running these commands to clear out your carthage cache and saved derived data in Xcode:  rm -rf ~/Library/Caches/org.carthage.CarthageKit  and  rm -rf ~/Library/Developer/Xcode/DerivedData  After running those commands, retry the  cd ~/downloads/loop-master   carthage update  (remembering to update the name of your Loop download folder, as needed).", 
            "title": "No such module 'LoopKit' or similar message"
        }, 
        {
            "location": "/build/build_errors/#carthage-version-outdated", 
            "text": "If you see a message about updating carthage version, open Terminal app and enter the following command  brew update   brew upgrade carthage", 
            "title": "Carthage version outdated"
        }, 
        {
            "location": "/build/build_errors/#missing-command-line-tools", 
            "text": "Error message:  \" Invalid active developer path (/Library/Developer/CommandLineTools) \" or \" unable to find utility \"xcodebuild\", not a developer tool or in PATH \"          Solution: Go to your Xcode preferences and under the Locations tab, select \"Xcode 11\" in the dropdown menu for Command Line Tools.", 
            "title": "Missing Command Line Tools"
        }, 
        {
            "location": "/build/build_errors/#pending-certificate-request", 
            "text": "Error message: \"You already have a current iOS Development certificate or a pending certificate request.\"     Solution: This error message has just recently started to appear for some new Loop builders. To resolve the issue, please log in to your Developer account at  developer.apple.com  and then click on \"Certificates, Identifiers   Profiles\".  Under that screen, you will see \"Development\" under the \"Certificates\" section in the column on the left.  You will need to click on the certificates, and choose to \"revoke\" from the options that show after you click on the certificate. Confirm the warning message that will appear asking \"Do you want to revoke the certificate?\"     After you do that, return to Xcode and open up Xcode preferences.  Under the Accounts section of Preferences, click on the minus sign to delete your Apple ID.     Re-enter your Apple ID (yes...add that account right back that you literally just deleted), return to your Loop's target signing areas in Xcode and your error message should have resolved itself now as a new certificate will have been issued and a provisioning profile should have been created automatically.  For double measure, you can verify that the iOS development certificates are all in good working order by clicking on your \"Manage Certificates\" in your Xcode Preferences, Accounts and viewing the iOS development Certificates.  You should have one for your account that has a clean status similar to the screenshot below.", 
            "title": "Pending Certificate Request"
        }, 
        {
            "location": "/build/build_errors/#command-codesign-failed", 
            "text": "Error message: \" errSecInternalComponent,  Command CodeSign failed with a nonzero exit code \"      Solution:  This error message is likely due to inadvertently saying \"no\" to allowing Keychain Access or changing your computer or AppleID password. Regardless, the solution is as follows:   Close Xcode  Open your Keychain Access application (found in Applications within the Utilities folder, similar to where Terminal app is found)  In the upper left corner of keychain access, make sure you have the keychain  login  highlighted and then click the large lock icon above the keychains area (High Sierra users) or right-click the lock next to the  login  (Mojave macOS users).  Click the lock closed, and then click the lock to open it again. You will be prompted for a password.  Enter your computer admin password.  Close Keychain Access app.           Open your Loop project again in Xcode.  In the main Xcode menu (grey menu bar at the very top of your Apple display area), select the word  Product  and then select the option for  Clean . (keyboard shortcut is shift-command-k)  Now try rebuilding your Loop app.  If you ever get prompted again to allow Xcode access to Keychain, make sure to Always Allow.", 
            "title": "Command CodeSign failed"
        }, 
        {
            "location": "/build/build_errors/#developer-license-update", 
            "text": "Error message: \" The Apple Developer Program License Agreement has been updated,  In order to access certain membership resources, you must accept the latest license agreement. \"  Solution: You'll need to log onto your developer account at  developer.apple.com  and accept the latest license agreement.", 
            "title": "Developer License Update"
        }, 
        {
            "location": "/build/build_errors/#unrecognized-arguments-cache-builds", 
            "text": "Error message: \" Unrecognized arguments: --cache-builds \"          Solution: Please open your Terminal app found in the Applications Utilities folder and then enter  /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"   Confirm installation by pressing enter, and then typing in your computer password.  When the installation finishes, use the command  brew link --overwrite carthage .  After those two steps, you can close out Terminal app, return to Xcode and press the build/play button again.", 
            "title": "Unrecognized arguments: --cache-builds"
        }, 
        {
            "location": "/build/build_errors/#abort-with-payload", 
            "text": "Error message: \" Abort with payload \"  Your app will only open briefly with a white screen and then close, if you build with this error.   \nSolution: This error message is caused by either   Saving Loop download folder into an iCloud mapped drive, or  Having a space in the name of your Loop download folder.   Rename the folder to have no spaces and/or move it back to the Downloads folder, then rebuild.", 
            "title": "Abort with Payload"
        }, 
        {
            "location": "/build/build_errors/#apple-watch-loop-app-not-appearing", 
            "text": "Error:  Apple watch app is not appearing .  Solution: Usually because you have not updated to watchOS prior to when you built Loop, or you didn't have your Apple watch paired at the time of building Loop.  Don't forget to open the iPhone's Watch app, select My Watch tab on the bottom left, scroll all the way down, and click  Install  for the Loop app listed at the very bottom under \"available apps\".", 
            "title": "Apple Watch: Loop app not appearing"
        }, 
        {
            "location": "/build/build_errors/#apple-watch-loop-app-not-installing", 
            "text": "Error:  The Loop app appears on the list of apps available to install on the watch, but when you press \"install\", and it goes through the animation of filling in the circle while it's installing, but then at the end it just toggles back to saying \"INSTALL\" .  Solution:  Plug your iPhone into the computer and start Xcode.  On your watch, look for a prompt that says \"Trust this computer\".  Scroll down on the watch face and select the \"Trust\" button.    Now we need to do one step before rebuilding Loop app again. Go to the top menu bar of Xcode and select \"Clean Build Folder\" from the Product menu option. Rebuild your Loop app.   For an unknown reason (developers are working on fixing it currently), if you do repeated builds in the same Loop project folder...the watch app can fail to install properly after the first build. Therefore, a simple \"Clean Build Folder\" will reset the folder back to new and you'll be able to install the watch after that fresh build.", 
            "title": "Apple Watch: Loop app not installing"
        }, 
        {
            "location": "/build/build_errors/#xcode-path-not-set-correctly-after-using-xcode-11-gm", 
            "text": "Error:  xcrun: error: active developer path (\"/Users/pops/Downloads/Xcode.app/Contents/Developer\") does not exist\nUse sudo xcode-select --switch path/to/Xcode.app to specify the Xcode that you wish to use for command line developer tools, or use xcode-select --install to install the standalone command line developer tools.\nSee man xcode-select for more details. .  Please note that the path in the example error above is just an example. Your path in the error may be different.  Solution:  This may occur if you have installed Xcode 11 GM before you installed the updated general release version. So, Xcode may get confused on which path to be using. Run the command below:  sudo xcode-select --switch /Applications/Xcode.app  Enter your password that you use to login to your Mac with and press Enter. You may now proceed with your build commands.", 
            "title": "Xcode path not set correctly after using Xcode 11 GM"
        }, 
        {
            "location": "/build/code_customization/", 
            "text": "Code Customizations\n\u2301\n\n\nBased on Loop users\u2019 experience, there are some customizations that you may want to incorporate ahead of building your Loop app and Apple Watch app.  These customizations must be done prior to building the Loop app onto your iPhone, they cannot be done from within the app itself.\n\n\n\n\nNote: Every effort will be made to update the line numbers as the code is updated, but there may be times where the screenshots and line numbers are slightly different than the current version of Loop code.  These instructions have been updated for Loop v1.9.4.\n\n\n\n\nDisable Authentication for Bolusing\n\u2301\n\n\nDepending on your iPhone preferences and model, you may have Face ID or Touch ID enabled.  Those security features will also be used to authenticate bolus delivery in Loop.  You can choose to disable authentication (i.e., not require Face ID, Touch ID, or passcode for bolusing) through the following code customization:\n\n\nModify Line 191 in the Loop\nView Controllers\nBolusViewController.swift.  Add the \nfalse \n as shown in the screenshot below:\n\n\n\n\n\n\n\n\n\nWorkout Range Duration\n\u2301\n\n\n\nIf you\u2019d like more than just the standard 1 or 2-hour duration for the Workout Range, you can add or modify the code to add another time interval or edit the existing ones.\n\n\nGo to the Loop\nExtensions\nUIAlertController.swift and modify Line 32.  The default has 1 and 2 hours as shown where the arrow is pointing in the screenshot.  You can edit those to whatever duration you want (in units of hours) and add a duration if you prefer.  If you\u2019d like 1, 2, and 3 hours options...simply edit the numbers in the brackets to read [1, 2, 3]. It is possible to enter less than 1-hour intervals such as 15 min, 30 min, 45 min by editing the brackets to read [0.25, 0.5, 0.75].\n\n\n\n\n\n\n\n\n\nDefault Carb Absorption Times\n\u2301\n\n\n\n\nLoop\u2019s default carb absorption times are based on the high, medium, and low glycemic index absorption curves presented in \nThink Like A Pancreas\n by Gary Scheiner.  Currently the lollipop icon is set for 2 hours, taco icon for 3 hours, and pizza icon for 4 hours.  \n\n\nYou can modify these defaults to suit your needs, however modification of these values is not as helpful/common as previous Loop versions. Since Loop v1.4, Loop has included dynamic carb absorption means that Loop will start with your entered carb absorption time (initially multiplying the absorption time by 1.5 to help give an margin of error), and then dynamically adjust the observed absorption time (either shorter or longer) based on the observed BG impacts.  So, typically, most people are finding that modification of the default carb absorption times is no longer necessary.\n\n\nIf you would like to modify those defaults, you can do so in the Loop\nManagers\nLoopDataManager.swift Lines 65-67.  Note the times are in hours, not minutes, in the code.  For Omnipod-testing branch users, this code is instead found in Loop Core \n LoopSettings.swift Line 16.\n\n\n\n\n\n\n\n\n\nExponential Insulin Curve\n\u2301\n\n\nThe Exponential Insulin Curve Models (Rapid-Acting Adult, Rapid-Acting Child, and Fiasp) default to an insulin duration of 360 minutes...but the peak activity of the various curves differs, as follows:\n\n\n\n\nRapid-acting adult curve peaks at 75 minutes\n\n\nRapid-acting child curve peaks at 65 minutes\n\n\nFiasp peaks curve peaks at 55 minutes\n\n\n\n\nIf you wish to customize these values, you can adjust them on Lines 22-38 in the Common\nModels\nInsulin\nExponentialInsulinModelPreset.swift file.\n\n\nFor Omnipod-testing branch users, this code is instead found in LoopCore\nInsulin\nExponentialInsulinModelPreset.swift.\n\n\n\n\n\n\n\n\n\nLoop Logo\n\u2301\n\n\nIf you want an app logo other than the default green circle for your Loop app, you can easily customize this.  To make it easy to generate the correct sizes of icons, you can use a site like \nappicon.build\n and just drag and drop your source image. The source image needs to be 1024 pixels x 1024 pixels.  The site will email you a zip file.  Double click the zip file, choose the \u201cios\u201d folder, and copy the contents of the Appicon.appiconset as shown highlighted below.\n\n\n\n\n\n\n\n\n\nNow navigate to the corresponding Loop folder as shown below.  Replace the contents of the Appicon.appiconset with your copied images.\n\n\n\n\n\n\n\n\n\nYou can confirm the successful change by looking in Xcode.  You should see your custom logo in the Appicon set now.  You will also likely see a yellow alert that there are \u201cunassigned children\u201d.  This alert will not prevent your app from building, it\u2019s simply because the zip file contained more sizes of images than Loop app uses.  You can just leave the unassigned images as is.\n\n\n\n\n\n\n\n\n\nApple Watch Customizations\n\u2301\n\n\nRecommended Bolus Autofill\n\u2301\n\n\nThe Apple Watch's default is to auto-fill to 75% of the recommended bolus.  If you wish, you can customize so that the watch auto-fills a different percentage. To do this, the multiplier can be changed from 0.75 to a value of your choice. A value of 1 will autofill 100% of the recommended bolus. A value of 0 will autofill 0% of the recommended bolus.   Go to the Watchapp Extension\nControllers\nBolusInterfaceController.swift. Edit the section of line 96 for your customization.\n\n\n\n\n\n\n\n\n\nAdjust the sensitivity of digital crown for carb and bolus entry\n\u2301\n\n\nThe rate of change of the carb and bolus entry pickers when using the digital crown can be altered. You'll need to edit two lines in files within the WatchApp Extension\nControllers folder.  In BolusInterfaceController.swift edit line 174, and in AddCarbsInterfaceController.swift edit line 215. The 1/24 value is the ratio of rotations of the crown to the amount of change in the value. Changing it to 1/12 would mean that twice as many turns would be needed for the same amount of carb or bolus entry.", 
            "title": "Customize your Loop"
        }, 
        {
            "location": "/build/code_customization/#code-customizations", 
            "text": "Based on Loop users\u2019 experience, there are some customizations that you may want to incorporate ahead of building your Loop app and Apple Watch app.  These customizations must be done prior to building the Loop app onto your iPhone, they cannot be done from within the app itself.   Note: Every effort will be made to update the line numbers as the code is updated, but there may be times where the screenshots and line numbers are slightly different than the current version of Loop code.  These instructions have been updated for Loop v1.9.4.", 
            "title": "Code Customizations"
        }, 
        {
            "location": "/build/code_customization/#disable-authentication-for-bolusing", 
            "text": "Depending on your iPhone preferences and model, you may have Face ID or Touch ID enabled.  Those security features will also be used to authenticate bolus delivery in Loop.  You can choose to disable authentication (i.e., not require Face ID, Touch ID, or passcode for bolusing) through the following code customization:  Modify Line 191 in the Loop View Controllers BolusViewController.swift.  Add the  false   as shown in the screenshot below:", 
            "title": "Disable Authentication for Bolusing"
        }, 
        {
            "location": "/build/code_customization/#workout-range-duration", 
            "text": "If you\u2019d like more than just the standard 1 or 2-hour duration for the Workout Range, you can add or modify the code to add another time interval or edit the existing ones.  Go to the Loop Extensions UIAlertController.swift and modify Line 32.  The default has 1 and 2 hours as shown where the arrow is pointing in the screenshot.  You can edit those to whatever duration you want (in units of hours) and add a duration if you prefer.  If you\u2019d like 1, 2, and 3 hours options...simply edit the numbers in the brackets to read [1, 2, 3]. It is possible to enter less than 1-hour intervals such as 15 min, 30 min, 45 min by editing the brackets to read [0.25, 0.5, 0.75].", 
            "title": "Workout Range Duration"
        }, 
        {
            "location": "/build/code_customization/#default-carb-absorption-times", 
            "text": "Loop\u2019s default carb absorption times are based on the high, medium, and low glycemic index absorption curves presented in  Think Like A Pancreas  by Gary Scheiner.  Currently the lollipop icon is set for 2 hours, taco icon for 3 hours, and pizza icon for 4 hours.    You can modify these defaults to suit your needs, however modification of these values is not as helpful/common as previous Loop versions. Since Loop v1.4, Loop has included dynamic carb absorption means that Loop will start with your entered carb absorption time (initially multiplying the absorption time by 1.5 to help give an margin of error), and then dynamically adjust the observed absorption time (either shorter or longer) based on the observed BG impacts.  So, typically, most people are finding that modification of the default carb absorption times is no longer necessary.  If you would like to modify those defaults, you can do so in the Loop Managers LoopDataManager.swift Lines 65-67.  Note the times are in hours, not minutes, in the code.  For Omnipod-testing branch users, this code is instead found in Loop Core   LoopSettings.swift Line 16.", 
            "title": "Default Carb Absorption Times"
        }, 
        {
            "location": "/build/code_customization/#exponential-insulin-curve", 
            "text": "The Exponential Insulin Curve Models (Rapid-Acting Adult, Rapid-Acting Child, and Fiasp) default to an insulin duration of 360 minutes...but the peak activity of the various curves differs, as follows:   Rapid-acting adult curve peaks at 75 minutes  Rapid-acting child curve peaks at 65 minutes  Fiasp peaks curve peaks at 55 minutes   If you wish to customize these values, you can adjust them on Lines 22-38 in the Common Models Insulin ExponentialInsulinModelPreset.swift file.  For Omnipod-testing branch users, this code is instead found in LoopCore Insulin ExponentialInsulinModelPreset.swift.", 
            "title": "Exponential Insulin Curve"
        }, 
        {
            "location": "/build/code_customization/#loop-logo", 
            "text": "If you want an app logo other than the default green circle for your Loop app, you can easily customize this.  To make it easy to generate the correct sizes of icons, you can use a site like  appicon.build  and just drag and drop your source image. The source image needs to be 1024 pixels x 1024 pixels.  The site will email you a zip file.  Double click the zip file, choose the \u201cios\u201d folder, and copy the contents of the Appicon.appiconset as shown highlighted below.     Now navigate to the corresponding Loop folder as shown below.  Replace the contents of the Appicon.appiconset with your copied images.     You can confirm the successful change by looking in Xcode.  You should see your custom logo in the Appicon set now.  You will also likely see a yellow alert that there are \u201cunassigned children\u201d.  This alert will not prevent your app from building, it\u2019s simply because the zip file contained more sizes of images than Loop app uses.  You can just leave the unassigned images as is.", 
            "title": "Loop Logo"
        }, 
        {
            "location": "/build/code_customization/#apple-watch-customizations", 
            "text": "", 
            "title": "Apple Watch Customizations"
        }, 
        {
            "location": "/build/code_customization/#recommended-bolus-autofill", 
            "text": "The Apple Watch's default is to auto-fill to 75% of the recommended bolus.  If you wish, you can customize so that the watch auto-fills a different percentage. To do this, the multiplier can be changed from 0.75 to a value of your choice. A value of 1 will autofill 100% of the recommended bolus. A value of 0 will autofill 0% of the recommended bolus.   Go to the Watchapp Extension Controllers BolusInterfaceController.swift. Edit the section of line 96 for your customization.", 
            "title": "Recommended Bolus Autofill"
        }, 
        {
            "location": "/build/code_customization/#adjust-the-sensitivity-of-digital-crown-for-carb-and-bolus-entry", 
            "text": "The rate of change of the carb and bolus entry pickers when using the digital crown can be altered. You'll need to edit two lines in files within the WatchApp Extension Controllers folder.  In BolusInterfaceController.swift edit line 174, and in AddCarbsInterfaceController.swift edit line 215. The 1/24 value is the ratio of rotations of the crown to the amount of change in the value. Changing it to 1/12 would mean that twice as many turns would be needed for the same amount of carb or bolus entry.", 
            "title": "Adjust the sensitivity of digital crown for carb and bolus entry"
        }, 
        {
            "location": "/build/updating/", 
            "text": "Updating Loop\n\u2301\n\n\n\n\nTime Estimate\n\n\n\n\n25 minutes, if already have updates done\n\n\n40-90 minutes, if need to install Apple update(s)\n\n\n\n\n\n\n\n\nSummary\n\n\n\n\nUpdate macOS, Xcode, iOS, and/or watchOS\n\n\nDownload updated Loop code\n\n\nOpen in Xcode, sign targets\n\n\nAdd optional code customizations\n\n\nBuild onto your iPhone\n\n\nResolve Build Errors\n\n\n\n\n\n\n\n\nFAQs\n\n\n\n\n\"What is an update?\"\n Anytime you want to change branches (i.e., go from omnipod-testing to dev branch), change customizations, or grab updates to the same branch you built with before...that is an \"update\" of your Loop app.\n\n\n\"Do I delete my old Loop app first?\"\n Definitely not! If you keep your Loop app on your phone, your Loop settings (and existing pod) will continue to work the same after the update. Seamless.\n\n\n\"What if I'm using a new/different developer account?\"\n If you aren't building with the same developer account as your existing app was built with (this includes going from free to paid), then you will be installing a brand new (second) Loop app on your phone. Your existing pod won't work with the new app, so you might want to time this transition when you are due to change pods. Delete the old app once you get the new one all set up.\n\n\n\"What if it is a new computer but the same developer account?\"\n No big deal...you just want to make sure the computer has Homebrew installed already and you've added your developer account to Xcode preferences.\n\n\n\"Where can I find the list of features in a new release?\"\n When a new version of Loop is released, you can click \nHERE\n to read what features or fixes were a part of the new release.\n\n\n\n\n\n\nWhen to Update\n\u2301\n\n\nYou will have to rebuild your Loop app at a minimum once every 12 months. The apps built and signed by you in Xcode with a paid developer account will only last for 12 months before they expire and need rebuilding. So, at least once per year you will have to rebuild your app and go through this update process.\n\n\nUnder ordinary circumstances, you do not \nhave to\n update your Loop app until you are ready to grab new features. However, we encourage regular updates when a new version is released because they often contain bug fixes or improvements which may increase operational stability.\n\n\nStep 1: Update macOS and Xcode\n\u2301\n\n\n\n\nMinimum Requirements\n\n\nBetween Loop app builds, there's a high likelihood that Apple has updated one or more of the systems involved in your Loop app. \nIf you miss macOS or Xcode updates, you may run into build problems. Do not skip these steps before updating Loop.\n  You will need the following minimum versions:\n\n\n\n\nmacOS 10.14.3 (Mojave)\n\n\niOS 12.2\n\n\nXcode 11\n\n\n\n\nBut why be a minimalist? Go ahead and install any available updates in all areas; macOS, Xcode, iOS, and watchOS.\n\n\n(You can only use macOS 10.13.6 High Sierra if you are building with Loop master branch \nand\n have at least iOS 12 or 12.1. The next version of Loop master branch will require Mojave at a minimum, so keep that in your planning for the future. If building dev, omnipod-testing, or any other branch that supports omnipod users, then you will need the minimum versions listed above.)\n\n\n\n\n\n\nDownload Xcode 11 from the App store\n\n\nYes, this is important. If you downloaded Xcode 11 GM previously in the last couple weeks, go to the App store and get the Xcode update waiting for you now. Xcode 11 GM is not what you need anymore...you need to get Xcode 11 from the App store.\n\n\n\n\n\n\nRestart computer after updating Xcode\nMake sure to restart your computer after updating Xcode. There's a known issue that happens often enough to be frustrating if you don't reboot. Either a build error about missing simultors or a \"device not connected\" (even when phone is connected). Just restart computer. It's easy enough.\n\n\n\n\n\n\n\n\nCheck Homebrew and Carthage\n\n\nDepending on when you last built, you may need to update Homebrew and Carthage. Please open Terminal app and copy \n paste  \ncarthage version\n into Terminal. If you see 0.33.0 returned, then you don't need to do anything additional.\n\n\nIf you got a number other than 0.33.0 for your carthage version, then copy \n paste \nbrew update \n brew upgrade carthage\n into Terminal app. When the update finishes, you should have carthage 0.33.0 (or later) installed.\n\n\nIf you don't have 0.33.0 installed after that update, then you will need to use \nbrew link --overwrite carthage\n and then repeat the \nbrew update \n brew upgrade carthage\n command. That should succeed in updating you properly.\n\n\n\n\nStep 2: Download Updated Loop Code\n\u2301\n\n\nAfter you've finished the updates to your devices listed above, you can move onto downloading updated Loop code. You will not be simply using your old downloaded Loop code (and in fact, you can delete those old folders now if you want). Click on \nONE\n of the links below to download an updated version of the Loop code:\n\n\n\n\n\nLoop: Master branch\n\n\n\n\n\n\nOR\n\n\nLoop: Dev branch\n\n\n\n\n\n\nOR\n\n\nLoop: Omnipod-testing branch\n\n\n\n\n\n\nReminder\n\n\nIt is best practice is to leave your Loop code in your Downloads folder.  If you store your Loop code a different folder than Downloads (such as your Documents folder or Desktop), make sure the specified folder is \nnot\n an iCloud drive.  Storing your Loop code in an iCloud drive folder will prevent Loop from building successfully.  How do you know if a folder is an iCloud drive?  Check your System Preferences.  If your System Preferences for iCloud is set as shown below, your Documents and Desktop folders are iCloud drives and \nNOT\n appropriate places to save your Loop download.\n\n\n\n\n\n\nDepending on your browser and settings, your Loop download may or may not automatically unzip.  If it does not unzip automatically, you can right-click on the zip file and choose to \"Open With\" Archive Utility.  This will create a blue folder called \nLoop-master\n.  HOWEVER, if you already have an existing \nLoop-master\n folder from a previous download, the name of the next download will be something like \nLoop-master (1)\n.  The problem with that folder name is that it contains a space...and spaces in the name will cause your Loop build to fail.  So, either delete old copies of Loop before downloading/unzipping or rename the folder(s) to ensure that NO SPACES are in the folder name.\n\n\n\n\n\n\n\n\n\nStep 3: Build Like Normal\n\u2301\n\n\nFrom here it is just like the old directions...you can go straight to \nStep 14 Build Loop app\n and do just like you did the first time. Open the project, plug in the phone, sign four targets, code customizations (if wanted), and then build button. Easy peasy.\n\n\nNote: If this is a computer that hasn't built Loop before, you would want to make sure to do \nStep 7: install Homebrew\n before doing your build on that computer.\n\n\nStep 4: Check Build Errors page if needed\n\u2301\n\n\n\n\nCHECK BUILD ERRORS PAGE\n\n\nIf you get a build error...still check the \nBuild Errors page\n. Because even if your exact error isn't there...the information you NEED to provide when asking for help is listed out on that page. And that information is critical. CRITICAL to be able to troubleshoot your build error.", 
            "title": "Ready to Update your Loop?"
        }, 
        {
            "location": "/build/updating/#updating-loop", 
            "text": "Time Estimate   25 minutes, if already have updates done  40-90 minutes, if need to install Apple update(s)     Summary   Update macOS, Xcode, iOS, and/or watchOS  Download updated Loop code  Open in Xcode, sign targets  Add optional code customizations  Build onto your iPhone  Resolve Build Errors     FAQs   \"What is an update?\"  Anytime you want to change branches (i.e., go from omnipod-testing to dev branch), change customizations, or grab updates to the same branch you built with before...that is an \"update\" of your Loop app.  \"Do I delete my old Loop app first?\"  Definitely not! If you keep your Loop app on your phone, your Loop settings (and existing pod) will continue to work the same after the update. Seamless.  \"What if I'm using a new/different developer account?\"  If you aren't building with the same developer account as your existing app was built with (this includes going from free to paid), then you will be installing a brand new (second) Loop app on your phone. Your existing pod won't work with the new app, so you might want to time this transition when you are due to change pods. Delete the old app once you get the new one all set up.  \"What if it is a new computer but the same developer account?\"  No big deal...you just want to make sure the computer has Homebrew installed already and you've added your developer account to Xcode preferences.  \"Where can I find the list of features in a new release?\"  When a new version of Loop is released, you can click  HERE  to read what features or fixes were a part of the new release.", 
            "title": "Updating Loop"
        }, 
        {
            "location": "/build/updating/#when-to-update", 
            "text": "You will have to rebuild your Loop app at a minimum once every 12 months. The apps built and signed by you in Xcode with a paid developer account will only last for 12 months before they expire and need rebuilding. So, at least once per year you will have to rebuild your app and go through this update process.  Under ordinary circumstances, you do not  have to  update your Loop app until you are ready to grab new features. However, we encourage regular updates when a new version is released because they often contain bug fixes or improvements which may increase operational stability.", 
            "title": "When to Update"
        }, 
        {
            "location": "/build/updating/#step-1-update-macos-and-xcode", 
            "text": "Minimum Requirements  Between Loop app builds, there's a high likelihood that Apple has updated one or more of the systems involved in your Loop app.  If you miss macOS or Xcode updates, you may run into build problems. Do not skip these steps before updating Loop.   You will need the following minimum versions:   macOS 10.14.3 (Mojave)  iOS 12.2  Xcode 11   But why be a minimalist? Go ahead and install any available updates in all areas; macOS, Xcode, iOS, and watchOS.  (You can only use macOS 10.13.6 High Sierra if you are building with Loop master branch  and  have at least iOS 12 or 12.1. The next version of Loop master branch will require Mojave at a minimum, so keep that in your planning for the future. If building dev, omnipod-testing, or any other branch that supports omnipod users, then you will need the minimum versions listed above.)    Download Xcode 11 from the App store  Yes, this is important. If you downloaded Xcode 11 GM previously in the last couple weeks, go to the App store and get the Xcode update waiting for you now. Xcode 11 GM is not what you need anymore...you need to get Xcode 11 from the App store.    Restart computer after updating Xcode Make sure to restart your computer after updating Xcode. There's a known issue that happens often enough to be frustrating if you don't reboot. Either a build error about missing simultors or a \"device not connected\" (even when phone is connected). Just restart computer. It's easy enough.     Check Homebrew and Carthage  Depending on when you last built, you may need to update Homebrew and Carthage. Please open Terminal app and copy   paste   carthage version  into Terminal. If you see 0.33.0 returned, then you don't need to do anything additional.  If you got a number other than 0.33.0 for your carthage version, then copy   paste  brew update   brew upgrade carthage  into Terminal app. When the update finishes, you should have carthage 0.33.0 (or later) installed.  If you don't have 0.33.0 installed after that update, then you will need to use  brew link --overwrite carthage  and then repeat the  brew update   brew upgrade carthage  command. That should succeed in updating you properly.", 
            "title": "Step 1: Update macOS and Xcode"
        }, 
        {
            "location": "/build/updating/#step-2-download-updated-loop-code", 
            "text": "After you've finished the updates to your devices listed above, you can move onto downloading updated Loop code. You will not be simply using your old downloaded Loop code (and in fact, you can delete those old folders now if you want). Click on  ONE  of the links below to download an updated version of the Loop code:   Loop: Master branch    OR  Loop: Dev branch    OR  Loop: Omnipod-testing branch    Reminder  It is best practice is to leave your Loop code in your Downloads folder.  If you store your Loop code a different folder than Downloads (such as your Documents folder or Desktop), make sure the specified folder is  not  an iCloud drive.  Storing your Loop code in an iCloud drive folder will prevent Loop from building successfully.  How do you know if a folder is an iCloud drive?  Check your System Preferences.  If your System Preferences for iCloud is set as shown below, your Documents and Desktop folders are iCloud drives and  NOT  appropriate places to save your Loop download.   \nDepending on your browser and settings, your Loop download may or may not automatically unzip.  If it does not unzip automatically, you can right-click on the zip file and choose to \"Open With\" Archive Utility.  This will create a blue folder called  Loop-master .  HOWEVER, if you already have an existing  Loop-master  folder from a previous download, the name of the next download will be something like  Loop-master (1) .  The problem with that folder name is that it contains a space...and spaces in the name will cause your Loop build to fail.  So, either delete old copies of Loop before downloading/unzipping or rename the folder(s) to ensure that NO SPACES are in the folder name.", 
            "title": "Step 2: Download Updated Loop Code"
        }, 
        {
            "location": "/build/updating/#step-3-build-like-normal", 
            "text": "From here it is just like the old directions...you can go straight to  Step 14 Build Loop app  and do just like you did the first time. Open the project, plug in the phone, sign four targets, code customizations (if wanted), and then build button. Easy peasy.  Note: If this is a computer that hasn't built Loop before, you would want to make sure to do  Step 7: install Homebrew  before doing your build on that computer.", 
            "title": "Step 3: Build Like Normal"
        }, 
        {
            "location": "/build/updating/#step-4-check-build-errors-page-if-needed", 
            "text": "CHECK BUILD ERRORS PAGE  If you get a build error...still check the  Build Errors page . Because even if your exact error isn't there...the information you NEED to provide when asking for help is listed out on that page. And that information is critical. CRITICAL to be able to troubleshoot your build error.", 
            "title": "Step 4: Check Build Errors page if needed"
        }, 
        {
            "location": "/build/loopworkspace/", 
            "text": "Loop Workspace\n\u2301\n\n\nThis page is for the \"advanced\" user. Well, maybe there is a better word for it. Adventurous? Curious? But, if you are a newbie and not into crazy stuff...everything in here is completely and totally just optional. Using or not using LoopWorkspace does not affect your looping nor access to Loop. This page is about me finding an efficient way to answer questions about a topic that takes a lot of words to answer usually...so I'm saving time by making this page.\n\n\nTraditionally, Loopdocs has only told you about the option of downloading Loop as a zip file through those links. But, there's another way of getting that code to your computer called \"git\". Git is a system of \"distributed version control\" that allows remotely (as in not located in same place) collaborating people to work on one project and still track their changes to the same place. For example, if I sent 5 people one document to proof-read at the same time...it is quite possible that the edits I will get back from those 5 people would conflict with each other. Bob may have entirely deleted a sentence while Mary would have added words to that sentence. Git lets these remotely collaborating people deal with \"resolving conflict\" between versions more easily and merging suggestions (pull requests) into a coordinated space.\n\n\nSo, in using Git, we can do things with \"git commands\". Like \"Hey git...make me an exact copy of that guy's work over there.\" or \"Hey git, I'd like to compare my version of this page with Joe's version of the same page.\" Or using my old cookbook analogy...\"Hey git, I'd like to start a new cookbook called Italian Desserts.\"\n\n\nBut yes, git commands take awhile to properly use. And they are not plain english friendly. Or any kind of friendly really, at least not to very many people. Therefore, we have emphasized the downloading of a zip file to make you not have to use git.\n\n\nWhy this page?\n\u2301\n\n\nSo why am I about to tell you about a Loop repo that involves git? The answer is because LoopWorkspace is a pretty nice feature that you may run across if you are testing new features. And if you do, I do not want to be answering these How To questions in Zulipchat and Facebook repeatedly...so let's consolidate the info here.\n\n\n\n\nYou can still download zips\n\n\nYou do not have to use LoopWorkspace. Just to be clear, everything still works like it used to. LoopWorkspace is just a different option to save the amount of git and cartfile work that you would have to do otherwise. Depending on what you'd like to do, it may be a good option. Usually that \"good option\" is if you are trying new code that involves edits to the Loop frameworks.\n\n\n\n\nWhat is LoopWorkspace?\n\u2301\n\n\nI'm going to retread some info that you may have read in the Branches FAQs page earlier, but is really important to this discussion on LoopWorkspace. Loop developers own an account in GitHub called \nLoopKit\n.  Within that account, the developers have several \"repositories\" that support Loop in particular. A repository is like a book...let's think of it like a cookbook for now. Within the LoopKit account, there are repositories for Loop itself, LoopDocs, and various other supporting \"frameworks\" that are helper repositories for Loop to build correctly. For example, Loop's repo has a lot of the info about the app itself; the outward facing things that you interact with. How information is put to you and taken in from you...that's in Loop repository code. But, there's more than just a user interface for Loop. Loop has to do a lot of complex work like Bluetooth communications, algorithm math, pump communications, etc. The Loop app has help from frameworks to do those other parts. CGMBLEkit for some of the transmitter parts of Loop, RileyLink_ios for the pump managers (talking to the pumps and decoding their information), LoopKit for the algorithm about carbs and insulin curves, etc.\n\n\nWhen you build Loop, in the background, Loop pulls those other frameworks (7 in total) into the build process using \"Carthage\".  Carthage is like a personal shopper. You give it a shopping list (the cartfile in Loop code is that shopping list) and it goes and fetches that for you during the build process. The cartfile shows where the various frameworks are (exactly which GitHub account) and which branch to use. This is an example of what the cartfile looks like for dev branch right now.\n\n\n\n\n\n\n\n\n\n\nMany of the frameworks also have their own cartfiles embedded in them. So, when developers are doing code changes in one of those frameworks, it gets to be a nest of effort to keep the cartfiles pointing to the right places and consistent in the embedded cartfiles for the various frameworks. \n\n\nAnd this is where LoopWorkspace comes in. LoopWorkspace uses submodules instead of cartfiles to define how the frameworks are coordinated for building. The workspace puts all the frameworks closer together and this makes the development process a LOT easier than managing cartfiles. A LOT EASIER. So, as new features might come out for testing, you may see LoopWorkspaces offered for that testing option instead of simply a downloaded zip. The ease of using workspace for developers is the reason why.\n\n\nHow do you \"get\" LoopWorkspace(s)?\n\u2301\n\n\nIn order to use a LoopWorkspace, you need to start using git commands in the Terminal app. The main LoopWorkspace is \nhere in the LoopKit account\n.  To get that to your computer, you'll need to \"clone\" it with this command:\n\n\ngit clone --branch=dev --recurse-submodules https://github.com/LoopKit/LoopWorkspace\n\n\nNow...look carefully...that is getting LoopKit's version of LoopWorkspace and grabbing the dev branch as the one you want to start working with.\n\n\nIf DeveloperBob had forked a copy of LoopKit's LoopWorkspace and made some changes he wanted to test, and then you wanted to grab them...you'd need to change the command to get DeveloperBob's version. And, you'd want to make sure you specify the branch that the new feature is on, too. DeveloperBob should usually include the branch name when he posts/shares. So, it might be something like:\n\n\ngit clone --branch=bitching-new-feature --recurse-submodules https://github.com/DeveloperBob/LoopWorkspace\n\n\nSo...if you are trying to grab someone's LoopWorkspace to use it, you'll need to make sure you get the command correct if they don't specify it for you.\n\n\nWhere does the clone go?\n\u2301\n\n\nThe cloned version of the LoopWorkspace will go into whatever directory you were sitting in in Terminal app when you did the command. Terminal app by default drops you into your User account's root directory when you first open it, so that's a good assumption on where your cloned LoopWorkspace will go.\n\n\nHow can you find your root directory?\n\n\n\n\nIn Terminal, if you use \ncd\n that will take you there automatically.\n\n\nIn Finder, shift-command-H will open your \"home\" folder (aka root directory).\n\n\n\n\n\n\n\n\n\n\n\n\nAs you can see, I have a lot of cloned things in my root directory from GitHub that involve Loop. You may have fewer...but be aware, you can always delete and reclone if you are in doubt or confused. You can't clone mutliple \"LoopWorkspaces\" into the exact same root directory (because they will have the same name), so you may want to create a subdirectory to put them in. Like you could make a folder called \"DeveloperJane\" and then move into that directory in Terminal before you clone DeveloperJane's LoopWorkspace. \n\n\nHow would you do that? Simple \ncd \n mkdir DeveloperJane\n would make the new folder in your root directory. And then \ncd DeveloperJane\n would move your Terminal app to be working inside the new DeveloperJane folder. So if you wanted to clone DeveloperJane's LoopWorkspace, that would be a good way to keep track of where the code came from.\n\n\nIf you ever get in doubt and can't remember where your code was clone from, you can \ncd LoopWorkspace\n to get into your cloned directory and then use \ngit remote -v\n to tell you where it came from.\n\n\nUsing LoopWorkspace\n\u2301\n\n\nOnce you get your workspace cloned, you simply find that cloned folder (wherever you cloned it to...use Finder to find it) and double-click on the Loop.xcworkspace file to open the project in Xcode.\n\n\n\n\n\n\n\n\n\n\nOnce you are in LoopWorkspace, everything is pretty similar for building with only two notable exceptions. You need to click on that blue Loop folder to see the signing targets, and you need to change the build scheme to the left of your phone to \"Loop (Workspace)\" in order to build properly.\n\n\n\n\n\n\n\n\n\n\nOh wait...there is a noticable difference...the speed! LoopWorkspace will build Loop much faster than Loop because of the way it uses submodules. I do rather like that benefit to using LoopWorkspaces too.\n\n\nUpdating Loop using LoopWorkspace\n\u2301\n\n\nWhen you want to update your Loop app using LoopWorkspace, you'd just do a \ngit pull --recurse\n while in the LoopWorkspace directory in Terminal. That will grab the lastest updates and then you can build. If you still have signing team filled in, you may get a conflict on the command...so either unsign before the git pull or do a \ngit stash\n and then pull.\n\n\nAnd with that ends the super basic \"How can I build with a LoopWorkspace?\" questions and use for 90% of the users.\n\n\nPushing commits from LoopWorkspace\n\u2301\n\n\nMore advanced users...I'm not going to explain this in quite so much detail, but yes, you can push commits from your forked/cloned LoopWorkspace to your various repos in your own GitHub account. \n\n\nIn short, if you edit your .gitmodules directory in LoopWorkspace, you can specify other repos to use (and add a line to specify branches, too). This way the cartfiles being mismatched is not a problem while using submodules, for example:\n\n\n\n\n\n\n\n\n\n\nThen if you do a \ngit submodule sync\n the workspace will sync to new submodules. Then \ngit submodule update --init --recursive --remote\n will update all the submodules to the right branches and get HEADs detached correctly, etc. From there you can work as you'd like. When you are ready to commit changes, just cd into the directory you'd like to make the commits/pushes in (aka \ncd rileylink_ios\n) and you'll be good to go.", 
            "title": "LoopWorkspace"
        }, 
        {
            "location": "/build/loopworkspace/#loop-workspace", 
            "text": "This page is for the \"advanced\" user. Well, maybe there is a better word for it. Adventurous? Curious? But, if you are a newbie and not into crazy stuff...everything in here is completely and totally just optional. Using or not using LoopWorkspace does not affect your looping nor access to Loop. This page is about me finding an efficient way to answer questions about a topic that takes a lot of words to answer usually...so I'm saving time by making this page.  Traditionally, Loopdocs has only told you about the option of downloading Loop as a zip file through those links. But, there's another way of getting that code to your computer called \"git\". Git is a system of \"distributed version control\" that allows remotely (as in not located in same place) collaborating people to work on one project and still track their changes to the same place. For example, if I sent 5 people one document to proof-read at the same time...it is quite possible that the edits I will get back from those 5 people would conflict with each other. Bob may have entirely deleted a sentence while Mary would have added words to that sentence. Git lets these remotely collaborating people deal with \"resolving conflict\" between versions more easily and merging suggestions (pull requests) into a coordinated space.  So, in using Git, we can do things with \"git commands\". Like \"Hey git...make me an exact copy of that guy's work over there.\" or \"Hey git, I'd like to compare my version of this page with Joe's version of the same page.\" Or using my old cookbook analogy...\"Hey git, I'd like to start a new cookbook called Italian Desserts.\"  But yes, git commands take awhile to properly use. And they are not plain english friendly. Or any kind of friendly really, at least not to very many people. Therefore, we have emphasized the downloading of a zip file to make you not have to use git.", 
            "title": "Loop Workspace"
        }, 
        {
            "location": "/build/loopworkspace/#why-this-page", 
            "text": "So why am I about to tell you about a Loop repo that involves git? The answer is because LoopWorkspace is a pretty nice feature that you may run across if you are testing new features. And if you do, I do not want to be answering these How To questions in Zulipchat and Facebook repeatedly...so let's consolidate the info here.   You can still download zips  You do not have to use LoopWorkspace. Just to be clear, everything still works like it used to. LoopWorkspace is just a different option to save the amount of git and cartfile work that you would have to do otherwise. Depending on what you'd like to do, it may be a good option. Usually that \"good option\" is if you are trying new code that involves edits to the Loop frameworks.", 
            "title": "Why this page?"
        }, 
        {
            "location": "/build/loopworkspace/#what-is-loopworkspace", 
            "text": "I'm going to retread some info that you may have read in the Branches FAQs page earlier, but is really important to this discussion on LoopWorkspace. Loop developers own an account in GitHub called  LoopKit .  Within that account, the developers have several \"repositories\" that support Loop in particular. A repository is like a book...let's think of it like a cookbook for now. Within the LoopKit account, there are repositories for Loop itself, LoopDocs, and various other supporting \"frameworks\" that are helper repositories for Loop to build correctly. For example, Loop's repo has a lot of the info about the app itself; the outward facing things that you interact with. How information is put to you and taken in from you...that's in Loop repository code. But, there's more than just a user interface for Loop. Loop has to do a lot of complex work like Bluetooth communications, algorithm math, pump communications, etc. The Loop app has help from frameworks to do those other parts. CGMBLEkit for some of the transmitter parts of Loop, RileyLink_ios for the pump managers (talking to the pumps and decoding their information), LoopKit for the algorithm about carbs and insulin curves, etc.  When you build Loop, in the background, Loop pulls those other frameworks (7 in total) into the build process using \"Carthage\".  Carthage is like a personal shopper. You give it a shopping list (the cartfile in Loop code is that shopping list) and it goes and fetches that for you during the build process. The cartfile shows where the various frameworks are (exactly which GitHub account) and which branch to use. This is an example of what the cartfile looks like for dev branch right now.      Many of the frameworks also have their own cartfiles embedded in them. So, when developers are doing code changes in one of those frameworks, it gets to be a nest of effort to keep the cartfiles pointing to the right places and consistent in the embedded cartfiles for the various frameworks.   And this is where LoopWorkspace comes in. LoopWorkspace uses submodules instead of cartfiles to define how the frameworks are coordinated for building. The workspace puts all the frameworks closer together and this makes the development process a LOT easier than managing cartfiles. A LOT EASIER. So, as new features might come out for testing, you may see LoopWorkspaces offered for that testing option instead of simply a downloaded zip. The ease of using workspace for developers is the reason why.", 
            "title": "What is LoopWorkspace?"
        }, 
        {
            "location": "/build/loopworkspace/#how-do-you-get-loopworkspaces", 
            "text": "In order to use a LoopWorkspace, you need to start using git commands in the Terminal app. The main LoopWorkspace is  here in the LoopKit account .  To get that to your computer, you'll need to \"clone\" it with this command:  git clone --branch=dev --recurse-submodules https://github.com/LoopKit/LoopWorkspace  Now...look carefully...that is getting LoopKit's version of LoopWorkspace and grabbing the dev branch as the one you want to start working with.  If DeveloperBob had forked a copy of LoopKit's LoopWorkspace and made some changes he wanted to test, and then you wanted to grab them...you'd need to change the command to get DeveloperBob's version. And, you'd want to make sure you specify the branch that the new feature is on, too. DeveloperBob should usually include the branch name when he posts/shares. So, it might be something like:  git clone --branch=bitching-new-feature --recurse-submodules https://github.com/DeveloperBob/LoopWorkspace  So...if you are trying to grab someone's LoopWorkspace to use it, you'll need to make sure you get the command correct if they don't specify it for you.", 
            "title": "How do you \"get\" LoopWorkspace(s)?"
        }, 
        {
            "location": "/build/loopworkspace/#where-does-the-clone-go", 
            "text": "The cloned version of the LoopWorkspace will go into whatever directory you were sitting in in Terminal app when you did the command. Terminal app by default drops you into your User account's root directory when you first open it, so that's a good assumption on where your cloned LoopWorkspace will go.  How can you find your root directory?   In Terminal, if you use  cd  that will take you there automatically.  In Finder, shift-command-H will open your \"home\" folder (aka root directory).       As you can see, I have a lot of cloned things in my root directory from GitHub that involve Loop. You may have fewer...but be aware, you can always delete and reclone if you are in doubt or confused. You can't clone mutliple \"LoopWorkspaces\" into the exact same root directory (because they will have the same name), so you may want to create a subdirectory to put them in. Like you could make a folder called \"DeveloperJane\" and then move into that directory in Terminal before you clone DeveloperJane's LoopWorkspace.   How would you do that? Simple  cd   mkdir DeveloperJane  would make the new folder in your root directory. And then  cd DeveloperJane  would move your Terminal app to be working inside the new DeveloperJane folder. So if you wanted to clone DeveloperJane's LoopWorkspace, that would be a good way to keep track of where the code came from.  If you ever get in doubt and can't remember where your code was clone from, you can  cd LoopWorkspace  to get into your cloned directory and then use  git remote -v  to tell you where it came from.", 
            "title": "Where does the clone go?"
        }, 
        {
            "location": "/build/loopworkspace/#using-loopworkspace", 
            "text": "Once you get your workspace cloned, you simply find that cloned folder (wherever you cloned it to...use Finder to find it) and double-click on the Loop.xcworkspace file to open the project in Xcode.      Once you are in LoopWorkspace, everything is pretty similar for building with only two notable exceptions. You need to click on that blue Loop folder to see the signing targets, and you need to change the build scheme to the left of your phone to \"Loop (Workspace)\" in order to build properly.      Oh wait...there is a noticable difference...the speed! LoopWorkspace will build Loop much faster than Loop because of the way it uses submodules. I do rather like that benefit to using LoopWorkspaces too.", 
            "title": "Using LoopWorkspace"
        }, 
        {
            "location": "/build/loopworkspace/#updating-loop-using-loopworkspace", 
            "text": "When you want to update your Loop app using LoopWorkspace, you'd just do a  git pull --recurse  while in the LoopWorkspace directory in Terminal. That will grab the lastest updates and then you can build. If you still have signing team filled in, you may get a conflict on the command...so either unsign before the git pull or do a  git stash  and then pull.  And with that ends the super basic \"How can I build with a LoopWorkspace?\" questions and use for 90% of the users.", 
            "title": "Updating Loop using LoopWorkspace"
        }, 
        {
            "location": "/build/loopworkspace/#pushing-commits-from-loopworkspace", 
            "text": "More advanced users...I'm not going to explain this in quite so much detail, but yes, you can push commits from your forked/cloned LoopWorkspace to your various repos in your own GitHub account.   In short, if you edit your .gitmodules directory in LoopWorkspace, you can specify other repos to use (and add a line to specify branches, too). This way the cartfiles being mismatched is not a problem while using submodules, for example:      Then if you do a  git submodule sync  the workspace will sync to new submodules. Then  git submodule update --init --recursive --remote  will update all the submodules to the right branches and get HEADs detached correctly, etc. From there you can work as you'd like. When you are ready to commit changes, just cd into the directory you'd like to make the commits/pushes in (aka  cd rileylink_ios ) and you'll be good to go.", 
            "title": "Pushing commits from LoopWorkspace"
        }, 
        {
            "location": "/operation/overview/", 
            "text": "How to set up your Loop app\n\u2301\n\n\nThis section of LoopDocs, under the general menu tab \"Set up App\", goes through all the important information about the process to properly set up all your needed information. You will need to work through the steps listed in the headings under this page one by one. Please follow along with each page's information to make sure that you don't miss any valuable information about your Loop's settings and function. \n\n\nAdd Pump\n\u2301\n\n\nThe first step to setting up your Loop app is to tell Loop which pump you're using. There are separate pages for setting up a Medtronic (MDT) pump or an Omnipod Eros pump (aka \"pods\"). Click on one of the pages to go straight to that page's guide.\n\n\n\n\n\n\nAdd Medtronic Pump\n\n\nAdd Omnipod Pump\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdd CGM\n\u2301\n\n\nYou will need to add a CGM source for your Loop app. If you are wondering which CGMs are supported natively by Loop, check \nhere\n. The guide for adding the CGM source is \nhere\n\n\n\n\n\n\n\n\n\n\n\nConfigurations\n\u2301\n\n\nThere is a particular section of Loop's settings area called \"Configurations\". Within this section, you will be entering many settings that you are already familiar with such as basal rates, carb ratios, and insulin sensitivity factor (aka correction factor). There are also several new terms that you may be unfamiliar with like insulin model selection, suspend threshold, and override ranges. Make sure you walk through the setup guide \nhere\n for the configurations.\n\n\n\n\n\n\n\n\n\n\n\nServices (optional)\n\u2301\n\n\nThe last section of entries to your Loop app, \nServices\n involve optional services that you can choose to send Loop data to. The most popular of those services is likely your Nightscout site; but there are also logging sites that can store information about your Loop errors and messages. All of these services are optional; not using these services will not affect your ability to Loop.\n\n\n\n\n\n\n\n\n\n\n\nLoop Displays\n\u2301\n\n\nAfter you are done setting up all your information, you will also need to familiarize yourself with the Loop's various information displays. \nThis page\n will help you recognize what all the icons, graphs, and data mean.\n\n\nRileyLink menu\n\u2301\n\n\nThe RileyLink itself has some menu displays and commands which provide useful information for your Loop. Check out \nthis page\n to read up about the various options available.", 
            "title": "Overview"
        }, 
        {
            "location": "/operation/overview/#how-to-set-up-your-loop-app", 
            "text": "This section of LoopDocs, under the general menu tab \"Set up App\", goes through all the important information about the process to properly set up all your needed information. You will need to work through the steps listed in the headings under this page one by one. Please follow along with each page's information to make sure that you don't miss any valuable information about your Loop's settings and function.", 
            "title": "How to set up your Loop app"
        }, 
        {
            "location": "/operation/overview/#add-pump", 
            "text": "The first step to setting up your Loop app is to tell Loop which pump you're using. There are separate pages for setting up a Medtronic (MDT) pump or an Omnipod Eros pump (aka \"pods\"). Click on one of the pages to go straight to that page's guide.    Add Medtronic Pump  Add Omnipod Pump", 
            "title": "Add Pump"
        }, 
        {
            "location": "/operation/overview/#add-cgm", 
            "text": "You will need to add a CGM source for your Loop app. If you are wondering which CGMs are supported natively by Loop, check  here . The guide for adding the CGM source is  here", 
            "title": "Add CGM"
        }, 
        {
            "location": "/operation/overview/#configurations", 
            "text": "There is a particular section of Loop's settings area called \"Configurations\". Within this section, you will be entering many settings that you are already familiar with such as basal rates, carb ratios, and insulin sensitivity factor (aka correction factor). There are also several new terms that you may be unfamiliar with like insulin model selection, suspend threshold, and override ranges. Make sure you walk through the setup guide  here  for the configurations.", 
            "title": "Configurations"
        }, 
        {
            "location": "/operation/overview/#services-optional", 
            "text": "The last section of entries to your Loop app,  Services  involve optional services that you can choose to send Loop data to. The most popular of those services is likely your Nightscout site; but there are also logging sites that can store information about your Loop errors and messages. All of these services are optional; not using these services will not affect your ability to Loop.", 
            "title": "Services (optional)"
        }, 
        {
            "location": "/operation/overview/#loop-displays", 
            "text": "After you are done setting up all your information, you will also need to familiarize yourself with the Loop's various information displays.  This page  will help you recognize what all the icons, graphs, and data mean.", 
            "title": "Loop Displays"
        }, 
        {
            "location": "/operation/overview/#rileylink-menu", 
            "text": "The RileyLink itself has some menu displays and commands which provide useful information for your Loop. Check out  this page  to read up about the various options available.", 
            "title": "RileyLink menu"
        }, 
        {
            "location": "/build/health/", 
            "text": "Health Data\n\u2301\n\n\nLoop app uses the iPhone's Health app to store blood glucose, insulin, and carbohydrate data. Additional details about how to use Health to interpret your longer-term looping data can be found \nhere in LoopTips\n. Health data can also be accessed and uploaded by Tidepool's Mobile app and is an important step in Jaeb Observational Study enrollment. Please review the settings below to ensure you have the proper settings.\n\n\nLoop Permissions\n\u2301\n\n\n\n\n\n\nWhen you first finish building your Loop app, you need to set up Loop's permissions to store data in Health.\nWhen this screen appears, you should toggle on all of the categories for Loop for both reading and writing, so that the green sliders are showing. If you didn't turn those on, you should go back and set the permissions directly in Health app.\nIt is important at this point to also consider other apps which you may have previously given Health permissions to. In particular, \nyou do not want other apps, like myFitness Pal or Spike app, writing carbohydrate data to Loop\n. This can cause Loop to have \"doubled\" carb entries and you will get incorrect insulin deliveries related to doubled carb entries. You can check your various apps' permissions by clicking on the sources button at the bottom of the Health app. Click on the apps listed as a source, and make sure none of them have permission to write carbohydrates to Health.\n\n\n\n\n\nDexcom Permissions\n\u2301\n\n\nYou also need to enable your Dexcom app to write to the Health app. You can find this in your Dexcom app's Settings, under Health.  Click on the \nEnable\n button and then \nTurn All Categories On\n so that the toggle for allowing Dexcom to write data is now a green color.", 
            "title": "Step 1: Health Permissions"
        }, 
        {
            "location": "/build/health/#health-data", 
            "text": "Loop app uses the iPhone's Health app to store blood glucose, insulin, and carbohydrate data. Additional details about how to use Health to interpret your longer-term looping data can be found  here in LoopTips . Health data can also be accessed and uploaded by Tidepool's Mobile app and is an important step in Jaeb Observational Study enrollment. Please review the settings below to ensure you have the proper settings.", 
            "title": "Health Data"
        }, 
        {
            "location": "/build/health/#loop-permissions", 
            "text": "When you first finish building your Loop app, you need to set up Loop's permissions to store data in Health. When this screen appears, you should toggle on all of the categories for Loop for both reading and writing, so that the green sliders are showing. If you didn't turn those on, you should go back and set the permissions directly in Health app. It is important at this point to also consider other apps which you may have previously given Health permissions to. In particular,  you do not want other apps, like myFitness Pal or Spike app, writing carbohydrate data to Loop . This can cause Loop to have \"doubled\" carb entries and you will get incorrect insulin deliveries related to doubled carb entries. You can check your various apps' permissions by clicking on the sources button at the bottom of the Health app. Click on the apps listed as a source, and make sure none of them have permission to write carbohydrates to Health.", 
            "title": "Loop Permissions"
        }, 
        {
            "location": "/build/health/#dexcom-permissions", 
            "text": "You also need to enable your Dexcom app to write to the Health app. You can find this in your Dexcom app's Settings, under Health.  Click on the  Enable  button and then  Turn All Categories On  so that the toggle for allowing Dexcom to write data is now a green color.", 
            "title": "Dexcom Permissions"
        }, 
        {
            "location": "/operation/loop-settings/mdt-pump/", 
            "text": "Medtronic Pump Users\n\u2301\n\n\nYour Loop won\u2019t have much showing initially until we get some basic settings input. The beginning step will be to add a pump to your Loop. If you are using a Medtronic pump, you can follow along for the rest of this page. If, however, you are using an Omnipod pump, please head over to \nthis page\n instead.\n\n\nPrepare Medtronic Pump\n\u2301\n\n\n\n\nBefore you begin the rest of the setup process, there are several steps on your Medtronic pump that you will need to complete prior to moving on with Loop setup. \nDO NOT SKIP THESE STEPS OR YOUR LOOP WILL NOT WORK.\n\n\n\n\n\n\nTurn off Patterns under the basal menu settings. This will force Loop to use your \"Standard\" basal rate schedule.\n\n\nMake sure your standard basal rate schedule is up-to-date and accurate. Loop will automatically import your pump's existing standard basal rate schedule when you add your pump in the subsequent parts of this page. \nIf you change basal rates later...make sure to make those changes in the Loop app and use Loop to save the changes back to the pump.  If you make changes directly in the pump, Loop will not automatically know about those changes and you will cause a mismatch.\n\n\nSet your pump's \nTemp Basal Type\n to \nInsulin Rate (U/hr)\n. Do NOT use percentage. Your Loop will not run unless your temp basal type is set to units/hour.\n\n\nMake sure your maximum basal rate and maximum bolus (those are particular settings in the pump) are reasonably set for your particular needs. For new Loop users, a maximum basal rate equal to approximately 2-4 times your highest scheduled basal rate is a good starting point as you learn Loop and dial in your other settings. You can adjust as your comfort and use of Loop develop.\n\n\nSet Remote Devices to \nON\n and enter any random ID (000000 will work). This setting is found in the pump's Utilities menu (for x23 continue to Connect Devices, Remotes) and turn \nON\n the Remote Options.\n\n\nCancel any currently running extended or dual wave boluses.  Loop cannot loop with those running.\n\n\nMake sure the other settings in your pump, such as bolus wizard settings, are up-to-date so that if you stop using Loop, those settings will be accurate for non-Loop traditional pump use.\n\n\n\n\nSelect Pump Type\n\u2301\n\n\nLet\u2019s start by clicking on the Loop Settings button in the tool bar at the bottom of your Loop app. It looks like a little sprocket. On the settings screen that opens, click on \nAdd Pump\n and select the \nMedtronic pump\n option that appears.\n\n\n\n\n\n\n\n\n\n\n\nPump Pairing\n\u2301\n\n\nYou now need to follow a few simple screen prompts to add your Medtronic pump to Loop:\n\n\n\n\nMake sure your RileyLink is turned on and nearby, then you will see a RileyLink listed in this area of the settings.  Actually, you will see a list of any RileyLinks that are in the nearby area. Slide on the toggle for your RileyLink.\n\n\nAdd your pump's region, color, and serial number.\n\n\nClick the \nContinue\n button to finish the addition of your pump.\n\n\n\n\n\n\n\n\n\n\n\n\n\nFor x23 and x54 Medtronic pump users only\n\n\n\n\n\n\nFor x23 and x54 Medtronic pump users, there is a packet of information special to those pumps called MySentry messages. If you have never setup this part of the pump previously, you may see a screen, called \"Pump Broadcasts\", at this point in the setup process.\nFollow the directions on the screen. They will require you to take some manual steps on your pump to \"pair\" it with your Loop app.\nBasically, you will need to go to your pump's main menu, scroll down to Utilities, then Connect Devices, then Other Devices, turn that setting On, and then select Find Device. Once you do that, click on the \nContinue\n button in Loop app and the pairing will take place. This will allow those MySentry packets of information to flow to Loop app.\nThis step does not apply for x22 or x15 pump users, since those pumps do not have MySentry capabilities.\n\n\n\n\n\n\nNow that your pump is paired with Loop, you will be finishing these steps:\n\n\n\n\nChange your pump time using the Loop app (and read all the info on that screen)\n\n\nImport your pump's basal rate schedule, maximum basal rate, and maximum bolus (maximums are collectively called \"delivery limits\" in Loop)\n\n\nSelect your pump's battery type (lithium or alakine)\n\n\nLeave the Preferred Data Souce on Event History \n\n\n\n\nEvent History must be selected for Nightscout to display temp basals, carbs, and boluses from Loop.\n  Event History must also be selected in order for prime events to be detected and NOT contribute to IOB during site changes. Please just leave the Preferred Data Source on Event History.\n\n\n\n\n\n\n\n\n\nNext Step: Add CGM\n\u2301\n\n\nCongrats! You've added your Medtronic pump to your Loop app. Now, click on the settings button in the upper left corner to take you back to Loop's settings menu. Your next step is to \nAdd CGM\n to your Loop app. After all, without CGM data, your Loop won't loop.", 
            "title": "Add Medtronic"
        }, 
        {
            "location": "/operation/loop-settings/mdt-pump/#medtronic-pump-users", 
            "text": "Your Loop won\u2019t have much showing initially until we get some basic settings input. The beginning step will be to add a pump to your Loop. If you are using a Medtronic pump, you can follow along for the rest of this page. If, however, you are using an Omnipod pump, please head over to  this page  instead.", 
            "title": "Medtronic Pump Users"
        }, 
        {
            "location": "/operation/loop-settings/mdt-pump/#prepare-medtronic-pump", 
            "text": "Before you begin the rest of the setup process, there are several steps on your Medtronic pump that you will need to complete prior to moving on with Loop setup.  DO NOT SKIP THESE STEPS OR YOUR LOOP WILL NOT WORK.    Turn off Patterns under the basal menu settings. This will force Loop to use your \"Standard\" basal rate schedule.  Make sure your standard basal rate schedule is up-to-date and accurate. Loop will automatically import your pump's existing standard basal rate schedule when you add your pump in the subsequent parts of this page.  If you change basal rates later...make sure to make those changes in the Loop app and use Loop to save the changes back to the pump.  If you make changes directly in the pump, Loop will not automatically know about those changes and you will cause a mismatch.  Set your pump's  Temp Basal Type  to  Insulin Rate (U/hr) . Do NOT use percentage. Your Loop will not run unless your temp basal type is set to units/hour.  Make sure your maximum basal rate and maximum bolus (those are particular settings in the pump) are reasonably set for your particular needs. For new Loop users, a maximum basal rate equal to approximately 2-4 times your highest scheduled basal rate is a good starting point as you learn Loop and dial in your other settings. You can adjust as your comfort and use of Loop develop.  Set Remote Devices to  ON  and enter any random ID (000000 will work). This setting is found in the pump's Utilities menu (for x23 continue to Connect Devices, Remotes) and turn  ON  the Remote Options.  Cancel any currently running extended or dual wave boluses.  Loop cannot loop with those running.  Make sure the other settings in your pump, such as bolus wizard settings, are up-to-date so that if you stop using Loop, those settings will be accurate for non-Loop traditional pump use.", 
            "title": "Prepare Medtronic Pump"
        }, 
        {
            "location": "/operation/loop-settings/mdt-pump/#select-pump-type", 
            "text": "Let\u2019s start by clicking on the Loop Settings button in the tool bar at the bottom of your Loop app. It looks like a little sprocket. On the settings screen that opens, click on  Add Pump  and select the  Medtronic pump  option that appears.", 
            "title": "Select Pump Type"
        }, 
        {
            "location": "/operation/loop-settings/mdt-pump/#pump-pairing", 
            "text": "You now need to follow a few simple screen prompts to add your Medtronic pump to Loop:   Make sure your RileyLink is turned on and nearby, then you will see a RileyLink listed in this area of the settings.  Actually, you will see a list of any RileyLinks that are in the nearby area. Slide on the toggle for your RileyLink.  Add your pump's region, color, and serial number.  Click the  Continue  button to finish the addition of your pump.       For x23 and x54 Medtronic pump users only    For x23 and x54 Medtronic pump users, there is a packet of information special to those pumps called MySentry messages. If you have never setup this part of the pump previously, you may see a screen, called \"Pump Broadcasts\", at this point in the setup process. Follow the directions on the screen. They will require you to take some manual steps on your pump to \"pair\" it with your Loop app. Basically, you will need to go to your pump's main menu, scroll down to Utilities, then Connect Devices, then Other Devices, turn that setting On, and then select Find Device. Once you do that, click on the  Continue  button in Loop app and the pairing will take place. This will allow those MySentry packets of information to flow to Loop app. This step does not apply for x22 or x15 pump users, since those pumps do not have MySentry capabilities.    Now that your pump is paired with Loop, you will be finishing these steps:   Change your pump time using the Loop app (and read all the info on that screen)  Import your pump's basal rate schedule, maximum basal rate, and maximum bolus (maximums are collectively called \"delivery limits\" in Loop)  Select your pump's battery type (lithium or alakine)  Leave the Preferred Data Souce on Event History    Event History must be selected for Nightscout to display temp basals, carbs, and boluses from Loop.   Event History must also be selected in order for prime events to be detected and NOT contribute to IOB during site changes. Please just leave the Preferred Data Source on Event History.", 
            "title": "Pump Pairing"
        }, 
        {
            "location": "/operation/loop-settings/mdt-pump/#next-step-add-cgm", 
            "text": "Congrats! You've added your Medtronic pump to your Loop app. Now, click on the settings button in the upper left corner to take you back to Loop's settings menu. Your next step is to  Add CGM  to your Loop app. After all, without CGM data, your Loop won't loop.", 
            "title": "Next Step: Add CGM"
        }, 
        {
            "location": "/operation/loop-settings/omnipod-pump/", 
            "text": "Omnipod Users\n\u2301\n\n\nYour Loop won\u2019t have much showing initially until we get some basic settings input. The beginning step will be to add a pump to your Loop. If you are using an Omnipod pump, you can follow along for the rest of this page. If, however, you are using a Medtronic pump, please head over to \nthis page\n instead.\n\n\nSelect Pump Type\n\u2301\n\n\nLet\u2019s start by clicking on the Loop Settings button in the toolbar at the bottom of your Loop app. It looks like a little sprocket. On the settings screen that opens, click on \nAdd Pump\n and select the \nOmnipod\n option that appears.\n\n\n\n\n\n\n\n\n\n\n\nSelect RileyLink\n\u2301\n\n\nA list of all RileyLinks in the nearby area will display in the RileyLink Setup screen. Select your RileyLink by sliding the toggle to display green and then press the blue \nContinue\n button at the bottom of the screen. If your RileyLink does not appear, make sure that its switch is turned on (switch slide up toward the case's keyring) and lipo is charged.\n\n\n\n\nNew RileyLink\n\n\nNew RileyLinks won't have a name listed next to their slider at first. The name will only be displayed after connecting a RileyLink to a Loop for the first time. So, if all you see in the device list is a little toggle off to the left and no \"RileyLink\" name...go ahead and switch that toggle. The RileyLink name will appear after that toggle is green.\n\n\n\n\n\n\n\n\n\n\n\n\n\nDelivery Limits and Basals\n\u2301\n\n\nThe next screen will offer two areas where you will need to enter information:\n\n\n\n\n\n\nDelivery Limits: Delivery Limits are both your maximum basal rate and your maximum bolus amount. Your maximum basal rate will limit how aggressive your Loop will be able to set temporary basals to treat high blood glucose. Typically, new users should set this value conservatively around 3 times your highest scheduled basal rate until your comfort and experience with Loop develops.\n\n\n\n\n\n\nBasal Rates: Enter your scheduled basal rates, beginning at midnight. Consistent with PO use, the scheduled basal rates have a maximum of 24 entries, no 0 u/hr entries allows, and rate increments of 0.05 u/hr.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhen you finish entering these values, press the blue \nContinue\n button on the bottom of the Pod Settings screen to continue with the next steps of Pod setup.\n\n\nPair Pod\n\u2301\n\n\n\n\nPlace the Pod near RileyLink\n\n\nFill the Pod with insulin until it beeps (minimum fill is 80 units)\n\n\nClick the \nPair\n button\n\n\nWait while the progress bar for priming completes\n\n\nPress the \nContinue\n button when the blue checkmark confirms priming is complete\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsert Cannula\n\u2301\n\n\n\n\nPrepare your insertion site\n\n\nRemove the Pod's needle cap and adhesive backing\n\n\nIf the cannula is safely tucked away, apply the Pod to your desired infusion site. If cannula is sticking out, press \ncancel\n in the upper right corner of the screen and try a new Pod.\n\n\nPress the \nInsert Cannula\n button.\n\n\nListen to the clicks filling the cannula, wait for insertion and the progress bar to complete. The number of clicks to insertion is not consistent. The cannula will deploy before the progress bar is completed.\n\n\nConfirm cannula has deployed by looking through the peep-hole on the Pod.\n\n\nPress the \nContinue\n button\n\n\n\n\n\n\n\n\n\n\n\n\n\nExpiration Reminder\n\u2301\n\n\nFinish the setup with using the default expiration reminder time (2 hours before a full 3-days usage) or set the expiration notification to a more convenient time to your liking which will show up in your locked screen and vibrates at that time. Setup is complete and your Pod is ready for use when you press the final button.\n\n\n\n\n\n\n\n\n\n\n\nPod Settings\n\u2301\n\n\nAfter the Pod setup is completed, you will be on the Pod Settings screen. This screen will provide a variety of important information about your Pod. You can always come back to this screen later by tapping on the Omnipod image in your Loop settings.\n\n\n\n\n\n\n\n\n\n\n\nDevice Information\n\u2301\n\n\nThe first section has information regarding how long the Pod has been active, expiration date and time, Pod identifying information (if you have to call in for a Pod failure).\n\n\nPod commands\n\u2301\n\n\nThere are two commands that you can issue through Loop to the Pod. \n\n\n\n\nSuspend Delivery: This command will suspend all insulin delivery; basals, temp basals, and boluses in progress. When you press suspend delivery, all insulin delivery will stop indefinitely. \n\n\n\n\n\n\n\n\n\n\n\nA banner notice will appear on the Loop's main screen when insulin delivery is suspended. \n\n\n\n\n\n\n\n\n\nYou will need to press \nTap to Resume\n in the banner or the \nResume Delivery\n button in the Pod settings to resume your scheduled basal rate and let Loop get back to action. Bolus deliveries will not be resumed, if they were interrupted.\n\n\n\n\nReplace Pod: This command should be used to deactivate a Pod prior to replacing it.\n\n\n\n\n\n\n\n\n\n\n\nConfiguration\n\u2301\n\n\n\n\nExpiration Reminder: With the Expiration Reminder you can set a convenient time to get a notification to replace your Pod. Using the standard setting, Loop sets the default to a full 3 days. You can set the reminder to any day and time up until 80 hours. This changes the PDM default which sets the alert always to 2 hours before a full 3-day (72 hours) run. This assumes you will not have run out of insulin before that time. In the event your Pod runs out of insulin, then you will get a \"Pod empty\" notification.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChange Time Zone: If you are traveling for short periods of time, you do not have to worry about changing the time on your Pod. However, if you are going to be away from home for longer periods of time, you will want to update your Pod's basal schedule to match local time by selecting the \nChange Time Zone\n command when convenient. Using this command will move your basal schedule on your current Pod to the new time. If you start a new Pod session the new time zone will be used. Please wait until you see \nSucceeded\n appear on the page to ensure the command has successfully been received by the Pod.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTest Command: This command is used only by the developers to test Omnipod commands in Loop. It currently issues a \"get status\" command and can be used to update your screen details if needed or force a fault error to generate in the issue report after getting a screaming Pod.\n\n\n\n\nStatus\n\u2301\n\n\nThis section provides information about your Pod's status. \n\n\n\n\nBolus Delivery: This line will let you know the % progress of any ongoing bolus. \n\n\n\n\n\n\n\n\n\n\n\n\n\nBasal Delivery: This line will let you know what is active: The normal basal \nschedule\n,the \nU/hour\n of a 30 minute Temp Basal or if the Pod is \nsuspended\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\nAlarms: If your Pod is screaming or beeping an alarm, this line will display information about the alarm. By clicking on this line, you can clear or \"snooze\" the alarm status.\n\n\n\n\n\n\n\n\n\n\n\n\n\nReservoir: Pods do not report the volume of insulin remaining in the reservoir until there are less than 50 units remaining. So, typically you will see \"50+ U\" in this line for quite a while with a new Pod.\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsulin Delivered: This line is the total amount of insulin, both basal and bolus, delivered by the Pod since it was activated.\n\n\n\n\n\n\n\n\n\n\n\nNext Step: Add CGM\n\u2301\n\n\nCongrats! You've added your Pod to your Loop app. Now, click on the \nDone\n button in the upper right corner of your Pump Settings screen to take you back to the Loop's settings. Your next step is to \nAdd CGM\n to your Loop app. After all, without CGM data, your Loop won't loop.", 
            "title": "Add Omnipod"
        }, 
        {
            "location": "/operation/loop-settings/omnipod-pump/#omnipod-users", 
            "text": "Your Loop won\u2019t have much showing initially until we get some basic settings input. The beginning step will be to add a pump to your Loop. If you are using an Omnipod pump, you can follow along for the rest of this page. If, however, you are using a Medtronic pump, please head over to  this page  instead.", 
            "title": "Omnipod Users"
        }, 
        {
            "location": "/operation/loop-settings/omnipod-pump/#select-pump-type", 
            "text": "Let\u2019s start by clicking on the Loop Settings button in the toolbar at the bottom of your Loop app. It looks like a little sprocket. On the settings screen that opens, click on  Add Pump  and select the  Omnipod  option that appears.", 
            "title": "Select Pump Type"
        }, 
        {
            "location": "/operation/loop-settings/omnipod-pump/#select-rileylink", 
            "text": "A list of all RileyLinks in the nearby area will display in the RileyLink Setup screen. Select your RileyLink by sliding the toggle to display green and then press the blue  Continue  button at the bottom of the screen. If your RileyLink does not appear, make sure that its switch is turned on (switch slide up toward the case's keyring) and lipo is charged.   New RileyLink  New RileyLinks won't have a name listed next to their slider at first. The name will only be displayed after connecting a RileyLink to a Loop for the first time. So, if all you see in the device list is a little toggle off to the left and no \"RileyLink\" name...go ahead and switch that toggle. The RileyLink name will appear after that toggle is green.", 
            "title": "Select RileyLink"
        }, 
        {
            "location": "/operation/loop-settings/omnipod-pump/#delivery-limits-and-basals", 
            "text": "The next screen will offer two areas where you will need to enter information:    Delivery Limits: Delivery Limits are both your maximum basal rate and your maximum bolus amount. Your maximum basal rate will limit how aggressive your Loop will be able to set temporary basals to treat high blood glucose. Typically, new users should set this value conservatively around 3 times your highest scheduled basal rate until your comfort and experience with Loop develops.    Basal Rates: Enter your scheduled basal rates, beginning at midnight. Consistent with PO use, the scheduled basal rates have a maximum of 24 entries, no 0 u/hr entries allows, and rate increments of 0.05 u/hr.        When you finish entering these values, press the blue  Continue  button on the bottom of the Pod Settings screen to continue with the next steps of Pod setup.", 
            "title": "Delivery Limits and Basals"
        }, 
        {
            "location": "/operation/loop-settings/omnipod-pump/#pair-pod", 
            "text": "Place the Pod near RileyLink  Fill the Pod with insulin until it beeps (minimum fill is 80 units)  Click the  Pair  button  Wait while the progress bar for priming completes  Press the  Continue  button when the blue checkmark confirms priming is complete", 
            "title": "Pair Pod"
        }, 
        {
            "location": "/operation/loop-settings/omnipod-pump/#insert-cannula", 
            "text": "Prepare your insertion site  Remove the Pod's needle cap and adhesive backing  If the cannula is safely tucked away, apply the Pod to your desired infusion site. If cannula is sticking out, press  cancel  in the upper right corner of the screen and try a new Pod.  Press the  Insert Cannula  button.  Listen to the clicks filling the cannula, wait for insertion and the progress bar to complete. The number of clicks to insertion is not consistent. The cannula will deploy before the progress bar is completed.  Confirm cannula has deployed by looking through the peep-hole on the Pod.  Press the  Continue  button", 
            "title": "Insert Cannula"
        }, 
        {
            "location": "/operation/loop-settings/omnipod-pump/#expiration-reminder", 
            "text": "Finish the setup with using the default expiration reminder time (2 hours before a full 3-days usage) or set the expiration notification to a more convenient time to your liking which will show up in your locked screen and vibrates at that time. Setup is complete and your Pod is ready for use when you press the final button.", 
            "title": "Expiration Reminder"
        }, 
        {
            "location": "/operation/loop-settings/omnipod-pump/#pod-settings", 
            "text": "After the Pod setup is completed, you will be on the Pod Settings screen. This screen will provide a variety of important information about your Pod. You can always come back to this screen later by tapping on the Omnipod image in your Loop settings.", 
            "title": "Pod Settings"
        }, 
        {
            "location": "/operation/loop-settings/omnipod-pump/#device-information", 
            "text": "The first section has information regarding how long the Pod has been active, expiration date and time, Pod identifying information (if you have to call in for a Pod failure).", 
            "title": "Device Information"
        }, 
        {
            "location": "/operation/loop-settings/omnipod-pump/#pod-commands", 
            "text": "There are two commands that you can issue through Loop to the Pod.    Suspend Delivery: This command will suspend all insulin delivery; basals, temp basals, and boluses in progress. When you press suspend delivery, all insulin delivery will stop indefinitely.       A banner notice will appear on the Loop's main screen when insulin delivery is suspended.      You will need to press  Tap to Resume  in the banner or the  Resume Delivery  button in the Pod settings to resume your scheduled basal rate and let Loop get back to action. Bolus deliveries will not be resumed, if they were interrupted.   Replace Pod: This command should be used to deactivate a Pod prior to replacing it.", 
            "title": "Pod commands"
        }, 
        {
            "location": "/operation/loop-settings/omnipod-pump/#configuration", 
            "text": "Expiration Reminder: With the Expiration Reminder you can set a convenient time to get a notification to replace your Pod. Using the standard setting, Loop sets the default to a full 3 days. You can set the reminder to any day and time up until 80 hours. This changes the PDM default which sets the alert always to 2 hours before a full 3-day (72 hours) run. This assumes you will not have run out of insulin before that time. In the event your Pod runs out of insulin, then you will get a \"Pod empty\" notification.        Change Time Zone: If you are traveling for short periods of time, you do not have to worry about changing the time on your Pod. However, if you are going to be away from home for longer periods of time, you will want to update your Pod's basal schedule to match local time by selecting the  Change Time Zone  command when convenient. Using this command will move your basal schedule on your current Pod to the new time. If you start a new Pod session the new time zone will be used. Please wait until you see  Succeeded  appear on the page to ensure the command has successfully been received by the Pod.       Test Command: This command is used only by the developers to test Omnipod commands in Loop. It currently issues a \"get status\" command and can be used to update your screen details if needed or force a fault error to generate in the issue report after getting a screaming Pod.", 
            "title": "Configuration"
        }, 
        {
            "location": "/operation/loop-settings/omnipod-pump/#status", 
            "text": "This section provides information about your Pod's status.    Bolus Delivery: This line will let you know the % progress of any ongoing bolus.        Basal Delivery: This line will let you know what is active: The normal basal  schedule ,the  U/hour  of a 30 minute Temp Basal or if the Pod is  suspended .       Alarms: If your Pod is screaming or beeping an alarm, this line will display information about the alarm. By clicking on this line, you can clear or \"snooze\" the alarm status.       Reservoir: Pods do not report the volume of insulin remaining in the reservoir until there are less than 50 units remaining. So, typically you will see \"50+ U\" in this line for quite a while with a new Pod.       Insulin Delivered: This line is the total amount of insulin, both basal and bolus, delivered by the Pod since it was activated.", 
            "title": "Status"
        }, 
        {
            "location": "/operation/loop-settings/omnipod-pump/#next-step-add-cgm", 
            "text": "Congrats! You've added your Pod to your Loop app. Now, click on the  Done  button in the upper right corner of your Pump Settings screen to take you back to the Loop's settings. Your next step is to  Add CGM  to your Loop app. After all, without CGM data, your Loop won't loop.", 
            "title": "Next Step: Add CGM"
        }, 
        {
            "location": "/operation/loop-settings/cgm/", 
            "text": "Add CGM\n\u2301\n\n\nNow we need to add a CGM source so that Loop has BG data. From the Loop settings screen, select \nAdd CGM\n.\n\n\n\n\n\n\n\n\n\n\n\nThe standard selections available will be:\n\n\n\n\nDexcom G6\n\n\nDexcom G5\n\n\nDexcom G4\n\n\nDexcom Share\n\n\n\n\n\n\nIf you added a compatible Medtronic pump earlier in the setup process, then you will also see an option for the compatible Medtronic sensor that works with that same pump. If you are using a compatible MDT sensor, select that option and the CGM data will be uploaded to Loop when pump status is updated.\n\n\n\n\nDexcom G5 and G6\n\u2301\n\n\nThe Dexcom G5 and G6 options only require the addition of the active transmitter ID, and the matching Dexcom app to be running on the Loop iPhone. You do not have to add your Dexcom Share account credentials, but if you do, make sure they match what you originally entered into your Dexcom app. \n\n\nWhen you change transmitters, you will need to select the \nDelete CGM\n button at the very bottom of the CGM info page in Loop. Then you will select your Dexcom system again and add the new transmitter ID. You cannot just tap on your old transmitter ID to update it. \n\n\nIf you don't update your transmitter ID when you change active transmitters, your Loop will be forced to go to your Dexcom Share server to get your CGM data and will not work without cell or wifi connection. When Loop is using data from Dexcom Share servers, a small cloud will appear above the BG reading in Loop and should tip you off that maybe you forgot to update your transmitter ID.\n\n\nDexcom G4\n\u2301\n\n\nDexcom G4 users will need the Dexcom G4 Share2 app active on their iPhone and paired to their Dexcom G4 Share receiver.\n\n\nDexcom Share\n\u2301\n\n\nThe Dexcom Share selection is primarily for people who wish to test Loop function without a local CGM source and who are not running the Dexcom app on their Loop iPhone. This selection will require login access to a Dexcom Share account with live data and active internet connection in order to work.\n\n\nAbout Dexcom Share credentials\n\u2301\n\n\nFor all selections, the Dexcom Share credentials (in other words, account login) is the same as what you used to log in to the active Dexcom app on your iPhone. \nDexcom Share account is not always the same login info as your Dexcom Clarity account.\n For G4 users, the Share account is found in the account tab on the app. For G5/G6 users, unfortunately, there is no information in the app displaying what your account name is. The information is entered when you first log in to the app and then is never displayed again, nor visible under any information screens. If you have forgotten your G5/G6 account info, you can delete the Dexcom app and redownload it to try logging in again. This will not cause a restart of any sensor sessions in progress.\n\n\nSpike Users\n\u2301\n\n\nUsers who are using Spike app to access other CGM types (or to avoid using the Dexcom app), you will need to follow the directions contained within the Spike app in order to build/modify Loop with Spike. Loop does not natively support Spike app and does not currently plan to. You are responsible for modifying or adapting Loop in order to use Spike so that it is an available option as a CGM source.\n\n\nNext Step: Configuration\n\u2301\n\n\nNow that you have added your CGM source, we need to complete the configuration and settings in your Loop. Please head over to the \nConfiguration page\n for guidance with this important part of Loop's setup.", 
            "title": "Step 3: Add CGM"
        }, 
        {
            "location": "/operation/loop-settings/cgm/#add-cgm", 
            "text": "Now we need to add a CGM source so that Loop has BG data. From the Loop settings screen, select  Add CGM .      The standard selections available will be:   Dexcom G6  Dexcom G5  Dexcom G4  Dexcom Share    If you added a compatible Medtronic pump earlier in the setup process, then you will also see an option for the compatible Medtronic sensor that works with that same pump. If you are using a compatible MDT sensor, select that option and the CGM data will be uploaded to Loop when pump status is updated.", 
            "title": "Add CGM"
        }, 
        {
            "location": "/operation/loop-settings/cgm/#dexcom-g5-and-g6", 
            "text": "The Dexcom G5 and G6 options only require the addition of the active transmitter ID, and the matching Dexcom app to be running on the Loop iPhone. You do not have to add your Dexcom Share account credentials, but if you do, make sure they match what you originally entered into your Dexcom app.   When you change transmitters, you will need to select the  Delete CGM  button at the very bottom of the CGM info page in Loop. Then you will select your Dexcom system again and add the new transmitter ID. You cannot just tap on your old transmitter ID to update it.   If you don't update your transmitter ID when you change active transmitters, your Loop will be forced to go to your Dexcom Share server to get your CGM data and will not work without cell or wifi connection. When Loop is using data from Dexcom Share servers, a small cloud will appear above the BG reading in Loop and should tip you off that maybe you forgot to update your transmitter ID.", 
            "title": "Dexcom G5 and G6"
        }, 
        {
            "location": "/operation/loop-settings/cgm/#dexcom-g4", 
            "text": "Dexcom G4 users will need the Dexcom G4 Share2 app active on their iPhone and paired to their Dexcom G4 Share receiver.", 
            "title": "Dexcom G4"
        }, 
        {
            "location": "/operation/loop-settings/cgm/#dexcom-share", 
            "text": "The Dexcom Share selection is primarily for people who wish to test Loop function without a local CGM source and who are not running the Dexcom app on their Loop iPhone. This selection will require login access to a Dexcom Share account with live data and active internet connection in order to work.", 
            "title": "Dexcom Share"
        }, 
        {
            "location": "/operation/loop-settings/cgm/#about-dexcom-share-credentials", 
            "text": "For all selections, the Dexcom Share credentials (in other words, account login) is the same as what you used to log in to the active Dexcom app on your iPhone.  Dexcom Share account is not always the same login info as your Dexcom Clarity account.  For G4 users, the Share account is found in the account tab on the app. For G5/G6 users, unfortunately, there is no information in the app displaying what your account name is. The information is entered when you first log in to the app and then is never displayed again, nor visible under any information screens. If you have forgotten your G5/G6 account info, you can delete the Dexcom app and redownload it to try logging in again. This will not cause a restart of any sensor sessions in progress.", 
            "title": "About Dexcom Share credentials"
        }, 
        {
            "location": "/operation/loop-settings/cgm/#spike-users", 
            "text": "Users who are using Spike app to access other CGM types (or to avoid using the Dexcom app), you will need to follow the directions contained within the Spike app in order to build/modify Loop with Spike. Loop does not natively support Spike app and does not currently plan to. You are responsible for modifying or adapting Loop in order to use Spike so that it is an available option as a CGM source.", 
            "title": "Spike Users"
        }, 
        {
            "location": "/operation/loop-settings/cgm/#next-step-configuration", 
            "text": "Now that you have added your CGM source, we need to complete the configuration and settings in your Loop. Please head over to the  Configuration page  for guidance with this important part of Loop's setup.", 
            "title": "Next Step: Configuration"
        }, 
        {
            "location": "/operation/loop-settings/configurations/", 
            "text": "Configuration\n\u2301\n\n\nThis page will cover two general parts of the Loop's settings, circled in red in the screenshot below. The headings will match the flow of the screen, top to bottom.\n\n\n\n\n\n\nThe first circled section covers your Loop's closed/open loop status and Loop's Issue Report.\n\n\n\n\n\n\nThe second circled section is the configuration section. This section contains a lot of really important settings that control how your Loop will calculate your predicted BG curve. Given the importance of your predicted BG curve to Loop's actions, please make sure you read over this page carefully to know how to navigate the selections and entries.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nClosed/Open Loop\n\u2301\n\n\nThe Closed Loop switch controls whether Loop automatically enacts its recommended temporary basal adjustments (closed loop mode) or whether you have to manually tap to enact the recommendations (open loop mode). In addition to the visual indicator on this switch discussed below, the \nLoop's status icon on the main screen\n will also appear differently depending on the mode selected. Open loop mode will have an incomplete circle for the Loop's status icon.\n. \n\n\nOpen Loop Mode\n\u2301\n\n\n\n\n\n\n\n\n\nWhen the Closed Loop switch is in the (Off\n   ) position, Loop WILL NOT enact recommended temp basals automatically. Instead, Loop will display recommended temp basals on the main status display, just above the blood glucose graph. This is called \nopen loop\n, and is a good way to understand how Loop will function, and what type of recommendations it would make. If you click on the recommended temp basal line while in open loop mode, Loop will implement the temp basal.\n\n\nClosed Loop Mode\n\u2301\n\n\n\n\n\n\n \n\n\nWhen the Closed Loop switch is in the (\n   On) position, Loop WILL automatically enact recommended temp basals on the configured insulin pump. This is known as \nclosed loop\n. Typically, Loop will show the recommended temp basal just above the blood glucose graph prior to automatically enacting it. It may take a minute or so for the Loop to enact the recommended basal. Once the temp basal has been enacted successfully on the pump, the recommended temp basal will disappear from the screen and the new temp basal rate will be represented in the insulin delivery graphs.\n\n\nIssue Report\n\u2301\n\n\nIf you run into problems or errors with your Loop, an Issue Report can be used to help identify where the problem is occurring. The Issue Report is automatically generated and you can share it via email. Frequently, if you seek help with a technical problem, an Issue Report will provide insight for the developers and troubleshooters. Please email yourself an Issue Report anytime you are questioning Loop actions or displays. You can then use that Issue Report later to help debug the problem.\n\n\n\n\nBefore you continue further, a word about BG units\n\n\nEntries into the configuration section will be available in mg/dL or mmol/L automatically, based upon how your blood glucose values are received. By default they are set to mg/dL, however once CGM values arrive in mmol/L these Loop settings can be entered in mmol/L. \nIf you are planning to use mmol/L, be sure to wait to set your entries until after you have started to receive CGM values in Loop.\n If you do these in the wrong order, then your charts and entries may have incorrect units.\n\n\n\n\nCorrection Range\n\u2301\n\n\nThe correction range is your blood glucose range that you would like Loop to correct to. Correction range is not necessarily the same target blood glucose range that you have discussed with your endocrinologist; generally the doctor's range may be much wider. For example, you may keep a correction target of 100-110 for Loop to aim to, but use a desired BG target range of 80-180 when discussing things with your endo about \"time in range\".\n\n\n\n\n\n\n\n\n\n\n\nClick the + in the upper right corner to add correction BG range(s). You can have multiple ranges based on time of day, but the first setting of the day needs to begin at midnight.\n\n\nCorrection ranges can be a single number, such as 100-100 mg/dL, or a range such as 100-120 mg/dL. Generally speaking, if you choose to use a range, keeping the range between about 10-30 mg/dL between the lowest and highest value is a good starting place.\n\n\nOverride Ranges\n\u2301\n\n\nBelow the Correction Range entry is a section called \"Overrides\". Override ranges provide temporary alternate correction ranges. These override ranges will only be enacted when you specifically activate pre-meal or workout mode using the buttons on the main Loop display or watchface. While active, they replace the correction range for Loop's recommendations. If the override ranges are not entered in this section, the buttons will remain grey and unusable on the main screen's toolbar.\n\n\nPre-Meal:\n\nThe pre-meal override target can be used to as an easy way to get a small amount of insulin delivered before a meal in order to help control post-meal blood glucose spikes.\n\n\nIf your normal target is 100-110 mg/dL and pre-meal target is 80-80 mg/dL, for example, Loop will give you an extra push to get you to the lower target number before the meal. This early insulin brings you into the meal with a mini-prebolus. The pre-meal target, when activated by pressing on the icon, will stay active for one hour, until carbs are entered, or until it is manually cancelled...whichever comes first.\n\n\nLoop will adjust any insulin bolus as needed based on the extra insulin provided during this pre-meal time.\n\n\nWorkout Mode:\n\nWorkout override target is designed to temporarily set your target higher in anticipation of exercise or other activities which tend to make the user more insulin sensitive or need less insulin. By setting a higher temp target such as 140-160 mg/dL ahead of activity, Loop will recommend smaller basal rate(s) than normally scheduled in order to to bring blood glucose up to the higher target.\n\n\nThe success of this strategy will be dependent on how far in advance of activity the override target is set. Generally, users set the target approximately 1-2 hours in advance of planned activities, but the optimal timing will depend on the activity, duration, and intensity. Additionally, any insulin on board from recent boluses may overwhelm the Loop's ability to counteract exercise-induced lows through lower temp basals alone. Please see LoopTips.org for additional information about \nexercise and Loop\n.\n\n\nSuspend Threshold\n\u2301\n\n\nThe suspend threshold must be set up for successful configuration of Loop. \nYour Loop will not turn green without setting this value.\n This value affects both bolus and basal recommendations by Loop.\n\n\nBolus\n\u2301\n\n\n\n\nIf you are trying to bolus a meal while any part of the predicted BG curve is below this suspend threshold value, Loop will not recommend a bolus.  Instead, you will need to wait until your prediction curve is above the suspend threshold value in order to bolus.\n\n\n\n\nBasal\n\u2301\n\n\n\n\nIf your current or any point on your predicted BG curve is below the suspend threshold, Loop will always recommend a temporary basal rate of 0 U/hr.\n\n\n\n\nReasonable settings for suspend threshold will depend on user preference, but recommended not set lower than 65 mg/dL.\n\n\nBasal Rates\n\u2301\n\n\nYour basal rates have already been initially populated when you finished the \nAdd Pump\n part of the setup previously.  Only one basal schedule may be set in each Loop app. The basal increments are available according to the increments of the particular pump/pod you are using. Not all pumps provide the same increments for basal deliveries. Basal schedule must start at midnight and cannot contain rates of 0 U/hr.\n\n\nIf you need to edit your basal schedule, simply make the edits as needed and then click on \nSave to Pump...\n or \nSync With Pod\n button, depending on which pump you are using. \n\n\n\n\nIf you make any basal edits and use the \nCancel\n button to go back to the menu without successfully saving/syncing to pump/pod, the changes you made will not be saved. Loop makes saving/syncing to pump a mandatory step to successfully editing basal rates. If you get an error message while trying to save/sync the edited basal rates, please retry until successful.\n\n\n\n\nDelivery Limits\n\u2301\n\n\nThe maximum basal rate and maximum bolus settings are collectively referred to as Delivery Limits. This section will have been initially populated when you finished the \nAdd Pump\n part of the setup previously. For safety, similar to basal schedule, you must keep these values the same on both the Loop app and within the pump/pod settings. If you edit these settings in Loop app, always use the \nSave to Pump...\n or \nSync With Pod\n button, depending on which pump you are using.\n\n\nMaximum Basal Rate\n\u2301\n\n\nMaximum basal rate will cap the the maximum temporary basal rate that the Loop is allowed to enact to meet your correction range. Typically, Loop users set their maximum basal rate around 3-4 times their highest scheduled basal rate. When you are first beginning to use Loop, it is wise to start conservative (low) in setting your maximum basal rate. If your settings are incorrect in other areas (basal rates, insulin sensitivity, carb ratio, etc), you may need time to identify where settings need to be adjusted. This process is easier if Loop is given less latitude to set high basal rates. Gradually increase your maximum basal rate as your comfort and confidence in Loop increases. If you need help with your settings adjustment, head over to LoopTips for some \ninitial settings help\n\n\nMaximum Bolus\n\u2301\n\n\nEnter your desired single bolus maximum here. For safety, don't set a maximum bolus limit any higher than your typical large meal bolus.\n\n\nInsulin Model\n\u2301\n\n\nThere are four insulin models to choose from; Walsh, Rapid-Acting Adults, Rapid-Acting Children, and Fiasp. If you want to read the nitty-gritty discussion that went into the development of the Rapid-Acting and Fiasp curves (collectively called \"exponential insulin models\"), you can see that in GitHub \nhere\n.\n\n\nWe highly recommend selecting one of the exponential insulin models (in other words, not the Walsh model).\n \n\n\nA common new Loop user error is to select Walsh model in order to easily shorten their insulin duration (DIA) to one like they used prior to Looping. This almost invariably leads to insulin stacking. If you would like to read more about why the duration of insulin action is important in Loop vs how you've traditionally used it, please click \nhere\n to read a blog post about the subject. In summary, choosing Walsh curve just to shorten your DIA will lead to insulin stacking and less than desired bolusing recommendations.\n\n\nYou can click on each model and see what each model's insulin activity curve looks like, active one selected in blue. \n\n\n\n\n\n\n\n\n\nThe differences between the three exponential models (two Rapid-Acting and Fiasp) models has to do with the timing of the peak insulin activity timing. Not surprising, since Fiasp is marketed as the \"faster acting\" insulin. Currently all the exponential models are defaulted to an insulin duration of 6 hours, but the peak activity of the curves differs:\n\n\n\n\nRapid-acting adult curve peaks at 75 minutes\n\n\nRapid-acting child curve peaks at 65 minutes\n\n\nFiasp peaks curve peaks at 55 minutes\n\n\n\n\nCarb Ratios\n\u2301\n\n\nClick the + in the upper right to add carb ratios for various times of day. Loop works best if you have \ntested and optimized\n your carb ratio settings for accuracy.\n\n\n\n\nBeware of other apps writing carbs to Health app\n\n\nIf you are using a third-party app (such as Spike or MyFitness) that can write carbohydrates to the phone's Health app, you will need to edit the permissions to make sure Loop doesn't double carb entries.  You should disable the third-party app's permissions in Health so that they can only \nread\n and not \nwrite\n.  See \nCarb Entries with Third Party apps\n for more information about this setting.\n\n\n\n\nInsulin Sensitivities\n\u2301\n\n\nInsulin Sensitivity Factor (ISF) is the same term as Correction Factor used in some clinics and endocrinology offices. ISF represents the drop in blood glucose levels expected from one unit of insulin. Click the + in the upper right to add insulin sensitivities for various times of day. Loop works best if you have \ntested and optimized\n your ISF settings for accuracy. Insulin sensitivities can change for many reasons including waiting too long to change your infusion set. Loop will not auto-detect changes in ISF.\n\n\nIncorrectly set ISF is the most common cause of roller coaster BGs for new Loop users. You will need to raise (increase) your ISF value/number to help smooth a roller coaster BG trend. You can read about that topic more over in LoopTips \nhere\n. \n\n\nNext Step: Loop Services\n\u2301\n\n\nYou have completed the required configurations and settings in your Loop app. If you have a Nightscout site you'd like to connect Loop to, please continue on to the \nLoop Services page\n. \n\n\nIf you are not integrating with a Nightscout site and don't want any optional logging services connected, then please proceed to the \nLoop's displays page\n. Understanding the Loop displays can be a valuable tool to understanding your Loop's actions, and also for troubleshooting, if you are having issues.", 
            "title": "Step 4: Configurations"
        }, 
        {
            "location": "/operation/loop-settings/configurations/#configuration", 
            "text": "This page will cover two general parts of the Loop's settings, circled in red in the screenshot below. The headings will match the flow of the screen, top to bottom.    The first circled section covers your Loop's closed/open loop status and Loop's Issue Report.    The second circled section is the configuration section. This section contains a lot of really important settings that control how your Loop will calculate your predicted BG curve. Given the importance of your predicted BG curve to Loop's actions, please make sure you read over this page carefully to know how to navigate the selections and entries.", 
            "title": "Configuration"
        }, 
        {
            "location": "/operation/loop-settings/configurations/#closedopen-loop", 
            "text": "The Closed Loop switch controls whether Loop automatically enacts its recommended temporary basal adjustments (closed loop mode) or whether you have to manually tap to enact the recommendations (open loop mode). In addition to the visual indicator on this switch discussed below, the  Loop's status icon on the main screen  will also appear differently depending on the mode selected. Open loop mode will have an incomplete circle for the Loop's status icon. .", 
            "title": "Closed/Open Loop"
        }, 
        {
            "location": "/operation/loop-settings/configurations/#open-loop-mode", 
            "text": "When the Closed Loop switch is in the (Off    ) position, Loop WILL NOT enact recommended temp basals automatically. Instead, Loop will display recommended temp basals on the main status display, just above the blood glucose graph. This is called  open loop , and is a good way to understand how Loop will function, and what type of recommendations it would make. If you click on the recommended temp basal line while in open loop mode, Loop will implement the temp basal.", 
            "title": "Open Loop Mode"
        }, 
        {
            "location": "/operation/loop-settings/configurations/#closed-loop-mode", 
            "text": "When the Closed Loop switch is in the (    On) position, Loop WILL automatically enact recommended temp basals on the configured insulin pump. This is known as  closed loop . Typically, Loop will show the recommended temp basal just above the blood glucose graph prior to automatically enacting it. It may take a minute or so for the Loop to enact the recommended basal. Once the temp basal has been enacted successfully on the pump, the recommended temp basal will disappear from the screen and the new temp basal rate will be represented in the insulin delivery graphs.", 
            "title": "Closed Loop Mode"
        }, 
        {
            "location": "/operation/loop-settings/configurations/#issue-report", 
            "text": "If you run into problems or errors with your Loop, an Issue Report can be used to help identify where the problem is occurring. The Issue Report is automatically generated and you can share it via email. Frequently, if you seek help with a technical problem, an Issue Report will provide insight for the developers and troubleshooters. Please email yourself an Issue Report anytime you are questioning Loop actions or displays. You can then use that Issue Report later to help debug the problem.   Before you continue further, a word about BG units  Entries into the configuration section will be available in mg/dL or mmol/L automatically, based upon how your blood glucose values are received. By default they are set to mg/dL, however once CGM values arrive in mmol/L these Loop settings can be entered in mmol/L.  If you are planning to use mmol/L, be sure to wait to set your entries until after you have started to receive CGM values in Loop.  If you do these in the wrong order, then your charts and entries may have incorrect units.", 
            "title": "Issue Report"
        }, 
        {
            "location": "/operation/loop-settings/configurations/#correction-range", 
            "text": "The correction range is your blood glucose range that you would like Loop to correct to. Correction range is not necessarily the same target blood glucose range that you have discussed with your endocrinologist; generally the doctor's range may be much wider. For example, you may keep a correction target of 100-110 for Loop to aim to, but use a desired BG target range of 80-180 when discussing things with your endo about \"time in range\".      Click the + in the upper right corner to add correction BG range(s). You can have multiple ranges based on time of day, but the first setting of the day needs to begin at midnight.  Correction ranges can be a single number, such as 100-100 mg/dL, or a range such as 100-120 mg/dL. Generally speaking, if you choose to use a range, keeping the range between about 10-30 mg/dL between the lowest and highest value is a good starting place.", 
            "title": "Correction Range"
        }, 
        {
            "location": "/operation/loop-settings/configurations/#override-ranges", 
            "text": "Below the Correction Range entry is a section called \"Overrides\". Override ranges provide temporary alternate correction ranges. These override ranges will only be enacted when you specifically activate pre-meal or workout mode using the buttons on the main Loop display or watchface. While active, they replace the correction range for Loop's recommendations. If the override ranges are not entered in this section, the buttons will remain grey and unusable on the main screen's toolbar.  Pre-Meal: \nThe pre-meal override target can be used to as an easy way to get a small amount of insulin delivered before a meal in order to help control post-meal blood glucose spikes.  If your normal target is 100-110 mg/dL and pre-meal target is 80-80 mg/dL, for example, Loop will give you an extra push to get you to the lower target number before the meal. This early insulin brings you into the meal with a mini-prebolus. The pre-meal target, when activated by pressing on the icon, will stay active for one hour, until carbs are entered, or until it is manually cancelled...whichever comes first.  Loop will adjust any insulin bolus as needed based on the extra insulin provided during this pre-meal time.  Workout Mode: \nWorkout override target is designed to temporarily set your target higher in anticipation of exercise or other activities which tend to make the user more insulin sensitive or need less insulin. By setting a higher temp target such as 140-160 mg/dL ahead of activity, Loop will recommend smaller basal rate(s) than normally scheduled in order to to bring blood glucose up to the higher target.  The success of this strategy will be dependent on how far in advance of activity the override target is set. Generally, users set the target approximately 1-2 hours in advance of planned activities, but the optimal timing will depend on the activity, duration, and intensity. Additionally, any insulin on board from recent boluses may overwhelm the Loop's ability to counteract exercise-induced lows through lower temp basals alone. Please see LoopTips.org for additional information about  exercise and Loop .", 
            "title": "Override Ranges"
        }, 
        {
            "location": "/operation/loop-settings/configurations/#suspend-threshold", 
            "text": "The suspend threshold must be set up for successful configuration of Loop.  Your Loop will not turn green without setting this value.  This value affects both bolus and basal recommendations by Loop.", 
            "title": "Suspend Threshold"
        }, 
        {
            "location": "/operation/loop-settings/configurations/#bolus", 
            "text": "If you are trying to bolus a meal while any part of the predicted BG curve is below this suspend threshold value, Loop will not recommend a bolus.  Instead, you will need to wait until your prediction curve is above the suspend threshold value in order to bolus.", 
            "title": "Bolus"
        }, 
        {
            "location": "/operation/loop-settings/configurations/#basal", 
            "text": "If your current or any point on your predicted BG curve is below the suspend threshold, Loop will always recommend a temporary basal rate of 0 U/hr.   Reasonable settings for suspend threshold will depend on user preference, but recommended not set lower than 65 mg/dL.", 
            "title": "Basal"
        }, 
        {
            "location": "/operation/loop-settings/configurations/#basal-rates", 
            "text": "Your basal rates have already been initially populated when you finished the  Add Pump  part of the setup previously.  Only one basal schedule may be set in each Loop app. The basal increments are available according to the increments of the particular pump/pod you are using. Not all pumps provide the same increments for basal deliveries. Basal schedule must start at midnight and cannot contain rates of 0 U/hr.  If you need to edit your basal schedule, simply make the edits as needed and then click on  Save to Pump...  or  Sync With Pod  button, depending on which pump you are using.    If you make any basal edits and use the  Cancel  button to go back to the menu without successfully saving/syncing to pump/pod, the changes you made will not be saved. Loop makes saving/syncing to pump a mandatory step to successfully editing basal rates. If you get an error message while trying to save/sync the edited basal rates, please retry until successful.", 
            "title": "Basal Rates"
        }, 
        {
            "location": "/operation/loop-settings/configurations/#delivery-limits", 
            "text": "The maximum basal rate and maximum bolus settings are collectively referred to as Delivery Limits. This section will have been initially populated when you finished the  Add Pump  part of the setup previously. For safety, similar to basal schedule, you must keep these values the same on both the Loop app and within the pump/pod settings. If you edit these settings in Loop app, always use the  Save to Pump...  or  Sync With Pod  button, depending on which pump you are using.", 
            "title": "Delivery Limits"
        }, 
        {
            "location": "/operation/loop-settings/configurations/#maximum-basal-rate", 
            "text": "Maximum basal rate will cap the the maximum temporary basal rate that the Loop is allowed to enact to meet your correction range. Typically, Loop users set their maximum basal rate around 3-4 times their highest scheduled basal rate. When you are first beginning to use Loop, it is wise to start conservative (low) in setting your maximum basal rate. If your settings are incorrect in other areas (basal rates, insulin sensitivity, carb ratio, etc), you may need time to identify where settings need to be adjusted. This process is easier if Loop is given less latitude to set high basal rates. Gradually increase your maximum basal rate as your comfort and confidence in Loop increases. If you need help with your settings adjustment, head over to LoopTips for some  initial settings help", 
            "title": "Maximum Basal Rate"
        }, 
        {
            "location": "/operation/loop-settings/configurations/#maximum-bolus", 
            "text": "Enter your desired single bolus maximum here. For safety, don't set a maximum bolus limit any higher than your typical large meal bolus.", 
            "title": "Maximum Bolus"
        }, 
        {
            "location": "/operation/loop-settings/configurations/#insulin-model", 
            "text": "There are four insulin models to choose from; Walsh, Rapid-Acting Adults, Rapid-Acting Children, and Fiasp. If you want to read the nitty-gritty discussion that went into the development of the Rapid-Acting and Fiasp curves (collectively called \"exponential insulin models\"), you can see that in GitHub  here .  We highly recommend selecting one of the exponential insulin models (in other words, not the Walsh model).    A common new Loop user error is to select Walsh model in order to easily shorten their insulin duration (DIA) to one like they used prior to Looping. This almost invariably leads to insulin stacking. If you would like to read more about why the duration of insulin action is important in Loop vs how you've traditionally used it, please click  here  to read a blog post about the subject. In summary, choosing Walsh curve just to shorten your DIA will lead to insulin stacking and less than desired bolusing recommendations.  You can click on each model and see what each model's insulin activity curve looks like, active one selected in blue.      The differences between the three exponential models (two Rapid-Acting and Fiasp) models has to do with the timing of the peak insulin activity timing. Not surprising, since Fiasp is marketed as the \"faster acting\" insulin. Currently all the exponential models are defaulted to an insulin duration of 6 hours, but the peak activity of the curves differs:   Rapid-acting adult curve peaks at 75 minutes  Rapid-acting child curve peaks at 65 minutes  Fiasp peaks curve peaks at 55 minutes", 
            "title": "Insulin Model"
        }, 
        {
            "location": "/operation/loop-settings/configurations/#carb-ratios", 
            "text": "Click the + in the upper right to add carb ratios for various times of day. Loop works best if you have  tested and optimized  your carb ratio settings for accuracy.   Beware of other apps writing carbs to Health app  If you are using a third-party app (such as Spike or MyFitness) that can write carbohydrates to the phone's Health app, you will need to edit the permissions to make sure Loop doesn't double carb entries.  You should disable the third-party app's permissions in Health so that they can only  read  and not  write .  See  Carb Entries with Third Party apps  for more information about this setting.", 
            "title": "Carb Ratios"
        }, 
        {
            "location": "/operation/loop-settings/configurations/#insulin-sensitivities", 
            "text": "Insulin Sensitivity Factor (ISF) is the same term as Correction Factor used in some clinics and endocrinology offices. ISF represents the drop in blood glucose levels expected from one unit of insulin. Click the + in the upper right to add insulin sensitivities for various times of day. Loop works best if you have  tested and optimized  your ISF settings for accuracy. Insulin sensitivities can change for many reasons including waiting too long to change your infusion set. Loop will not auto-detect changes in ISF.  Incorrectly set ISF is the most common cause of roller coaster BGs for new Loop users. You will need to raise (increase) your ISF value/number to help smooth a roller coaster BG trend. You can read about that topic more over in LoopTips  here .", 
            "title": "Insulin Sensitivities"
        }, 
        {
            "location": "/operation/loop-settings/configurations/#next-step-loop-services", 
            "text": "You have completed the required configurations and settings in your Loop app. If you have a Nightscout site you'd like to connect Loop to, please continue on to the  Loop Services page .   If you are not integrating with a Nightscout site and don't want any optional logging services connected, then please proceed to the  Loop's displays page . Understanding the Loop displays can be a valuable tool to understanding your Loop's actions, and also for troubleshooting, if you are having issues.", 
            "title": "Next Step: Loop Services"
        }, 
        {
            "location": "/operation/loop-settings/overrides/", 
            "text": "Override Presets\n\u2301\n\n\nOverrides are a new feature to Loop; currently available on dev branch only. Overrides were developed as a method of more easily letting Loop know that you have a situation which is affecting your overall insulin needs, without needing to manually edit your basal schedule/ISF/carb ratios individually. Examples where this can be helpful include hormone cycles, steroid medications, exercise, and other situations which may temporarily (either shorter or longer term) affect your underlying insulin needs.\n\n\nOverride presets are (1) optional and (2) can be configured within Loop settings. Override presets take the place of the old Workout override. Once override presets are configured in Loop settings, they can be turned on/off by using the old Workout icon (heart icon in the toolbar) on the home screen of Loop.\n\n\n\n\n\n\n\n\n\n\n\nHow overrides work\n\u2301\n\n\nOverrides allow you to specify an overall iinsulin needs adjustment, a target range, and a duration for the override with each preset. The overall insulin needs adjustment is a multiplier adjustment to your scheduled basal rates, carb ratios, and insulin sensitivities all together. In other words, overall insulin needs percent will affect boluses and temp basal recommendations both.  \n\n\nNotice the fine-print below the orange bar showing the overall adjustment graphic...\"Basal, bolus, and correction insulin dose amounts are increased by 20%\" in the example with a 120% overall insulin needs adjustment. So, 100% overall needs means no multiplier will be applied to your basal, insulin sensitivities, or carb ratio...but you could still use a 100% preset simply to define a different target range for a period of time. \n\n\nRecapping: If you set an overall insulin needs adjustment below 100%, you are telling Loop that you are more insulin sensitive and will need a lighter touch with all things insulin. If you set an overall insulin needs adjustment above 100%, you are telling Loop that you are less insulin sensitive and will need a more aggressive touch with all things insulin.\n\n\n\n\n\n\n\n\n\n\n\nHow overrides do NOT work\n\u2301\n\n\nOverrides will work while you are Looping. Sounds obvious, right? But, the thing to remember is that the adjustments (multipliers) that overrides make are not saved back to your Medtronic pump or Omnipod. They only exist in the Loop app.\n\n\n\n\nIf you walk away from iPhone and/or RileyLink...\n\n\nIf you stop Looping (i.e., walk away from your gear), your existing temp basal will complete the remainder of whatever is left of its original 30 minutes and you will return to scheduled basal rates AS DEFINED IN YOUR LOOP SETTINGS. Your adjusted needs as set-up in any override will not continue if your Loop is not running properly. So you cannot set a 50% override and then hop in the ocean for a 2-mile swim without your iPhone and RileyLink and expect decreased basals of 50%. Just be aware that in situations where you need prolonged lower basals while away from Looping gear, you will need to edit your scheduled basals.\n\n\n\n\nMaking your override presets\n\u2301\n\n\nTo make your override presets, simply tap on the override presets row in Loop settings' configurations (below the Insulin Sensitivities row). Then click the \n+\n sign in the upper right corner to start a new preset entry.\n\n\nAll the rows need to be filled out in the preset in order to save your new preset\n\n\n\n\nPick an emoji\n\n\nEnter a name for the preset (the default \"Running\" is just a placeholder)\n\n\nEnter an overall insulin needs adjustment (10% to 200% in increments of ten percent, with 100% being your regularly scheduled insulin needs)\n\n\nEnter a target range (\nmake sure to enter the target range low-high\n or you could crash your app...do not enter the range high-low)\n\n\nSelect whether you want the override to run indefinitely or for a finite time.\n\n\n\n\nWhen you've made all those adjustments, save the the preset using the \"Save\" button in the upper right corner.\n\n\nActivating your override\n\u2301\n\n\nTo enact your override preset, you simply tap on the workout icon in the Loop's main screen toolbar and select your override from your list of presets that you programmed in previously in the step above.\n\n\n\n\n\n\n\n\n\nThe heart will be highlighted in a blue square while active and a banner notification will appear at the top of the Loop's main screen. Additionally, you'll see a darker blue target area indicating the override's target range and duration in your Loop's blood glucose graph.\n\n\n\n\n\n\n\n\n\nDeactivating your override\n\u2301\n\n\nThis is simple...just tap the heart icon to turn off your override at any time. Override presets that have been programmed with a finite duration will automatically deactivate when their time's duration reaches the end.\n\n\nRemote overrides (in initial testing)\n\u2301\n\n\nUnder very initial testing...\n You can also use your Nightscout site to activate/deactivate your Loop's override presets. To accomplish this, you will need to do some legwork as outlined on \nthis page for how how to setup Remote Overrides in Nightscout", 
            "title": "Step 5: Override Presets"
        }, 
        {
            "location": "/operation/loop-settings/overrides/#override-presets", 
            "text": "Overrides are a new feature to Loop; currently available on dev branch only. Overrides were developed as a method of more easily letting Loop know that you have a situation which is affecting your overall insulin needs, without needing to manually edit your basal schedule/ISF/carb ratios individually. Examples where this can be helpful include hormone cycles, steroid medications, exercise, and other situations which may temporarily (either shorter or longer term) affect your underlying insulin needs.  Override presets are (1) optional and (2) can be configured within Loop settings. Override presets take the place of the old Workout override. Once override presets are configured in Loop settings, they can be turned on/off by using the old Workout icon (heart icon in the toolbar) on the home screen of Loop.", 
            "title": "Override Presets"
        }, 
        {
            "location": "/operation/loop-settings/overrides/#how-overrides-work", 
            "text": "Overrides allow you to specify an overall iinsulin needs adjustment, a target range, and a duration for the override with each preset. The overall insulin needs adjustment is a multiplier adjustment to your scheduled basal rates, carb ratios, and insulin sensitivities all together. In other words, overall insulin needs percent will affect boluses and temp basal recommendations both.    Notice the fine-print below the orange bar showing the overall adjustment graphic...\"Basal, bolus, and correction insulin dose amounts are increased by 20%\" in the example with a 120% overall insulin needs adjustment. So, 100% overall needs means no multiplier will be applied to your basal, insulin sensitivities, or carb ratio...but you could still use a 100% preset simply to define a different target range for a period of time.   Recapping: If you set an overall insulin needs adjustment below 100%, you are telling Loop that you are more insulin sensitive and will need a lighter touch with all things insulin. If you set an overall insulin needs adjustment above 100%, you are telling Loop that you are less insulin sensitive and will need a more aggressive touch with all things insulin.", 
            "title": "How overrides work"
        }, 
        {
            "location": "/operation/loop-settings/overrides/#how-overrides-do-not-work", 
            "text": "Overrides will work while you are Looping. Sounds obvious, right? But, the thing to remember is that the adjustments (multipliers) that overrides make are not saved back to your Medtronic pump or Omnipod. They only exist in the Loop app.   If you walk away from iPhone and/or RileyLink...  If you stop Looping (i.e., walk away from your gear), your existing temp basal will complete the remainder of whatever is left of its original 30 minutes and you will return to scheduled basal rates AS DEFINED IN YOUR LOOP SETTINGS. Your adjusted needs as set-up in any override will not continue if your Loop is not running properly. So you cannot set a 50% override and then hop in the ocean for a 2-mile swim without your iPhone and RileyLink and expect decreased basals of 50%. Just be aware that in situations where you need prolonged lower basals while away from Looping gear, you will need to edit your scheduled basals.", 
            "title": "How overrides do NOT work"
        }, 
        {
            "location": "/operation/loop-settings/overrides/#making-your-override-presets", 
            "text": "To make your override presets, simply tap on the override presets row in Loop settings' configurations (below the Insulin Sensitivities row). Then click the  +  sign in the upper right corner to start a new preset entry.  All the rows need to be filled out in the preset in order to save your new preset   Pick an emoji  Enter a name for the preset (the default \"Running\" is just a placeholder)  Enter an overall insulin needs adjustment (10% to 200% in increments of ten percent, with 100% being your regularly scheduled insulin needs)  Enter a target range ( make sure to enter the target range low-high  or you could crash your app...do not enter the range high-low)  Select whether you want the override to run indefinitely or for a finite time.   When you've made all those adjustments, save the the preset using the \"Save\" button in the upper right corner.", 
            "title": "Making your override presets"
        }, 
        {
            "location": "/operation/loop-settings/overrides/#activating-your-override", 
            "text": "To enact your override preset, you simply tap on the workout icon in the Loop's main screen toolbar and select your override from your list of presets that you programmed in previously in the step above.     The heart will be highlighted in a blue square while active and a banner notification will appear at the top of the Loop's main screen. Additionally, you'll see a darker blue target area indicating the override's target range and duration in your Loop's blood glucose graph.", 
            "title": "Activating your override"
        }, 
        {
            "location": "/operation/loop-settings/overrides/#deactivating-your-override", 
            "text": "This is simple...just tap the heart icon to turn off your override at any time. Override presets that have been programmed with a finite duration will automatically deactivate when their time's duration reaches the end.", 
            "title": "Deactivating your override"
        }, 
        {
            "location": "/operation/loop-settings/overrides/#remote-overrides-in-initial-testing", 
            "text": "Under very initial testing...  You can also use your Nightscout site to activate/deactivate your Loop's override presets. To accomplish this, you will need to do some legwork as outlined on  this page for how how to setup Remote Overrides in Nightscout", 
            "title": "Remote overrides (in initial testing)"
        }, 
        {
            "location": "/operation/loop-settings/services/", 
            "text": "Loop Services\n\u2301\n\n\nAt the bottom of your Loop settings screen is a section called \"Services\". \nThe services listed in this section are all \nOPTIONAL\n.  You can choose to leave them empty and your Loop will still work.\n\n\n\n\n\n\n\n\n\nNightscout\n\u2301\n\n\nIf you have an existing Nightscout site, add the Site URL and API Secret to have your Loop data transmitted to your Nightscout site. If you can\u2019t remember your API Secret, it can be found under Settings, Reveal Config Vars for Heroku sites (or Application Settings, Connection Strings for Azure sites). \n\n\nThe two most common errors in filling out this section are:\n\n\n\n\nFailure to use \nhttps://\n  in the site URL.  If you use \nhttp://\n (see how that doesn't have the \"s\" at the end?), you will get an error message about an App Transport Security policy.  Take a look at the sample URL in the field before you start filling in that line, if you want an example to follow.\n\n\nHaving a trailing slash on the end of the URL. If you copy and paste from a web browser, make sure to delete the trailing slash on the URL entry.\n\n\n\n\nLoggly\n\u2301\n\n\nLoggly\n is a free logging service. If you sign up for an account, you'll need to go under Source Setup and then Customer Tokens. Copy and paste your customer token into your Loop App settings for Loggly.\n\n\n\n\n\n\n\n\n\nAmplitude\n\u2301\n\n\nAmplitude\n is a remote event monitoring service and can be used to quickly identify errors and events with Loop. Amplitude stores the events and allows you to view those events as points in time. To retrieve the details of the events you will need to look at corresponding mLab data entries to get a complete picture of the issues. If you sign up for a free account with Amplitude, you will be given an API Key that you can enter here to have Loop integration setup.\n\n\n\n\n\n\n\n\n\nNext Step: Loop Displays\n\u2301\n\n\nGreat job, almost finished! Now that you have completed your services, let's move onto understanding your \nLoop displays\n. Understanding the Loop displays can be a valuable tool for understanding your Loop's actions, and also for troubleshooting, if you are having issues.", 
            "title": "Step 6: Loop Services"
        }, 
        {
            "location": "/operation/loop-settings/services/#loop-services", 
            "text": "At the bottom of your Loop settings screen is a section called \"Services\".  The services listed in this section are all  OPTIONAL .  You can choose to leave them empty and your Loop will still work.", 
            "title": "Loop Services"
        }, 
        {
            "location": "/operation/loop-settings/services/#nightscout", 
            "text": "If you have an existing Nightscout site, add the Site URL and API Secret to have your Loop data transmitted to your Nightscout site. If you can\u2019t remember your API Secret, it can be found under Settings, Reveal Config Vars for Heroku sites (or Application Settings, Connection Strings for Azure sites).   The two most common errors in filling out this section are:   Failure to use  https://   in the site URL.  If you use  http://  (see how that doesn't have the \"s\" at the end?), you will get an error message about an App Transport Security policy.  Take a look at the sample URL in the field before you start filling in that line, if you want an example to follow.  Having a trailing slash on the end of the URL. If you copy and paste from a web browser, make sure to delete the trailing slash on the URL entry.", 
            "title": "Nightscout"
        }, 
        {
            "location": "/operation/loop-settings/services/#loggly", 
            "text": "Loggly  is a free logging service. If you sign up for an account, you'll need to go under Source Setup and then Customer Tokens. Copy and paste your customer token into your Loop App settings for Loggly.", 
            "title": "Loggly"
        }, 
        {
            "location": "/operation/loop-settings/services/#amplitude", 
            "text": "Amplitude  is a remote event monitoring service and can be used to quickly identify errors and events with Loop. Amplitude stores the events and allows you to view those events as points in time. To retrieve the details of the events you will need to look at corresponding mLab data entries to get a complete picture of the issues. If you sign up for a free account with Amplitude, you will be given an API Key that you can enter here to have Loop integration setup.", 
            "title": "Amplitude"
        }, 
        {
            "location": "/operation/loop-settings/services/#next-step-loop-displays", 
            "text": "Great job, almost finished! Now that you have completed your services, let's move onto understanding your  Loop displays . Understanding the Loop displays can be a valuable tool for understanding your Loop's actions, and also for troubleshooting, if you are having issues.", 
            "title": "Next Step: Loop Displays"
        }, 
        {
            "location": "/operation/loop-settings/displays/", 
            "text": "Loop Displays\n\u2301\n\n\nThis section of the docs will go over the Loop displays available and what information they offer.  Information about your Loop's actions (or inactions) can often be found simply by looking at the visuals presented in the app.  \n\n\nStatus Screen\n\u2301\n\n\nThe Status Screen is the main root navigation screen in Loop. It is broken up into 3 main display areas; Heads Up Display (HUD), Charts, and Toolbar. The HUD is the top area of the screen. This shows the status of the last time loop ran, current BG Reading, current temp basal, and current pump information. The next area is the charting area. This includes, glucose trend and prediction, Active Insulin, Insulin Delivery, and Carbohydrates. The final display area is the toolbar which has buttons for Carbs, Pre-Meal, Bolus, Workout Mode, and Settings.\n\n\n\n\n\n\n\n\n\nHeads Up Display\n\u2301\n\n\nThe Heads Up Display (HUD) is a very useful quick reference guide to your Loop's status. Every 5 minutes, Loop updates CGM and pump/pod data. Loop timestamps the HUD data with the last data point that came in. If a timestamp goes older than 5 minutes old, that is a valuable indicator to where your Loop is failing to get the needed information. The HUD's first three icons, from left to right, are the same no matter whether you are using a Medtronic pump or Omnipod; status of the last time loop ran, current BG Reading, and current temp basal. The last two icons will change depending on what type of pump you are using.\n\n\nMedtronic users: The last two icons are the most recent (1) pump/reservoir status and (2) pump percentage battery remaining.\n\n\n\n\n\n\n\n\n\n\n\nOmnipod users: The last two icons are the most recent (1) pod/reservoir status and (2) hours of pod use.\n\n\n\n\n\n\n\n\n\n\n\nLoop Status\n\u2301\n\n\nThe Loop Status is the colored circle in the upper left corner of the main Loop display.  There are four colors that are typically displayed.\n\n\n\n\n\n\n\n\nA grey circle indicates the Loop is warming up and hasn\u2019t yet completed its initial loop.  When the Loop is first activated, it may take about 15-20 minutes to complete the first Loop, and the grey circle will be displayed.  It needs CGM data to be gathered, so be patient.  When it finally completes its first loop, the circle will turn green.  If you can't get your grey loop to turn green, please see the \nGrey Loop troubleshooting page\n for tips.\n\n\n\n\n\n\n\n\nA green circle indicates the Loop has been successfully completed within the last 5 minutes.  The time since the loop last completed will be displayed under the circle.\n\n\n\n\n\n\n\n\nA yellow circle indicates the Loop has not completed in the last 5-15 minutes.  It is not unusual to have a few instances of yellow circles throughout a day of looping.  They can be caused by temporarily getting too far away from RileyLink or iPhone (more than about 3-10 feet depending on conditions), CGM failing to read or being in ???, radio frequency \u201cnoise\u201d interference, and such.  Generally, most yellow circles will self-resolve without needing any special troubleshooting.\n\n\n\n\n\n\n\n\nA red circle indicates the Loop has not completed in over 15 minutes.  This is not a typical state, and you should troubleshoot why Loop is not completing.  Please review the \nYellow and Red Loop troubleshooting page\n for tips on how to get your green Loop back.  Clicking on the red circle will also pop-up the last error message to help guide your troubleshooting.\n\n\n\n\n\n\n\n\nWhen the circle is notched and not complete, that means the Loop is operating in \u201copen-loop\u201d mode.  When the \u201cclosed-loop\u201d setting is turned on, the loop status will show a completed circle.\n\n\n\n\n\n\n\nThe loop status circle will pulse slightly when the RileyLink is giving the pump a new temp basal setting.  The pulsing will stop when the temp basal has been set by the pump.\n\n\nGlucose\n\u2301\n\n\n\n\n\n\n\n\nThe current BG reading from the CGM will display, including trending arrow and time the reading was taken.  If the BG is being read straight from the G5 transmitter or G4 receiver, no special symbols will appear.\n\n\n\n\n\n\n\n\nIf the BG is being read from the Dexcom Share Servers, a small cloud icon will be in the corner of the BG reading.  Internet access is required to run in this mode.\n\n\n\n\n\n\n\n\nWhen you first start Loop, there may be a small yellow alert next to the BG.  This should go away within a short period of time (around 5 minutes or less).  If the yellow alert remains, something may be wrong with fetching BG data.  You can try restarting the Loop app (double tap home button, up-swipe on the app to close it) to see if BG data will resume.  \nSpecial note for Dexcom G5 users\n, a yellow alert will appear when calibration is needed.  The alert will clear once the calibration is given, but typically Loop will work IF the yellow alert is only for a needed G5 calibration.\n\n\n\n\n\n\n\nTemp Basal\n\u2301\n\n\n\n\n\n\n\n\nThe temp basal will display the enacted temp basal change relative to the scheduled basal.  So if the scheduled basal was 1.0 units per hour and Loop has set a temp basal of 0.2 units per hour, the temp basal icon will display -0.8 U, as shown in the graphic to the left.\n\n\n\n\n\n\n\nReservoir (Medtronic Users)\n\u2301\n\n\n\n\n\n\n\n\nThe reservoir icon will remain grey and plain until insulin volume decreases.  At 25% reservoir volume remaining, the reservoir icon will turn yellow.  At 10% reservoir volume remaining, the reservoir icon will turn red.  The remaining units will be displayed when it gets to these lower thresholds.\n\n\n\n\n\n\n\nBattery (Medtronic Users)\n\u2301\n\n\n\n\n\n\n\n\nFor x23, x54 pumps, the battery icon will show 100/75/50/25% increments just as the pump does.  As the battery level decreases, the icon will turn from grey to yellow to red.  For x22 pumps, the battery icon will read discrete % values.  \nThe warning colors/levels on Loop's battery indicator work in conjunction with the type of battery selected.  If you change battery types, please make sure to update your battery selection in the Loop app settings.   \nThe pump's on-screen battery indicator is not a good indicator of remaining battery life for the purposes of looping.  Loop's pump communications will fail from low battery levels sooner than the insulin delivery will fail.  The Loop's battery level warnings are designed to give you approximately 8 hours of notice before the pump battery will need changing.\n\n\n\n\n\n\n\nReservoir (Omnipod Users)\n\u2301\n\n\n\n\n\n\n\n\nThe pod icon will remain grey and plain until insulin volume decreases.  At 50 units or less insulin remaining, the reservoir icon will turn yellow. At 20 units or less remaining, the reservoir icon will turn red.  The remaining units will be displayed when it gets to these lower thresholds.\n\n\n\n\n\n\n\nPod Age (Omnipod Users)\n\u2301\n\n\n\n\n\n\n\n\nThe pod's age, typically a 3-day lifespan, is represented by three equal segments of the pod age icon. As the pod ages, the segments are converted to a darker grey color. At 54 hours old, the pod age icon will turn yellow. At 72 hours old, the pod age icon will turn red. When you reach 80 hours of pod use, the pod will alarm and the pod age icon will show a \"replace pod\" message in the HUD.\n\n\n\n\n\n\n\nCharts\n\u2301\n\n\nThere are several charts that help you navigate your Loop actions.  Clicking on each of the charts will also open up additional information.\n\n\nGlucose Chart\n\u2301\n\n\n\n\n\n\n\n\n\nThe glucose chart displays BG values in your preferred units. The vertical scale of the chart is calculated on the fly by Loop to be as useful as possible while including the highest and lowest readings in the chart.\n\n\nThe horizontal axis is set to go forward from the current time until your DIA (insulin duration) forward (so you can see what Loop thinks BG will be eventually). It then goes back in time as far as it can, based upon the width in pixels of your screen. Note, if you turn your device to landscape mode you will have more screen real estate and thus will be able to see further back in time.\n\n\nThe BG correction range is shown as a blue bar on the glucose chart.  Single-value target BG range (such as 100-100 mg/dl), will have a narrower blue range.  When a temporary override range is enabled, a darker blue bar where the overrides are set will be displayed, as well as the normal correction target in lighter blue.\n\n\nThe eventual BG displayed on the right side of the chart does NOT take into account a recently enacted temp basal.  In other words, if you are above BG target and Loop just enacted a high temp basal to help, the eventual BG does not reflect the expected lowering of BGs that would result from that recently enacted temp basal.  Loop waits until the insulin has actually been delivery before it \"uses\" the insulin in its calculations for BG impacts.  If you suspended your pump or had a \"no delivery\" alarm shortly after the temp basal was started, you would want that accurately reflected in the insulin on board and associated eventual BG.\n\n\nIf you tap on the Glucose Chart itself, it will open the Predicted Glucose chart described below.\n\n\nPredicted Glucose Chart\n\u2301\n\n\n\n\n\n\n\n\n\nThe predicted glucose view is a great way to gain insight into the various components\u2019 importance in Loop\u2019s prediction of eventual BG. The graph at the top of this view will match your Glucose Chart. Below this chart you will see a very detailed explanation of all of the variables that Loop takes into account in predicting your future BG value. Each of those effects (including Carbohydrates, Insulin, Glucose Momentum and Retrospective Correction) includes details of the calculation used. You can tap on any of the entries to turn them off and on for visualization. The resulting changes can be viewed by the changes in the dashed lines.\n\n\nAdditionally, at the bottom of this screen there is a setting to \nEnable Retrospective Correction\n. By enabling it, it will more aggressively increase or decrease basal delivery when BG movement doesn\u2019t match the carbohydrates and insulin-based model.  Most Loopers have found this setting to be quite useful and keep the slider on.\n\n\nActive Insulin Chart\n\u2301\n\n\n\n\n\n\n\n\n\nThe Active Insulin chart displays the total insulin contribution from both temp basals and boluses.  Active IOB can be either positive and negative IOB.  Negative IOB results from the suspension of normally scheduled basals.  The active insulin displayed in the upper right corner of the chart does NOT include insulin contributions from a recently enacted temp basal or bolus until the pump\u2019s reservoir volume is read and confirms a drop in reservoir volume (confirming the insulin has actually been delivered).  So long as you have Event History as the Preferred Data Source in Loop settings (does not apply to Omnipod, Minimed Only), primed insulin deliveries (e.g., cannula fills or manual primes) will not be counted towards IOB.\n\n\nInsulin Delivery Chart\n\u2301\n\n\n\n\n\n\n\n\n\nThe Insulin Delivery chart displays a history of the temp basals enacted by Loop.  The display is relative to the scheduled basal rates entered in the Loop settings.  So, a rate displayed in this chart as \n+0 units\n would indicate no temp basal was set, and Loop defaulted to the scheduled basal rate.  Individual boluses are indicated by an orange triangle on the chart (shown in the graphic above, near the left-most time).  The total insulin delivered since midnight, including all basals and boluses \nAND priming insulin\n, is given in the upper right corner of the graph.\n\n\nPlease be patient for a bolus delivery to appear.  There is a lag time from when you press the \u201cdeliver\u201d bolus button to when the orange triangle is drawn sometimes.  The insulin has to be delivered and then the pump reservoir needs to be read to confirm delivery, before the triangle will appear and IOB will be added.  Occasionally, the bolus may be temporarily rendered (drawn) as a very high temp basal rate vs. a (triangle) discrete bolus event.  This does NOT mean that the Loop actually enacted a high temp basal rate...only that the bolus is being \ndrawn\n on the chart in the equivalent of a high temp basal rate.\n\n\nReservoir and Event History\n\u2301\n\n\n\n\n\n\n\n\n\nClicking on either the Active Insulin or Insulin Delivery charts will open your Insulin Delivery history.  The top of the screen will display the current IOB and the total insulin delivered for the day since midnight (or since the time the loop became active if you started Loop after midnight). There are two viewing options; Reservoir or Event History.  \n\n\n\n\n\n\nReservoir: Omnipod users will not have a reservoir history displayed, simply because pods do not report or track insulin remaining until their reservoirs get below 50 units remaining. Medtronic users will have reservoir history displayed in 5-minute increments, unless Loop has been having communication issues.\n\n\n\n\n\n\nEvent History: Event history is a detailed accounting of all pump/pod actions. Both Medtronic and Omnipod users will have a detailed record of event history.\n\n\n\n\n\n\nCarbohydrate Chart\n\u2301\n\n\n\n\n\n\n\n\n\nThe Carbohydrate chart displays the carbs used by Loop to predict BG changes.  The active COB is displayed in the upper right corner of the chart.  Clicking on the chart will open the Carb Entries history and you can edit/delete any previous entries through that screen.  Please read the \nCarb Entries page\n for more information about editing carb entries.\n\n\n\n\n\n\n\n\n\nFor more information about the Insulin Counteraction Effects information found in the Carb History, please see \nhere\n.\n\n\nTool Bar\n\u2301\n\n\n\n\n\n\n\n\n\nThe toolbar is where your inputs to the Loop behavior take place.  The individual components of the toolbar are, left to right:\n\n\n\n\n\n\nCarb entry tool\n- click on this tool to enter carbs into the Loop app.  Loop will not read carb entries from the pump or Nightscout, so you must use the carb entry tool in Loop app in order to have carbs accounted for by the Loop.  Detailed info regarding how to enter, save, and edit carb entries can be found in the \nCarb Entries page\n.\n\n\n\n\n\n\nPre-meal target\n - click this tool to set the \nPre-Meal temporary override target\n.  This target will remain in effect (1) for 60 minutes, (2) until a carb entry is saved, or (3) until the target is toggled off manually, whichever comes first.  The background coloring of the Pre-Meal target will turn green when active and there will be a dark blue line on the BG chart indicating where the override target is enabled.  For more information about the use of the Pre-Meal target, see the \nBolus Entries page\n.\n\n\n\n\n\n\nBolus tool\n - click on this tool to bring up the bolus tool.  Normally, this screen will automatically open on its own and function as a bolus wizard when a meal is saved on the carb entry tool screen.  The only time the bolus tool will not automatically open is if the amount of carbs saved is determined to be adequately covered by the insulin on board already.  During rapidly rising BGs, where Loop doesn't have an adequate temp basal rate to cover the pace at which BGs are rising, you may try clicking on the bolus tool to see if Loop is recommending a correction bolus to help control the BG spike.  For more information about the Bolus tool features and use, see the \nBolus Entries page\n.\n\n\n\n\n\n\nWorkout Target\n - click this tool to set the \nWorkout temporary override target\n.  This target will remain in effect for the duration you select.  The standard duration selections available are 1-hour, 2-hour, or indefinitely.  You can add or modify those options, before building the Loop app, by using the \nWorkout mode customization option\n.  For more information about using the Workout Mode, see \nhere\n.\n\n\n\n\n\n\nLoop Settings\n - click on this tool to make changes to any of your \nLoop settings\n.\n\n\n\n\n\n\nNext Step: RileyLink Menu\n\u2301\n\n\nYou are almost there! One more Loop menu that you need to know about is your RileyLink. You can access your RileyLink menu by tapping on your pump/pod image in Loop settings. Click \nhere\n to read more about your RileyLink menu.", 
            "title": "Loop Displays"
        }, 
        {
            "location": "/operation/loop-settings/displays/#loop-displays", 
            "text": "This section of the docs will go over the Loop displays available and what information they offer.  Information about your Loop's actions (or inactions) can often be found simply by looking at the visuals presented in the app.", 
            "title": "Loop Displays"
        }, 
        {
            "location": "/operation/loop-settings/displays/#status-screen", 
            "text": "The Status Screen is the main root navigation screen in Loop. It is broken up into 3 main display areas; Heads Up Display (HUD), Charts, and Toolbar. The HUD is the top area of the screen. This shows the status of the last time loop ran, current BG Reading, current temp basal, and current pump information. The next area is the charting area. This includes, glucose trend and prediction, Active Insulin, Insulin Delivery, and Carbohydrates. The final display area is the toolbar which has buttons for Carbs, Pre-Meal, Bolus, Workout Mode, and Settings.", 
            "title": "Status Screen"
        }, 
        {
            "location": "/operation/loop-settings/displays/#heads-up-display", 
            "text": "The Heads Up Display (HUD) is a very useful quick reference guide to your Loop's status. Every 5 minutes, Loop updates CGM and pump/pod data. Loop timestamps the HUD data with the last data point that came in. If a timestamp goes older than 5 minutes old, that is a valuable indicator to where your Loop is failing to get the needed information. The HUD's first three icons, from left to right, are the same no matter whether you are using a Medtronic pump or Omnipod; status of the last time loop ran, current BG Reading, and current temp basal. The last two icons will change depending on what type of pump you are using.  Medtronic users: The last two icons are the most recent (1) pump/reservoir status and (2) pump percentage battery remaining.      Omnipod users: The last two icons are the most recent (1) pod/reservoir status and (2) hours of pod use.", 
            "title": "Heads Up Display"
        }, 
        {
            "location": "/operation/loop-settings/displays/#loop-status", 
            "text": "The Loop Status is the colored circle in the upper left corner of the main Loop display.  There are four colors that are typically displayed.     A grey circle indicates the Loop is warming up and hasn\u2019t yet completed its initial loop.  When the Loop is first activated, it may take about 15-20 minutes to complete the first Loop, and the grey circle will be displayed.  It needs CGM data to be gathered, so be patient.  When it finally completes its first loop, the circle will turn green.  If you can't get your grey loop to turn green, please see the  Grey Loop troubleshooting page  for tips.     A green circle indicates the Loop has been successfully completed within the last 5 minutes.  The time since the loop last completed will be displayed under the circle.     A yellow circle indicates the Loop has not completed in the last 5-15 minutes.  It is not unusual to have a few instances of yellow circles throughout a day of looping.  They can be caused by temporarily getting too far away from RileyLink or iPhone (more than about 3-10 feet depending on conditions), CGM failing to read or being in ???, radio frequency \u201cnoise\u201d interference, and such.  Generally, most yellow circles will self-resolve without needing any special troubleshooting.     A red circle indicates the Loop has not completed in over 15 minutes.  This is not a typical state, and you should troubleshoot why Loop is not completing.  Please review the  Yellow and Red Loop troubleshooting page  for tips on how to get your green Loop back.  Clicking on the red circle will also pop-up the last error message to help guide your troubleshooting.     When the circle is notched and not complete, that means the Loop is operating in \u201copen-loop\u201d mode.  When the \u201cclosed-loop\u201d setting is turned on, the loop status will show a completed circle.    The loop status circle will pulse slightly when the RileyLink is giving the pump a new temp basal setting.  The pulsing will stop when the temp basal has been set by the pump.", 
            "title": "Loop Status"
        }, 
        {
            "location": "/operation/loop-settings/displays/#glucose", 
            "text": "The current BG reading from the CGM will display, including trending arrow and time the reading was taken.  If the BG is being read straight from the G5 transmitter or G4 receiver, no special symbols will appear.     If the BG is being read from the Dexcom Share Servers, a small cloud icon will be in the corner of the BG reading.  Internet access is required to run in this mode.     When you first start Loop, there may be a small yellow alert next to the BG.  This should go away within a short period of time (around 5 minutes or less).  If the yellow alert remains, something may be wrong with fetching BG data.  You can try restarting the Loop app (double tap home button, up-swipe on the app to close it) to see if BG data will resume.   Special note for Dexcom G5 users , a yellow alert will appear when calibration is needed.  The alert will clear once the calibration is given, but typically Loop will work IF the yellow alert is only for a needed G5 calibration.", 
            "title": "Glucose"
        }, 
        {
            "location": "/operation/loop-settings/displays/#temp-basal", 
            "text": "The temp basal will display the enacted temp basal change relative to the scheduled basal.  So if the scheduled basal was 1.0 units per hour and Loop has set a temp basal of 0.2 units per hour, the temp basal icon will display -0.8 U, as shown in the graphic to the left.", 
            "title": "Temp Basal"
        }, 
        {
            "location": "/operation/loop-settings/displays/#reservoir-medtronic-users", 
            "text": "The reservoir icon will remain grey and plain until insulin volume decreases.  At 25% reservoir volume remaining, the reservoir icon will turn yellow.  At 10% reservoir volume remaining, the reservoir icon will turn red.  The remaining units will be displayed when it gets to these lower thresholds.", 
            "title": "Reservoir (Medtronic Users)"
        }, 
        {
            "location": "/operation/loop-settings/displays/#battery-medtronic-users", 
            "text": "For x23, x54 pumps, the battery icon will show 100/75/50/25% increments just as the pump does.  As the battery level decreases, the icon will turn from grey to yellow to red.  For x22 pumps, the battery icon will read discrete % values.   The warning colors/levels on Loop's battery indicator work in conjunction with the type of battery selected.  If you change battery types, please make sure to update your battery selection in the Loop app settings.    The pump's on-screen battery indicator is not a good indicator of remaining battery life for the purposes of looping.  Loop's pump communications will fail from low battery levels sooner than the insulin delivery will fail.  The Loop's battery level warnings are designed to give you approximately 8 hours of notice before the pump battery will need changing.", 
            "title": "Battery (Medtronic Users)"
        }, 
        {
            "location": "/operation/loop-settings/displays/#reservoir-omnipod-users", 
            "text": "The pod icon will remain grey and plain until insulin volume decreases.  At 50 units or less insulin remaining, the reservoir icon will turn yellow. At 20 units or less remaining, the reservoir icon will turn red.  The remaining units will be displayed when it gets to these lower thresholds.", 
            "title": "Reservoir (Omnipod Users)"
        }, 
        {
            "location": "/operation/loop-settings/displays/#pod-age-omnipod-users", 
            "text": "The pod's age, typically a 3-day lifespan, is represented by three equal segments of the pod age icon. As the pod ages, the segments are converted to a darker grey color. At 54 hours old, the pod age icon will turn yellow. At 72 hours old, the pod age icon will turn red. When you reach 80 hours of pod use, the pod will alarm and the pod age icon will show a \"replace pod\" message in the HUD.", 
            "title": "Pod Age (Omnipod Users)"
        }, 
        {
            "location": "/operation/loop-settings/displays/#charts", 
            "text": "There are several charts that help you navigate your Loop actions.  Clicking on each of the charts will also open up additional information.", 
            "title": "Charts"
        }, 
        {
            "location": "/operation/loop-settings/displays/#glucose-chart", 
            "text": "The glucose chart displays BG values in your preferred units. The vertical scale of the chart is calculated on the fly by Loop to be as useful as possible while including the highest and lowest readings in the chart.  The horizontal axis is set to go forward from the current time until your DIA (insulin duration) forward (so you can see what Loop thinks BG will be eventually). It then goes back in time as far as it can, based upon the width in pixels of your screen. Note, if you turn your device to landscape mode you will have more screen real estate and thus will be able to see further back in time.  The BG correction range is shown as a blue bar on the glucose chart.  Single-value target BG range (such as 100-100 mg/dl), will have a narrower blue range.  When a temporary override range is enabled, a darker blue bar where the overrides are set will be displayed, as well as the normal correction target in lighter blue.  The eventual BG displayed on the right side of the chart does NOT take into account a recently enacted temp basal.  In other words, if you are above BG target and Loop just enacted a high temp basal to help, the eventual BG does not reflect the expected lowering of BGs that would result from that recently enacted temp basal.  Loop waits until the insulin has actually been delivery before it \"uses\" the insulin in its calculations for BG impacts.  If you suspended your pump or had a \"no delivery\" alarm shortly after the temp basal was started, you would want that accurately reflected in the insulin on board and associated eventual BG.  If you tap on the Glucose Chart itself, it will open the Predicted Glucose chart described below.", 
            "title": "Glucose Chart"
        }, 
        {
            "location": "/operation/loop-settings/displays/#predicted-glucose-chart", 
            "text": "The predicted glucose view is a great way to gain insight into the various components\u2019 importance in Loop\u2019s prediction of eventual BG. The graph at the top of this view will match your Glucose Chart. Below this chart you will see a very detailed explanation of all of the variables that Loop takes into account in predicting your future BG value. Each of those effects (including Carbohydrates, Insulin, Glucose Momentum and Retrospective Correction) includes details of the calculation used. You can tap on any of the entries to turn them off and on for visualization. The resulting changes can be viewed by the changes in the dashed lines.  Additionally, at the bottom of this screen there is a setting to  Enable Retrospective Correction . By enabling it, it will more aggressively increase or decrease basal delivery when BG movement doesn\u2019t match the carbohydrates and insulin-based model.  Most Loopers have found this setting to be quite useful and keep the slider on.", 
            "title": "Predicted Glucose Chart"
        }, 
        {
            "location": "/operation/loop-settings/displays/#active-insulin-chart", 
            "text": "The Active Insulin chart displays the total insulin contribution from both temp basals and boluses.  Active IOB can be either positive and negative IOB.  Negative IOB results from the suspension of normally scheduled basals.  The active insulin displayed in the upper right corner of the chart does NOT include insulin contributions from a recently enacted temp basal or bolus until the pump\u2019s reservoir volume is read and confirms a drop in reservoir volume (confirming the insulin has actually been delivered).  So long as you have Event History as the Preferred Data Source in Loop settings (does not apply to Omnipod, Minimed Only), primed insulin deliveries (e.g., cannula fills or manual primes) will not be counted towards IOB.", 
            "title": "Active Insulin Chart"
        }, 
        {
            "location": "/operation/loop-settings/displays/#insulin-delivery-chart", 
            "text": "The Insulin Delivery chart displays a history of the temp basals enacted by Loop.  The display is relative to the scheduled basal rates entered in the Loop settings.  So, a rate displayed in this chart as  +0 units  would indicate no temp basal was set, and Loop defaulted to the scheduled basal rate.  Individual boluses are indicated by an orange triangle on the chart (shown in the graphic above, near the left-most time).  The total insulin delivered since midnight, including all basals and boluses  AND priming insulin , is given in the upper right corner of the graph.  Please be patient for a bolus delivery to appear.  There is a lag time from when you press the \u201cdeliver\u201d bolus button to when the orange triangle is drawn sometimes.  The insulin has to be delivered and then the pump reservoir needs to be read to confirm delivery, before the triangle will appear and IOB will be added.  Occasionally, the bolus may be temporarily rendered (drawn) as a very high temp basal rate vs. a (triangle) discrete bolus event.  This does NOT mean that the Loop actually enacted a high temp basal rate...only that the bolus is being  drawn  on the chart in the equivalent of a high temp basal rate.", 
            "title": "Insulin Delivery Chart"
        }, 
        {
            "location": "/operation/loop-settings/displays/#reservoir-and-event-history", 
            "text": "Clicking on either the Active Insulin or Insulin Delivery charts will open your Insulin Delivery history.  The top of the screen will display the current IOB and the total insulin delivered for the day since midnight (or since the time the loop became active if you started Loop after midnight). There are two viewing options; Reservoir or Event History.      Reservoir: Omnipod users will not have a reservoir history displayed, simply because pods do not report or track insulin remaining until their reservoirs get below 50 units remaining. Medtronic users will have reservoir history displayed in 5-minute increments, unless Loop has been having communication issues.    Event History: Event history is a detailed accounting of all pump/pod actions. Both Medtronic and Omnipod users will have a detailed record of event history.", 
            "title": "Reservoir and Event History"
        }, 
        {
            "location": "/operation/loop-settings/displays/#carbohydrate-chart", 
            "text": "The Carbohydrate chart displays the carbs used by Loop to predict BG changes.  The active COB is displayed in the upper right corner of the chart.  Clicking on the chart will open the Carb Entries history and you can edit/delete any previous entries through that screen.  Please read the  Carb Entries page  for more information about editing carb entries.     For more information about the Insulin Counteraction Effects information found in the Carb History, please see  here .", 
            "title": "Carbohydrate Chart"
        }, 
        {
            "location": "/operation/loop-settings/displays/#tool-bar", 
            "text": "The toolbar is where your inputs to the Loop behavior take place.  The individual components of the toolbar are, left to right:    Carb entry tool - click on this tool to enter carbs into the Loop app.  Loop will not read carb entries from the pump or Nightscout, so you must use the carb entry tool in Loop app in order to have carbs accounted for by the Loop.  Detailed info regarding how to enter, save, and edit carb entries can be found in the  Carb Entries page .    Pre-meal target  - click this tool to set the  Pre-Meal temporary override target .  This target will remain in effect (1) for 60 minutes, (2) until a carb entry is saved, or (3) until the target is toggled off manually, whichever comes first.  The background coloring of the Pre-Meal target will turn green when active and there will be a dark blue line on the BG chart indicating where the override target is enabled.  For more information about the use of the Pre-Meal target, see the  Bolus Entries page .    Bolus tool  - click on this tool to bring up the bolus tool.  Normally, this screen will automatically open on its own and function as a bolus wizard when a meal is saved on the carb entry tool screen.  The only time the bolus tool will not automatically open is if the amount of carbs saved is determined to be adequately covered by the insulin on board already.  During rapidly rising BGs, where Loop doesn't have an adequate temp basal rate to cover the pace at which BGs are rising, you may try clicking on the bolus tool to see if Loop is recommending a correction bolus to help control the BG spike.  For more information about the Bolus tool features and use, see the  Bolus Entries page .    Workout Target  - click this tool to set the  Workout temporary override target .  This target will remain in effect for the duration you select.  The standard duration selections available are 1-hour, 2-hour, or indefinitely.  You can add or modify those options, before building the Loop app, by using the  Workout mode customization option .  For more information about using the Workout Mode, see  here .    Loop Settings  - click on this tool to make changes to any of your  Loop settings .", 
            "title": "Tool Bar"
        }, 
        {
            "location": "/operation/loop-settings/displays/#next-step-rileylink-menu", 
            "text": "You are almost there! One more Loop menu that you need to know about is your RileyLink. You can access your RileyLink menu by tapping on your pump/pod image in Loop settings. Click  here  to read more about your RileyLink menu.", 
            "title": "Next Step: RileyLink Menu"
        }, 
        {
            "location": "/operation/loop-settings/rileylink/", 
            "text": "RileyLink Menu\n\u2301\n\n\nThe RileyLink menu is accessed by clicking on the image of your connected pump in Loop settings. From that pump screen, scroll to the bottom and you will see the names of your connected RileyLink(s). (Note: The device searching indicator near the RileyLink's toggle will always be spinning, even after a RileyLink is successfully connected. That is normal behavior.)\n\n\nHelpful tip: If you are ever going to be near other Loop users, you may want to consider renaming your RileyLink to a new name so that you can pick it out of a crowd.  Click on the RileyLink line, and the RileyLink's menu will be displayed. At the top of this menu is a line for the device name. Click on the that line and you will be able to change the name of your RileyLink. The new name may need to sit for a few seconds before exiting back out of the naming screen for it to save itself. RileyLink must be connected and on to change the name.\n\n\nDepending on which pump you have connected to your Loop app, your RL menu will look different. On the left below is the typical RL menu when using Medtronic pump, and on the right is with an Omnipod. As you can see, both have in common a section called \"Device\", but after that only the Medtronic pumps will have additional commands in the RileyLink menu.\n\n\n\n\n\n\n\n\n\nDevice\n\u2301\n\n\nThe settings under the Device section are mostly for your information only. The two most important lines are the Connection Status and Signal Strength.\n\n\n\n\n\n\nThe Connections Status should say \nconnected\n if the RileyLink is connected to the iPhone's Bluetooth. If the status says \nconnecting\n or \ndisconnected\n then you should toggle the iPhone's BT and/or RileyLink's power switch off/on to help reconnect.\n\n\n\n\n\n\nThe Signal Strength is the strength of the Bluetooth signal between the iPhone and RileyLink.  It is \nnot\n the signal strength of the radio communications with the pump/pod.  The lower the number, the stronger the connection. As you move the RL and iPhone closer/farther apart, you will be able to see the signal strength change. In a pinch, this can be used to help locate a lost RileyLink in the house.\n\n\n\n\n\n\n\n\n\n\n\n\n\nPump\n\u2301\n\n\nThe Pump ID and Pump Model will be automatically filled in from your pump. \n\n\nCommands\n\u2301\n\n\nThere are several commands that the RileyLink can issue to a Medtronic pump. Most are simply for gathering information from the pump.\n\n\nTune Radio Frequency\n\u2301\n\n\nThe pump and RileyLink communicate via radio frequency. In order to have the best possible communications, RileyLink will test a range of frequencies in order to see which provides the strongest response with the pump. In the event that pump comms fail for over 14 minutes, Loop will automatically retune the RileyLink to see if perhaps the strongest frequency has changed since it was last tuned.\n\n\nWhen you first setup your Loop app, RileyLink will automatically perform a \nTune Radio Frequency\n to get pump comms started. You can manually tune your radio frequency at any time by clicking on the command. It may take about a minute, but soon you will see a list of frequencies with the tuning strength results beside each frequency. The signal with the lowest value is the strongest and RileyLink will use that frequency. Exit out of that screen and the command line will now show the frequency (916.xx MHz for North American pumps) and the timestamp of the tune.\n\n\n\n\nA common troubleshooting recommendation is to tune your RL when you have poor pump communications. Just keep in mind that the Loop code has a function that it will automatically retune in the event of poor pump communications within 14 minutes. Loop does this automatically.  Manually retuning is only useful for impatience purposes. If Loop has failed longer than 20 minutes, it will have already likely tried a retune...but knock yourself out if you want to try it again manually.\n\n\n\n\nChange Time\n\u2301\n\n\nLoop automatically prompts you to set your pump time using the Loop app as part of initial Loop setup.  It is important that Loop and your pump share a common time setting, otherwise Looping will fail.  If you are traveling through timezones or dealing with daylight savings time, please read up on \nhow to safely change your pump time\n.\n\n\n\n\nAlways use the RileyLink's \nChange Time\n command to change pump time.  If you fail to set the pump time by using the RileyLink, Loop will not function properly.  Do not use the pump menus to change your pump's time when Looping.\n\n\n\n\nOther commands\n\u2301\n\n\nMySentry Pair, Fetch Recent History, Fetch Enlite Glucose, Get Pump Model, Send Button Press, Read Pump Status, and Read Basal Schedule are all ways of asking the pump for information you might be interested in. They are not part of setting up the Loop and will not affect Loop operations. Enable Diagnostic LEDs, Discover Commands, and RileyLink Statistics are commands that are sometimes used by developers to aid in app troubleshooting and debugging. They don't impact Loop operations.\n\n\nMySentry Pair\n is for x23 and x54 pumps only, and you will have completed this pairing command as part of the original \nAdd Pump\n process. The MySentry pairing process adds a specific ID to your pump in the pump's Connect Devices, Other Devices menu. This pairing allows Loop to get information from x23 and x54 in an efficient manner. If that is not done, Loop will only be green every other loop. If you ever want to re-pair MySentry, you can follow the directions as shown in the RileyLink command screen. You do not have to worry about this command if you are using an x15 or x22 model pump, as they do not have MySentry.\n\n\nFetch Recent History\n polls the pump for recent pump events such as boluses, temp basals, primes, rewinds, etc.  The amount of information transmitted for a Fetch Recent History is usually quite large and, as a result, may be more prone to an early failure before it succeeds. If the first Fetch Recent History fails, sometimes it is helpful to use the Send Button Press command to sort of \"wake up\" the pump in preparation for communications.\n\n\nFetch Enlite Glucose\n is only useful for Medtronic CGM users. The Fetch Enlite Glucose command will pull the recent glucose values saved in the pump history. Dexcom users do not store any glucose data in the pump.\n\n\nGet Pump Model\n simply returns the pump's model.\n\n\nSend Button Press\n can be useful to see if the communication between the RileyLink and pump is working. If successful, the screen on the pump will light up and Loop will confirm the button press with a \nsuccess\n message. If pump comms are failing, sending a successful button press can help \"wake up\" a pump that perhaps has not been communicating well.\n\n\nRead Pump Status\n is also nice quick pump read for reservoir volume, pump battery voltage, and pump status (bolusing or suspending). For x23 and x54 pump users, this command will provide the exact pump battery voltage instead of the 25/50/75/100% levels that are reported otherwise.\n\n\nRead Basal Schedule\n will pull the active basal pattern from the pump so you can review what the current settings are without using pump menu.\n\n\nEnable Diagnostic LEDs\n will turn on more LED flashes on the RileyLink while it is operating. You will see more blue flashing lights as the RileyLink communicates with the pump. If you tried turning on this feature and decide later that you just don't want to see so many flashing lights, simply reboot the RileyLink by turning the power switch off/on.  This will reset the LEDs.\n\n\nDiscover Commands\n just ignore this menu item.\n\n\nRileyLink Statistics\n tracks how long your RileyLink has stayed successfully operating and gives the developers some useful information about the stability of the RL operations. It really doesn't provide much to the average Loop user, however.", 
            "title": "RileyLink menu"
        }, 
        {
            "location": "/operation/loop-settings/rileylink/#rileylink-menu", 
            "text": "The RileyLink menu is accessed by clicking on the image of your connected pump in Loop settings. From that pump screen, scroll to the bottom and you will see the names of your connected RileyLink(s). (Note: The device searching indicator near the RileyLink's toggle will always be spinning, even after a RileyLink is successfully connected. That is normal behavior.)  Helpful tip: If you are ever going to be near other Loop users, you may want to consider renaming your RileyLink to a new name so that you can pick it out of a crowd.  Click on the RileyLink line, and the RileyLink's menu will be displayed. At the top of this menu is a line for the device name. Click on the that line and you will be able to change the name of your RileyLink. The new name may need to sit for a few seconds before exiting back out of the naming screen for it to save itself. RileyLink must be connected and on to change the name.  Depending on which pump you have connected to your Loop app, your RL menu will look different. On the left below is the typical RL menu when using Medtronic pump, and on the right is with an Omnipod. As you can see, both have in common a section called \"Device\", but after that only the Medtronic pumps will have additional commands in the RileyLink menu.", 
            "title": "RileyLink Menu"
        }, 
        {
            "location": "/operation/loop-settings/rileylink/#device", 
            "text": "The settings under the Device section are mostly for your information only. The two most important lines are the Connection Status and Signal Strength.    The Connections Status should say  connected  if the RileyLink is connected to the iPhone's Bluetooth. If the status says  connecting  or  disconnected  then you should toggle the iPhone's BT and/or RileyLink's power switch off/on to help reconnect.    The Signal Strength is the strength of the Bluetooth signal between the iPhone and RileyLink.  It is  not  the signal strength of the radio communications with the pump/pod.  The lower the number, the stronger the connection. As you move the RL and iPhone closer/farther apart, you will be able to see the signal strength change. In a pinch, this can be used to help locate a lost RileyLink in the house.", 
            "title": "Device"
        }, 
        {
            "location": "/operation/loop-settings/rileylink/#pump", 
            "text": "The Pump ID and Pump Model will be automatically filled in from your pump.", 
            "title": "Pump"
        }, 
        {
            "location": "/operation/loop-settings/rileylink/#commands", 
            "text": "There are several commands that the RileyLink can issue to a Medtronic pump. Most are simply for gathering information from the pump.", 
            "title": "Commands"
        }, 
        {
            "location": "/operation/loop-settings/rileylink/#tune-radio-frequency", 
            "text": "The pump and RileyLink communicate via radio frequency. In order to have the best possible communications, RileyLink will test a range of frequencies in order to see which provides the strongest response with the pump. In the event that pump comms fail for over 14 minutes, Loop will automatically retune the RileyLink to see if perhaps the strongest frequency has changed since it was last tuned.  When you first setup your Loop app, RileyLink will automatically perform a  Tune Radio Frequency  to get pump comms started. You can manually tune your radio frequency at any time by clicking on the command. It may take about a minute, but soon you will see a list of frequencies with the tuning strength results beside each frequency. The signal with the lowest value is the strongest and RileyLink will use that frequency. Exit out of that screen and the command line will now show the frequency (916.xx MHz for North American pumps) and the timestamp of the tune.   A common troubleshooting recommendation is to tune your RL when you have poor pump communications. Just keep in mind that the Loop code has a function that it will automatically retune in the event of poor pump communications within 14 minutes. Loop does this automatically.  Manually retuning is only useful for impatience purposes. If Loop has failed longer than 20 minutes, it will have already likely tried a retune...but knock yourself out if you want to try it again manually.", 
            "title": "Tune Radio Frequency"
        }, 
        {
            "location": "/operation/loop-settings/rileylink/#change-time", 
            "text": "Loop automatically prompts you to set your pump time using the Loop app as part of initial Loop setup.  It is important that Loop and your pump share a common time setting, otherwise Looping will fail.  If you are traveling through timezones or dealing with daylight savings time, please read up on  how to safely change your pump time .   Always use the RileyLink's  Change Time  command to change pump time.  If you fail to set the pump time by using the RileyLink, Loop will not function properly.  Do not use the pump menus to change your pump's time when Looping.", 
            "title": "Change Time"
        }, 
        {
            "location": "/operation/loop-settings/rileylink/#other-commands", 
            "text": "MySentry Pair, Fetch Recent History, Fetch Enlite Glucose, Get Pump Model, Send Button Press, Read Pump Status, and Read Basal Schedule are all ways of asking the pump for information you might be interested in. They are not part of setting up the Loop and will not affect Loop operations. Enable Diagnostic LEDs, Discover Commands, and RileyLink Statistics are commands that are sometimes used by developers to aid in app troubleshooting and debugging. They don't impact Loop operations.  MySentry Pair  is for x23 and x54 pumps only, and you will have completed this pairing command as part of the original  Add Pump  process. The MySentry pairing process adds a specific ID to your pump in the pump's Connect Devices, Other Devices menu. This pairing allows Loop to get information from x23 and x54 in an efficient manner. If that is not done, Loop will only be green every other loop. If you ever want to re-pair MySentry, you can follow the directions as shown in the RileyLink command screen. You do not have to worry about this command if you are using an x15 or x22 model pump, as they do not have MySentry.  Fetch Recent History  polls the pump for recent pump events such as boluses, temp basals, primes, rewinds, etc.  The amount of information transmitted for a Fetch Recent History is usually quite large and, as a result, may be more prone to an early failure before it succeeds. If the first Fetch Recent History fails, sometimes it is helpful to use the Send Button Press command to sort of \"wake up\" the pump in preparation for communications.  Fetch Enlite Glucose  is only useful for Medtronic CGM users. The Fetch Enlite Glucose command will pull the recent glucose values saved in the pump history. Dexcom users do not store any glucose data in the pump.  Get Pump Model  simply returns the pump's model.  Send Button Press  can be useful to see if the communication between the RileyLink and pump is working. If successful, the screen on the pump will light up and Loop will confirm the button press with a  success  message. If pump comms are failing, sending a successful button press can help \"wake up\" a pump that perhaps has not been communicating well.  Read Pump Status  is also nice quick pump read for reservoir volume, pump battery voltage, and pump status (bolusing or suspending). For x23 and x54 pump users, this command will provide the exact pump battery voltage instead of the 25/50/75/100% levels that are reported otherwise.  Read Basal Schedule  will pull the active basal pattern from the pump so you can review what the current settings are without using pump menu.  Enable Diagnostic LEDs  will turn on more LED flashes on the RileyLink while it is operating. You will see more blue flashing lights as the RileyLink communicates with the pump. If you tried turning on this feature and decide later that you just don't want to see so many flashing lights, simply reboot the RileyLink by turning the power switch off/on.  This will reset the LEDs.  Discover Commands  just ignore this menu item.  RileyLink Statistics  tracks how long your RileyLink has stayed successfully operating and gives the developers some useful information about the stability of the RL operations. It really doesn't provide much to the average Loop user, however.", 
            "title": "Other commands"
        }, 
        {
            "location": "/operation/features/carbs/", 
            "text": "Carb Entry\n\u2301\n\n\n\n\n\n\n\n\n\nNew carb entries can be made by using the green carb tool in the toolbar at the bottom of the status screen.  Do not use your pump's bolus wizard or pump's carb entry to record carbs into the Loop app.  Nor should you use Nightscout's careportal to enter carbs, as Loop does not read carb entries remotely.\n\n\nNew Carbs\n\u2301\n\n\nTo begin a new meal entry, simply enter the number of carbs to be eaten in the \namount consumed\n line.  By default, the carb absorption time for a new carb entry will correspond to the taco icon.  If you haven't made any customizations to the lollipop, taco, or pizza icons during your Loop build, then the default carb absorption time will display as 3 hours.  The default time entry is for the current time and date.  Once you press \nSave\n on the carb entry screen, the Loop's bolus tool will open to provide a recommended bolus.\n\n\n\n\n\n\n\n\n\nAvoid Double Carb Entries\n\u2301\n\n\n\n\nBe Aware\n\n\nWhen you press \nSave\n for a carb entry, Loop will consider that carb entry saved and use it for calculating temp basals and recommended boluses.  Be cautious about repeated attempts to enter the same meal...Loop will continue to save the carb entries UNLESS you push cancel on the carb entry screen.\n\n\nSimply canceling a bolus does not cancel the carb entry.\n\nIf you have accidentally made multiple entries for the same carbs, click on the Carbs Chart in the main Loop display and you can delete the redundant carb entries by swiping left on the entries.\n\n\n\n\nCarb Absorption Time\n\u2301\n\n\n\n\n\n\n\n\n\nTo select your carb entry's absorption time, you can either click on the default food emojis or manually enter carb absorption time by selecting the \nabsorption time\n line in the carb entry tool.\n\n\nThe plate emoji, found to the right of the pizza emoji, can also be used if you are unsure of a new food.  There are other food emojis grouped into fast, medium, and slow absorbing foods.  This may be particularly useful for teens that are trying to learn new foods/meals.  Additionally, if you select the plate icon, you can add text to your \nfood type\n by selecting the \nabc\n button in the bottom left corner of the screen.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe default carb absorption times in Loop app are average representations for high, medium, and low glycemic index foods.  Ever since Loop v1.4.0, the algorithm incorporates dynamic carb absorption.  Previous Loop versions were based on a curve that assumed the rate of carb absorption would start out slow, increase to a mid-point, and then taper off.  However, in the real world, carb absorption is quite variable.  Dynamic carb absorption model is able to model some of this variability and allow Loop to respond more reasonably when actual carb absorption is not matching well with the selected carb absorption time for a meal.  In short, while entering a carb absorption time is still part of recording meals in Loop, it is much less critical to get it right.  Now your entry serves more as a guideline, than a rule, for Loop to model carb absorption.  For a more detailed explanation of the new dynamic carb absorption model, please read about it \nhere\n.\n\n\nTo help Loop adjust for carbs that may digest slower than your original estimate, Loop will initially apply a 1.5x multiplier to your entered carb absorption time.  So, a meal entered using the taco icon will initially be treated as a 4.5 hour absorption meal.  As Loop observes the BG impacts of the meal, Loop will shorten the meal's absorption time if BGs are showing quicker impacts than expected, as well as adjust insulin deliveries (e.g., increase temp basals).  You can watch the progression of the Loop's observations of your meal by clicking on the Carbs Chart and watching the insulin counteraction effects.\n\n\nMixed Carb Meals\n\u2301\n\n\nYou do not have to enter all carbs for a meal at the same absorption or eating time.  If you want to enter some of the meal's carbs as faster, and some slower, you can log the meal over several individual carb entries.  For example, for meals that have sugary carbs as well as slow acting carbs (Chinese food), you may wish to do part of the carbs as lollipop and part of the carbs as pizza.\n\n\nPressing the \nSave\n button in the top right corner will save the carbs into the Loop app and bring up the Loop's bolus tool.  When entering multiple carb absorption durations for a single meal, press save on the carb entry and then press cancel on the bolus tool when it appears.  When you have entered your last carb entry for the meal, then use the bolus tool to deliver the bolus for the entire meal.  Loop will provide a recommendation based on all the saved carbs and their respective absorption durations in total.\n\n\nPrebolus\n\u2301\n\n\nYou can let Loop know you are going to prebolus a meal by adjusting the time of the carb entry on the \u201cdate\u201d line of the carb entry.  If you are prebolusing by 20 minutes, simply add 20 minutes to the carb entry time.  \n\n\nEdit Carbs\n\u2301\n\n\nClicking on the Carbohydrate chart in the Loop's main status screen will open the carb entry history and previous entries can be modified or deleted through this screen.  If you need to change a prebolus time, add/subtract carbs, adjust carb absorption times (even mid-meal), just go into that edit screen and tap on the carb entry you'd like to edit, or left-swipe to delete the entry entirely.  This can be a particularly useful tool when:\n\n\n\n\nYou did not finish an entire meal that you bolused for,\n\n\nYou did not get to eat meal at the time you originally expected,\n\n\nYou ate more servings than originally entered, or\n\n\nYou suspect your carb count was in error because BGs are rising more/less than expected.\n\n\n\n\n\n\n\n\n\n\n\nThird Party Apps\n\u2301\n\n\nIf you use a 3rd party app, such as My Fitness Pal, to enter and track carbs and that app also stores the carb values in HealthKit, Loop will read those values from Apple HealthKit and display and use them in calculating temp basal rates. Entries from 3rd party apps can not be removed from within Loop.  You will have to edit them in the third party app, or from the Health app. Because of this potential for confusion, it is recommended to turn off Loop's ability to read other apps' carbohydrate data from HealthKit. You are asked if you want to enable this when Loop is first installed. After installation, you can also go to the Settings App -\n Privacy -\n Health -\n Loop and turn off \nRead Data for Carbohydrates\n.", 
            "title": "Carb Entries"
        }, 
        {
            "location": "/operation/features/carbs/#carb-entry", 
            "text": "New carb entries can be made by using the green carb tool in the toolbar at the bottom of the status screen.  Do not use your pump's bolus wizard or pump's carb entry to record carbs into the Loop app.  Nor should you use Nightscout's careportal to enter carbs, as Loop does not read carb entries remotely.", 
            "title": "Carb Entry"
        }, 
        {
            "location": "/operation/features/carbs/#new-carbs", 
            "text": "To begin a new meal entry, simply enter the number of carbs to be eaten in the  amount consumed  line.  By default, the carb absorption time for a new carb entry will correspond to the taco icon.  If you haven't made any customizations to the lollipop, taco, or pizza icons during your Loop build, then the default carb absorption time will display as 3 hours.  The default time entry is for the current time and date.  Once you press  Save  on the carb entry screen, the Loop's bolus tool will open to provide a recommended bolus.", 
            "title": "New Carbs"
        }, 
        {
            "location": "/operation/features/carbs/#avoid-double-carb-entries", 
            "text": "Be Aware  When you press  Save  for a carb entry, Loop will consider that carb entry saved and use it for calculating temp basals and recommended boluses.  Be cautious about repeated attempts to enter the same meal...Loop will continue to save the carb entries UNLESS you push cancel on the carb entry screen.  Simply canceling a bolus does not cancel the carb entry. \nIf you have accidentally made multiple entries for the same carbs, click on the Carbs Chart in the main Loop display and you can delete the redundant carb entries by swiping left on the entries.", 
            "title": "Avoid Double Carb Entries"
        }, 
        {
            "location": "/operation/features/carbs/#carb-absorption-time", 
            "text": "To select your carb entry's absorption time, you can either click on the default food emojis or manually enter carb absorption time by selecting the  absorption time  line in the carb entry tool.  The plate emoji, found to the right of the pizza emoji, can also be used if you are unsure of a new food.  There are other food emojis grouped into fast, medium, and slow absorbing foods.  This may be particularly useful for teens that are trying to learn new foods/meals.  Additionally, if you select the plate icon, you can add text to your  food type  by selecting the  abc  button in the bottom left corner of the screen.        The default carb absorption times in Loop app are average representations for high, medium, and low glycemic index foods.  Ever since Loop v1.4.0, the algorithm incorporates dynamic carb absorption.  Previous Loop versions were based on a curve that assumed the rate of carb absorption would start out slow, increase to a mid-point, and then taper off.  However, in the real world, carb absorption is quite variable.  Dynamic carb absorption model is able to model some of this variability and allow Loop to respond more reasonably when actual carb absorption is not matching well with the selected carb absorption time for a meal.  In short, while entering a carb absorption time is still part of recording meals in Loop, it is much less critical to get it right.  Now your entry serves more as a guideline, than a rule, for Loop to model carb absorption.  For a more detailed explanation of the new dynamic carb absorption model, please read about it  here .  To help Loop adjust for carbs that may digest slower than your original estimate, Loop will initially apply a 1.5x multiplier to your entered carb absorption time.  So, a meal entered using the taco icon will initially be treated as a 4.5 hour absorption meal.  As Loop observes the BG impacts of the meal, Loop will shorten the meal's absorption time if BGs are showing quicker impacts than expected, as well as adjust insulin deliveries (e.g., increase temp basals).  You can watch the progression of the Loop's observations of your meal by clicking on the Carbs Chart and watching the insulin counteraction effects.", 
            "title": "Carb Absorption Time"
        }, 
        {
            "location": "/operation/features/carbs/#mixed-carb-meals", 
            "text": "You do not have to enter all carbs for a meal at the same absorption or eating time.  If you want to enter some of the meal's carbs as faster, and some slower, you can log the meal over several individual carb entries.  For example, for meals that have sugary carbs as well as slow acting carbs (Chinese food), you may wish to do part of the carbs as lollipop and part of the carbs as pizza.  Pressing the  Save  button in the top right corner will save the carbs into the Loop app and bring up the Loop's bolus tool.  When entering multiple carb absorption durations for a single meal, press save on the carb entry and then press cancel on the bolus tool when it appears.  When you have entered your last carb entry for the meal, then use the bolus tool to deliver the bolus for the entire meal.  Loop will provide a recommendation based on all the saved carbs and their respective absorption durations in total.", 
            "title": "Mixed Carb Meals"
        }, 
        {
            "location": "/operation/features/carbs/#prebolus", 
            "text": "You can let Loop know you are going to prebolus a meal by adjusting the time of the carb entry on the \u201cdate\u201d line of the carb entry.  If you are prebolusing by 20 minutes, simply add 20 minutes to the carb entry time.", 
            "title": "Prebolus"
        }, 
        {
            "location": "/operation/features/carbs/#edit-carbs", 
            "text": "Clicking on the Carbohydrate chart in the Loop's main status screen will open the carb entry history and previous entries can be modified or deleted through this screen.  If you need to change a prebolus time, add/subtract carbs, adjust carb absorption times (even mid-meal), just go into that edit screen and tap on the carb entry you'd like to edit, or left-swipe to delete the entry entirely.  This can be a particularly useful tool when:   You did not finish an entire meal that you bolused for,  You did not get to eat meal at the time you originally expected,  You ate more servings than originally entered, or  You suspect your carb count was in error because BGs are rising more/less than expected.", 
            "title": "Edit Carbs"
        }, 
        {
            "location": "/operation/features/carbs/#third-party-apps", 
            "text": "If you use a 3rd party app, such as My Fitness Pal, to enter and track carbs and that app also stores the carb values in HealthKit, Loop will read those values from Apple HealthKit and display and use them in calculating temp basal rates. Entries from 3rd party apps can not be removed from within Loop.  You will have to edit them in the third party app, or from the Health app. Because of this potential for confusion, it is recommended to turn off Loop's ability to read other apps' carbohydrate data from HealthKit. You are asked if you want to enable this when Loop is first installed. After installation, you can also go to the Settings App -  Privacy -  Health -  Loop and turn off  Read Data for Carbohydrates .", 
            "title": "Third Party Apps"
        }, 
        {
            "location": "/operation/features/bolus/", 
            "text": "Bolus\n\u2301\n\n\n\n\n\n\n\n\n\nBolus entries can be made manually through the bolus tool (double orange triangles) in the toolbar, either as part of a meal bolus or as a correction for a high BG.\n\n\nMeal Bolus\n\u2301\n\n\nLoop has a bolus tool, similar to a pump\u2019s bolus wizard. After a carb entry is saved, Loop will provide a bolus screen with a recommended bolus amount. The only time the bolus screen wouldn't appear is if Loop believes the insulin-on-board is already sufficient to cover the added carbs or you are missing current blood glucose data. If you want to deliver the total amount of the recommended bolus, simply tap on the recommended amount of units and the bolus delivery line will automatically be filled in with the same units. If you want to give fewer units than the recommended amount, you can manually enter the desired amount to be delivered.\n\n\nThe bolus tool will not offer a recommended bolus if your BG is predicted to go below your specified suspend threshold. A screen will appear letting you know the reason no bolus is being recommended, as well as the status of your active COB and IOB. You can choose to override that warning and give a bolus, or treat the low BG and come back to the bolus tool when your BG has recovered.\n\n\n\n\n\n\n\n\n\nCorrection Bolus\n\u2301\n\n\nOccasionally, a recommended bolus will be offered in the bolus tool unrelated to a newly saved carb entry. In those cases, Loop is calculating that it will not be able to stay in the BG correction range through the use of high temp basals alone and is offering a \u201ccorrection bolus\u201d. Correction boluses will not be delivered automatically by Loop, they must be delivered by the user. Loop will also not give an alert when a correction bolus is being offered, the bolus entry tool must be clicked to check for one. The Loop pill in Nightscout will display when Loop has a recommended bolus calculated. In a well-tuned Loop with decent carb counting, correction boluses should be infrequently needed.\n\n\nStarting Bolus Notification\n\u2301\n\n\nA new status line will appear when Loop is sending a bolus command to the pump. Just above the main screen's glucose chart, you will see a \"starting bolus\" indicator.\n\n\n\n\n\n\n\n\n\nBolus Failure Notifications\n\u2301\n\n\nOn occasion, you will receive notification that a bolus may have failed. In some of these cases, the bolus actually will begin delivery. Therefore, you should always check the pump screen to verify the bolus status before attempting to redeliver a failed bolus.\n\n\n\n\nThere is a known issue with some x15 WW pumps falsely stating bolus failure notifications with every bolus.  Please read \nhere\n for additional information about how to fix the issue until Loop code is updated with a permanent fix.\n\n\n\n\nPre-Meal\n\u2301\n\n\nThe pre-meal override target can be used prior to bolusing in order to help control post-prandial BGs. Most users will set a lower pre-meal target than what their normal correction range is. For example, a pre-meal target might be 80 - 80 mg/dL while your normal correction range might be 100-110 mg/dL. If you engage the pre-meal targets up to an hour before the meal, Loop will deliver an \"extra\" amount of insulin while it aims for that lower BG target. By getting the insulin in a little sooner, there will be more active insulin awaiting the carb absorption when the meal is eaten.\n\n\nThe pre-meal target will remain active until (1) 60 minutes has passed since it was activated, or (2) a carbohydrate entry has been saved in Loop, or (3) the Loop user manually cancels the pre-meal target by tapping on the icon again. Whichever of these happens first will cancel the pre-meal targets. If no action is taken, the pre-meal target will end on its own after 60 minutes.\n\n\nIf you are using the pre-meal target and save the carbs for the meal entry, Loop will cancel the pre-meal target and revert back to your normal correction range. Loop will account for the insulin it has \"pre-bolused\" while trying to reach the lower pre-meal target, and use your normal correction range when making the bolus recommendation.\n\n\nSquare or Dual Waves\n\u2301\n\n\nUnfortunately, Loop cannot enact temp basals while the pump is delivering a square- or dual-wave bolus. Therefore, you will need to use alternate bolusing strategies for situation where you would've previously used those extended bolusing techniques.\n\n\nThe good news is that Loop has the only \"smart\" bolus tool available in any DIY or commercial loop. Because you are entering a carb absorption time with each carb entry, Loop is also using that information to predict how well your insulin bolusing and carb absorption will align. So when Loop offers you a bolus, it may actually offer less of a bolus upfront for long, slow-carb meals...and will make up the remaining bolus amount via high temp basals later.\n\n\nIn understanding Loop's smart bolusing, it may help to think back to the reason you originally used square- or dual-wave boluses. Typically, you used those extended bolusing strategies because if you had entered all the insulin, based on carb ratio alone, upfront at the beginning of the meal...you would have gone low shortly after bolusing. The food would simply be absorbing too slow and the whole amount of insulin working too fast...and you'd go low until the rest of the meal would kick in later. The extended bolusing was a way of avoiding the early low and also addressing the later high for meals like pizza or Chinese food.\n\n\nLoop emulates that extended bolusing when you enter long-duration carb absorptions. Let's use an example of a pizza meal where carb ratios alone would've required a 10 unit bolus for the meal.  By telling Loop the meal will take a long (aka 4+ hours) carb absorption time, Loop may only offer 6 units up-front as an initial bolus. After you eat though, Loop knows that it has not provided all the insulin that will be necessary to account for the carbs. Loop will provide the remaining 4 units via high temp basals as soon as predicted BGs are showing that there is no danger of a post-prandial low. In other words, Loop waits until the danger of a quick low is over and then will high temp to cover the late digesting carbs. If you don't want to wait for Loop to deliver the remaining \"second\" bolus via high temps, you can click on the bolus tool when BGs start to rise and deliver the remaining bolus needed. Loop will have a recommended bolus awaiting when the predicted BGs are above correction range.\n\n\nYou can read another example of this extended bolusing technique over on \nLoopTips.org\n.\n\n\nWhile you adapt to new bolusing techniques, it is important to monitor closely to see what works for you. It will take some trial and error to get it right. For meals like Chinese food, where there is a mix of fast carbs and slow carbs, you may want to break the total meal entry into a couple mixed carb entries to help Loop provide the best bolus recommendation upfront. Additionally, some people account for the fats/proteins that digest by adding slow carbs with long absorption times for meals that cause late BG rises.\n\n\nA very useful tool is to check back on your Insulin Counteraction Effects graph to see how your original entry compared to how Loop perceived your final meal impacts. You can read more about that tool \nhere\n.\n\n\nGlucodyn\n\u2301\n\n\nUsing the \nGlucodyn\n model can help you simulate new bolusing strategies.  Glucodyn allows you to simulate your post-prandial BGs based on your particular ISF, carb ratio, and carbs. You can simulate split boluses and watch their impact on simulated BG responses.  The underlying math of the Glucodyn model was the basis of Loop's insulin/carb calculations in early Loop versions. The math has changed since then, however the model still provides a useful visualization about the interactions between DIA, carb absorption times and insulin dosing.", 
            "title": "Bolus"
        }, 
        {
            "location": "/operation/features/bolus/#bolus", 
            "text": "Bolus entries can be made manually through the bolus tool (double orange triangles) in the toolbar, either as part of a meal bolus or as a correction for a high BG.", 
            "title": "Bolus"
        }, 
        {
            "location": "/operation/features/bolus/#meal-bolus", 
            "text": "Loop has a bolus tool, similar to a pump\u2019s bolus wizard. After a carb entry is saved, Loop will provide a bolus screen with a recommended bolus amount. The only time the bolus screen wouldn't appear is if Loop believes the insulin-on-board is already sufficient to cover the added carbs or you are missing current blood glucose data. If you want to deliver the total amount of the recommended bolus, simply tap on the recommended amount of units and the bolus delivery line will automatically be filled in with the same units. If you want to give fewer units than the recommended amount, you can manually enter the desired amount to be delivered.  The bolus tool will not offer a recommended bolus if your BG is predicted to go below your specified suspend threshold. A screen will appear letting you know the reason no bolus is being recommended, as well as the status of your active COB and IOB. You can choose to override that warning and give a bolus, or treat the low BG and come back to the bolus tool when your BG has recovered.", 
            "title": "Meal Bolus"
        }, 
        {
            "location": "/operation/features/bolus/#correction-bolus", 
            "text": "Occasionally, a recommended bolus will be offered in the bolus tool unrelated to a newly saved carb entry. In those cases, Loop is calculating that it will not be able to stay in the BG correction range through the use of high temp basals alone and is offering a \u201ccorrection bolus\u201d. Correction boluses will not be delivered automatically by Loop, they must be delivered by the user. Loop will also not give an alert when a correction bolus is being offered, the bolus entry tool must be clicked to check for one. The Loop pill in Nightscout will display when Loop has a recommended bolus calculated. In a well-tuned Loop with decent carb counting, correction boluses should be infrequently needed.", 
            "title": "Correction Bolus"
        }, 
        {
            "location": "/operation/features/bolus/#starting-bolus-notification", 
            "text": "A new status line will appear when Loop is sending a bolus command to the pump. Just above the main screen's glucose chart, you will see a \"starting bolus\" indicator.", 
            "title": "Starting Bolus Notification"
        }, 
        {
            "location": "/operation/features/bolus/#bolus-failure-notifications", 
            "text": "On occasion, you will receive notification that a bolus may have failed. In some of these cases, the bolus actually will begin delivery. Therefore, you should always check the pump screen to verify the bolus status before attempting to redeliver a failed bolus.   There is a known issue with some x15 WW pumps falsely stating bolus failure notifications with every bolus.  Please read  here  for additional information about how to fix the issue until Loop code is updated with a permanent fix.", 
            "title": "Bolus Failure Notifications"
        }, 
        {
            "location": "/operation/features/bolus/#pre-meal", 
            "text": "The pre-meal override target can be used prior to bolusing in order to help control post-prandial BGs. Most users will set a lower pre-meal target than what their normal correction range is. For example, a pre-meal target might be 80 - 80 mg/dL while your normal correction range might be 100-110 mg/dL. If you engage the pre-meal targets up to an hour before the meal, Loop will deliver an \"extra\" amount of insulin while it aims for that lower BG target. By getting the insulin in a little sooner, there will be more active insulin awaiting the carb absorption when the meal is eaten.  The pre-meal target will remain active until (1) 60 minutes has passed since it was activated, or (2) a carbohydrate entry has been saved in Loop, or (3) the Loop user manually cancels the pre-meal target by tapping on the icon again. Whichever of these happens first will cancel the pre-meal targets. If no action is taken, the pre-meal target will end on its own after 60 minutes.  If you are using the pre-meal target and save the carbs for the meal entry, Loop will cancel the pre-meal target and revert back to your normal correction range. Loop will account for the insulin it has \"pre-bolused\" while trying to reach the lower pre-meal target, and use your normal correction range when making the bolus recommendation.", 
            "title": "Pre-Meal"
        }, 
        {
            "location": "/operation/features/bolus/#square-or-dual-waves", 
            "text": "Unfortunately, Loop cannot enact temp basals while the pump is delivering a square- or dual-wave bolus. Therefore, you will need to use alternate bolusing strategies for situation where you would've previously used those extended bolusing techniques.  The good news is that Loop has the only \"smart\" bolus tool available in any DIY or commercial loop. Because you are entering a carb absorption time with each carb entry, Loop is also using that information to predict how well your insulin bolusing and carb absorption will align. So when Loop offers you a bolus, it may actually offer less of a bolus upfront for long, slow-carb meals...and will make up the remaining bolus amount via high temp basals later.  In understanding Loop's smart bolusing, it may help to think back to the reason you originally used square- or dual-wave boluses. Typically, you used those extended bolusing strategies because if you had entered all the insulin, based on carb ratio alone, upfront at the beginning of the meal...you would have gone low shortly after bolusing. The food would simply be absorbing too slow and the whole amount of insulin working too fast...and you'd go low until the rest of the meal would kick in later. The extended bolusing was a way of avoiding the early low and also addressing the later high for meals like pizza or Chinese food.  Loop emulates that extended bolusing when you enter long-duration carb absorptions. Let's use an example of a pizza meal where carb ratios alone would've required a 10 unit bolus for the meal.  By telling Loop the meal will take a long (aka 4+ hours) carb absorption time, Loop may only offer 6 units up-front as an initial bolus. After you eat though, Loop knows that it has not provided all the insulin that will be necessary to account for the carbs. Loop will provide the remaining 4 units via high temp basals as soon as predicted BGs are showing that there is no danger of a post-prandial low. In other words, Loop waits until the danger of a quick low is over and then will high temp to cover the late digesting carbs. If you don't want to wait for Loop to deliver the remaining \"second\" bolus via high temps, you can click on the bolus tool when BGs start to rise and deliver the remaining bolus needed. Loop will have a recommended bolus awaiting when the predicted BGs are above correction range.  You can read another example of this extended bolusing technique over on  LoopTips.org .  While you adapt to new bolusing techniques, it is important to monitor closely to see what works for you. It will take some trial and error to get it right. For meals like Chinese food, where there is a mix of fast carbs and slow carbs, you may want to break the total meal entry into a couple mixed carb entries to help Loop provide the best bolus recommendation upfront. Additionally, some people account for the fats/proteins that digest by adding slow carbs with long absorption times for meals that cause late BG rises.  A very useful tool is to check back on your Insulin Counteraction Effects graph to see how your original entry compared to how Loop perceived your final meal impacts. You can read more about that tool  here .", 
            "title": "Square or Dual Waves"
        }, 
        {
            "location": "/operation/features/bolus/#glucodyn", 
            "text": "Using the  Glucodyn  model can help you simulate new bolusing strategies.  Glucodyn allows you to simulate your post-prandial BGs based on your particular ISF, carb ratio, and carbs. You can simulate split boluses and watch their impact on simulated BG responses.  The underlying math of the Glucodyn model was the basis of Loop's insulin/carb calculations in early Loop versions. The math has changed since then, however the model still provides a useful visualization about the interactions between DIA, carb absorption times and insulin dosing.", 
            "title": "Glucodyn"
        }, 
        {
            "location": "/operation/features/workout/", 
            "text": "Workout Targets\n\u2301\n\n\n\n\n\n\n\n\n\nWorkout mode enables a temporary override target from what would normally be scheduled. The default durations for the workout mode override target are 1 hour, 2 hours, or indefinitely. If you want more options for duration, you can \ncustomize them during your Loop build\n.\n\n\nWorkout mode is used to temporarily set higher BG targets ahead of exercise that would normally cause BG to drop.  This should give the user less chance of going low during exercise because Loop will be less aggressive on setting high temp basals.  The success of the workout targets to control/prevent exercise-related BG drops will depend on the type, duration, and intensity of the activity.  Generally the more intense the workout, the farther in advance you would want to set a workout target.\n\n\nIf you find that workout targets alone aren't sufficient to prevent exercise related lows, try to implement ways of decreasing the IOB you are carrying into the workout:\n\n\n\n\nSet the workout target farther in advance of workout activity,\n\n\nSet the workout target higher than previously set, and/or\n\n\nDecrease meal boluses prior to workout.\n\n\n\n\nIf you are the type to experience lows after workouts due to increased insulin sensitivity, you may want to extend your workout override target for a period of time after workout to help prevent lows.", 
            "title": "Workout Targets"
        }, 
        {
            "location": "/operation/features/workout/#workout-targets", 
            "text": "Workout mode enables a temporary override target from what would normally be scheduled. The default durations for the workout mode override target are 1 hour, 2 hours, or indefinitely. If you want more options for duration, you can  customize them during your Loop build .  Workout mode is used to temporarily set higher BG targets ahead of exercise that would normally cause BG to drop.  This should give the user less chance of going low during exercise because Loop will be less aggressive on setting high temp basals.  The success of the workout targets to control/prevent exercise-related BG drops will depend on the type, duration, and intensity of the activity.  Generally the more intense the workout, the farther in advance you would want to set a workout target.  If you find that workout targets alone aren't sufficient to prevent exercise related lows, try to implement ways of decreasing the IOB you are carrying into the workout:   Set the workout target farther in advance of workout activity,  Set the workout target higher than previously set, and/or  Decrease meal boluses prior to workout.   If you are the type to experience lows after workouts due to increased insulin sensitivity, you may want to extend your workout override target for a period of time after workout to help prevent lows.", 
            "title": "Workout Targets"
        }, 
        {
            "location": "/operation/features/ice/", 
            "text": "Insulin Counteraction Effects\n\u2301\n\n\nTapping on your Carbohydrates graph will open up a page that tracks your carb entries for the day (since midnight).  At the top of the page is a useful graphic called Insulin Counteraction Effects (ICE for short).  What is it?  Basically, a graphical representation of \npredicted\n upward-BG effects vs. \nencountered\n upward-BG effects.\n\n\nConsider the possible sources of triggers that counteract insulin (in other words, make BGs go up)\n\n\n\n\nfood\n\n\nstress\n\n\nillness\n\n\nsomeone sat too close to you\n\n\n\n\nAs we all know, this list can be long but, on \"normal\" days FOOD will be the single strongest \"insulin counteracter\".  Food will be the most influence on making BGs go up.  There are also other reasons that BGs climb when we may have expected them to be steady; basals being set too low, failed infusion site, etc.\n\n\nIf we assume that it's a \"normal\" day (basals are close to correct, illness is not an issue, the site is good), Loop will expect most of the UPWARD pressure on BGs are from food.  Loop is calling that upward pressure Insulin Counteraction Effect (ICE).  This is a pretty reasonable assumption so let's use that for the rest of this discussion.\n\n\nICE display\n\u2301\n\n\nLet's take a look at an example day using the screenshot below.  The graph at the top of your ICE page represents that upward pressure Loop expects from the food entries.  The predicted ICE is shown as grey bars.  As a meal is tracked by Loop, you'll see green bars of observed ICE.\n\n\n\n\n\n\n\n\n\nWhen you make a food entry originally, Loop will save your entry as you've made it.  On the line below your original entry, Loop will also start tracking your food entry assuming a 1.5 times longer carb absorption time.  This helps Loop track carbs that may actually be absorbing longer than you expected (part of that whole dynamic carb absorption modeling).  Loop will be updating that value of \"observed\" carb absorption time as well as absorbed carbs as your meal goes on.\n\n\nPractical use\n\u2301\n\n\nSo how can we use this information to make our Looping experience better?  The answer is probably best illustrated using a real-world example.  Chinese food...in fact, THIS Chinese dish.  General Tso's chicken.  As you can see in the recipe, loads of fast carbs with ingredients like hoisin sauce, brown sugar, and cornstarch.  But also slower carbs like chicken.  Rice can be a difficult one because for us, it acts fast but also seems to have a long tail.\n\n\n\n\n\n\n\n\n\nIt was a busy day and I really didn't want to count carbs.  Ok, even on the slow days I don't want to count carbs.  I just eyeballed the bowl of food and guessed.  As I entered the food in originally, I was still trying to come up with a good guess on the ratio of fast:slow carbs but kid was in a hurry to eat.  My initial guess around 3:30pm was 70g of carbs at 5 hours absorption (note: it gets edited to 80g in a little bit), we bolused for that and she started to eat.  About 10 minutes later, I decided to add 10g of fast-acting carbs at 1-hour absorption to help with the sauce's speedy carbs.\n\n\n\n\n\n\n\n\n\nWatching what was going on a little later...BGs were rising at a decent clip and I had a feeling I really didn't cover things super well...so I edited the original 70g entry, adding 10g and making it 80g instead.  (That's why there is a 2U bolus around 4:20pm.)  And of course around 5:40pm there was a little bit of nibbling on the leftovers as we put them into the fridge.  We gave 10g for that.  BGs climbed a bit more, not surprising given how we were underestimating fast carbs at this point...but still not so bad at 180 peak BG.  (Anna gave 2 units correction at the peak because there was dessert coming later that night and she wanted to be ready for it without too much pre-bolus.)\n\n\n\n\n\n\n\n\n\nSo, how can I use the ICE info to make this meal better?  I can look at the observed ICE information and the observed carb entry Loop has recorded to adjust my insulin bolusing the next time we eat this meal.\n\n\nFor example, the biggest weakness I had in this (and suspected it even as I did the initial bolus) was that I underestimated the sauce's fast carbs.  I can see this in the observed ICE graph having the early green peaks after the meal, and in the way that the observed carb distribution was more like 7:2 vs my original guess of 8:1 (slow:fast carbs).  Overall, it appears that I guess on overall carb content pretty closely (90g vs. 89g observed).  Next time we have General Tso's chicken, I will likely bolus it as 70g at 5 hours and 20g at 2 hours.\n\n\n\n\n\n\n\n\n\nSo remember to check your ICE page at the end of a meal's absorption.  By checking in on the meal's observed behaviors, you'll have a good starting point to fine-tuning any new or unknown carb breakdown.\n\n\nSide note:  remember this conversation is assuming you have basals fairly well set and are not sick.  If other factors could be significantly causing your BGs to swing that Loop doesn't know about (bad sites, illness, or basal rates that need to be adjusted), they may be attributed to ICE when they really aren't food-related.  In those cases, address the underlying cause and then use the ICE pages when you've come back to \"normal\".", 
            "title": "Using ICE info"
        }, 
        {
            "location": "/operation/features/ice/#insulin-counteraction-effects", 
            "text": "Tapping on your Carbohydrates graph will open up a page that tracks your carb entries for the day (since midnight).  At the top of the page is a useful graphic called Insulin Counteraction Effects (ICE for short).  What is it?  Basically, a graphical representation of  predicted  upward-BG effects vs.  encountered  upward-BG effects.  Consider the possible sources of triggers that counteract insulin (in other words, make BGs go up)   food  stress  illness  someone sat too close to you   As we all know, this list can be long but, on \"normal\" days FOOD will be the single strongest \"insulin counteracter\".  Food will be the most influence on making BGs go up.  There are also other reasons that BGs climb when we may have expected them to be steady; basals being set too low, failed infusion site, etc.  If we assume that it's a \"normal\" day (basals are close to correct, illness is not an issue, the site is good), Loop will expect most of the UPWARD pressure on BGs are from food.  Loop is calling that upward pressure Insulin Counteraction Effect (ICE).  This is a pretty reasonable assumption so let's use that for the rest of this discussion.", 
            "title": "Insulin Counteraction Effects"
        }, 
        {
            "location": "/operation/features/ice/#ice-display", 
            "text": "Let's take a look at an example day using the screenshot below.  The graph at the top of your ICE page represents that upward pressure Loop expects from the food entries.  The predicted ICE is shown as grey bars.  As a meal is tracked by Loop, you'll see green bars of observed ICE.     When you make a food entry originally, Loop will save your entry as you've made it.  On the line below your original entry, Loop will also start tracking your food entry assuming a 1.5 times longer carb absorption time.  This helps Loop track carbs that may actually be absorbing longer than you expected (part of that whole dynamic carb absorption modeling).  Loop will be updating that value of \"observed\" carb absorption time as well as absorbed carbs as your meal goes on.", 
            "title": "ICE display"
        }, 
        {
            "location": "/operation/features/ice/#practical-use", 
            "text": "So how can we use this information to make our Looping experience better?  The answer is probably best illustrated using a real-world example.  Chinese food...in fact, THIS Chinese dish.  General Tso's chicken.  As you can see in the recipe, loads of fast carbs with ingredients like hoisin sauce, brown sugar, and cornstarch.  But also slower carbs like chicken.  Rice can be a difficult one because for us, it acts fast but also seems to have a long tail.     It was a busy day and I really didn't want to count carbs.  Ok, even on the slow days I don't want to count carbs.  I just eyeballed the bowl of food and guessed.  As I entered the food in originally, I was still trying to come up with a good guess on the ratio of fast:slow carbs but kid was in a hurry to eat.  My initial guess around 3:30pm was 70g of carbs at 5 hours absorption (note: it gets edited to 80g in a little bit), we bolused for that and she started to eat.  About 10 minutes later, I decided to add 10g of fast-acting carbs at 1-hour absorption to help with the sauce's speedy carbs.     Watching what was going on a little later...BGs were rising at a decent clip and I had a feeling I really didn't cover things super well...so I edited the original 70g entry, adding 10g and making it 80g instead.  (That's why there is a 2U bolus around 4:20pm.)  And of course around 5:40pm there was a little bit of nibbling on the leftovers as we put them into the fridge.  We gave 10g for that.  BGs climbed a bit more, not surprising given how we were underestimating fast carbs at this point...but still not so bad at 180 peak BG.  (Anna gave 2 units correction at the peak because there was dessert coming later that night and she wanted to be ready for it without too much pre-bolus.)     So, how can I use the ICE info to make this meal better?  I can look at the observed ICE information and the observed carb entry Loop has recorded to adjust my insulin bolusing the next time we eat this meal.  For example, the biggest weakness I had in this (and suspected it even as I did the initial bolus) was that I underestimated the sauce's fast carbs.  I can see this in the observed ICE graph having the early green peaks after the meal, and in the way that the observed carb distribution was more like 7:2 vs my original guess of 8:1 (slow:fast carbs).  Overall, it appears that I guess on overall carb content pretty closely (90g vs. 89g observed).  Next time we have General Tso's chicken, I will likely bolus it as 70g at 5 hours and 20g at 2 hours.     So remember to check your ICE page at the end of a meal's absorption.  By checking in on the meal's observed behaviors, you'll have a good starting point to fine-tuning any new or unknown carb breakdown.  Side note:  remember this conversation is assuming you have basals fairly well set and are not sick.  If other factors could be significantly causing your BGs to swing that Loop doesn't know about (bad sites, illness, or basal rates that need to be adjusted), they may be attributed to ICE when they really aren't food-related.  In those cases, address the underlying cause and then use the ICE pages when you've come back to \"normal\".", 
            "title": "Practical use"
        }, 
        {
            "location": "/operation/features/watch/", 
            "text": "Apple Watch\n\u2301\n\n\n\n\n\n\n\n\n\nIf you add an Apple Watch after building Loop, you will need to pair your watch to your iPhone and then rebuild Loop to enable the Loop watch app to show up as an available watch app.\n\n\nLoop is currently supported with all released versions of the Apple Watch and Apple watchOS 4.1 and newer.  The cool factor is increased since the Loop user can directly enter carbs and boluses straight from the watch, without needing to access the iPhone.  The Loop watch app shows the Loop status, current BG, eventual BG, carb tool, and bolus tool.\n\n\nBy tapping on the carb or bolus tools, you can adjust the entries using the crown to dial in more/less.  The default installation of the Loop's watch app auto-fills in 75% of the recommended bolus, and you can manually scroll to get the full bolus amount.  Please check the \nApple Watch customizations section\n if you wish to change that to 100% recommended bolus as the initial autofill.\n\n\nIf you swipe the Apple Watch Loop screen from right-to-left, a second screen is available.  This second screen displays a graph of recent BG and predicted BG data.  The crown can be turned to display IOB and COB as well.\n\n\nA loop complication exists to show BG on the watch face but the update rate is limited to ~30mins due to limitations imposed by Apple to increase battery life. If constant, real-time monitoring is desired, you should use the Loop app as the main screen. This can be achieved by setting the watch to always show the last opened app on wake. Loop will always have to be the last app opened for this to work.  (Note: recent watchOS seems to be a bit flakey on actually bringing up the last app used, and instead often defaults to the user's watch face instead.  If you have a Loop complication installed in the watch face, you can simply tap the complication to open Loop's watch app.)", 
            "title": "Apple Watch"
        }, 
        {
            "location": "/operation/features/watch/#apple-watch", 
            "text": "If you add an Apple Watch after building Loop, you will need to pair your watch to your iPhone and then rebuild Loop to enable the Loop watch app to show up as an available watch app.  Loop is currently supported with all released versions of the Apple Watch and Apple watchOS 4.1 and newer.  The cool factor is increased since the Loop user can directly enter carbs and boluses straight from the watch, without needing to access the iPhone.  The Loop watch app shows the Loop status, current BG, eventual BG, carb tool, and bolus tool.  By tapping on the carb or bolus tools, you can adjust the entries using the crown to dial in more/less.  The default installation of the Loop's watch app auto-fills in 75% of the recommended bolus, and you can manually scroll to get the full bolus amount.  Please check the  Apple Watch customizations section  if you wish to change that to 100% recommended bolus as the initial autofill.  If you swipe the Apple Watch Loop screen from right-to-left, a second screen is available.  This second screen displays a graph of recent BG and predicted BG data.  The crown can be turned to display IOB and COB as well.  A loop complication exists to show BG on the watch face but the update rate is limited to ~30mins due to limitations imposed by Apple to increase battery life. If constant, real-time monitoring is desired, you should use the Loop app as the main screen. This can be achieved by setting the watch to always show the last opened app on wake. Loop will always have to be the last app opened for this to work.  (Note: recent watchOS seems to be a bit flakey on actually bringing up the last app used, and instead often defaults to the user's watch face instead.  If you have a Loop complication installed in the watch face, you can simply tap the complication to open Loop's watch app.)", 
            "title": "Apple Watch"
        }, 
        {
            "location": "/operation/features/widget/", 
            "text": "iPhone Widget\n\u2301\n\n\nThe Loop app will automatically build a widget that will be available on your iPhone.  The widget is available in the Today view of your iPhone.  Swipe right on your iPhone home screen and your widgets will be available.  The Loop widget maybe at the bottom of your widget list.  Scroll down to the bottom of the screen and press the \nedit\n button.  That opens an \"Add Widgets\" screen.  If you hold and drag the three horizontal lines on the Loop widget row, you can drag it up to the order you'd like it to appear on your widget list.", 
            "title": "iPhone widget"
        }, 
        {
            "location": "/operation/features/widget/#iphone-widget", 
            "text": "The Loop app will automatically build a widget that will be available on your iPhone.  The widget is available in the Today view of your iPhone.  Swipe right on your iPhone home screen and your widgets will be available.  The Loop widget maybe at the bottom of your widget list.  Scroll down to the bottom of the screen and press the  edit  button.  That opens an \"Add Widgets\" screen.  If you hold and drag the three horizontal lines on the Loop widget row, you can drag it up to the order you'd like it to appear on your widget list.", 
            "title": "iPhone Widget"
        }, 
        {
            "location": "/operation/features/notifications/", 
            "text": "Loop Notifications\n\u2301\n\n\nLoop provides discrete notifications on the iPhone and Watch which will appear on the (locked) screen and vibrate, depending on your notification settings of Loop.\n\n\nOmnipod\n\nMost beep alarms are disabled for a much more discrete use of the omnipod. Only the following audible acknowledgments or alarms are currently used:\n\n\n\n\nPod activated acknowledgment when filling the pod with enough insulin when pairing a new Pod.\n\n\nPod expiration advisory alarm at 72 hours/3 days (which you can silence in the \npod status  settings\n)\n\n\nPod empty reservoir (which you can silence in the \npod status  settings\n)\n\n\nPod deactivation acknowledgment \n\n\nPod fault alarm (also called a screamer) when reaching the max life of the Pod: 80 hours (3 days + 8 hours) or a fault/occlusion happens. (which you can silence using the \nreplace pod\n) command in the pod settings page)\n\n\n\n\nNotification settings for Loop\n\u2301\n\n\nYou can customize the way notifications of Loop are behaving in the Settings App of the iPhone:\n\n\n\n\n\n \n\n\nSettings of Loop:\n\n\n\n\n\n \n\n\nLoop Failure\n\u2301\n\n\nAt 20, 40, 60, and 120 minutes, there is a Loop Failure notification.\nThis mostly happens when the connection is lost for a longer period of time between the CGM or the Rileylink and Loop.\n\n\n\n\n\n\n\n\n\nBolus Failure\n\u2301\n\n\nIf Loop detects that a bolus was not able to be delivered, it will provide a notification.  Bolus failures are usually due to stale pump data.  Try fetching recent history from the RileyLink menu to update pump data.  Loop will also notify of partial bolus deliveries.\n\n\n\n\n\n\n\n\n\nLow Reservoir\n\u2301\n\n\nMedtronic\n\nAt 20% and 10% remaining reservoir volume, there is a Low Reservoir notification.\n\n\nOmnipod\n\nAt \n30U, \n20U, \n10U  \n\n\n\n\n\n\n\n\n\nEmpty Reservoir\n\u2301\n\n\nLoop will notify when the reservoir is empty. Loop will notify you every minute with this notification. \n\n\nOmnipod\n\nNormally you will have 5-30 minutes to replace the pod, but do know the pod can \nscream\n at any moment from this point on.\n\n\n\n\n\n\n\n\n\nPod Expiration (Omnipod)\n\u2301\n\n\nYou can customize the time of notification when to replace your pod any time from 1 hour up to 71 hours (3 days - 1 hour) \nafter staring a new pod\n or you change the time later in the \npod configuration settings\n.\nThe expiry alarm will always sound when the pod reaches a running full 3 days (72 hours) which you can silence \nin the pod status settings\n.\n\n\n\n\n\n\n\n\n\nLow Battery (Medtronic)\n\u2301\n\n\nLoop will notify when battery levels have approximately 8-10 hours of battery life remaining.\n\n\nRemote Notifications\n\u2301\n\n\nLoop does not have a remote notification to other devices.  If you are a remotely monitoring parent, you will want to read \nhere\n about setting up pushover alerts using your Nightscout site if you want proactive notifications of looping related information.", 
            "title": "Loop Notifications"
        }, 
        {
            "location": "/operation/features/notifications/#loop-notifications", 
            "text": "Loop provides discrete notifications on the iPhone and Watch which will appear on the (locked) screen and vibrate, depending on your notification settings of Loop.  Omnipod \nMost beep alarms are disabled for a much more discrete use of the omnipod. Only the following audible acknowledgments or alarms are currently used:   Pod activated acknowledgment when filling the pod with enough insulin when pairing a new Pod.  Pod expiration advisory alarm at 72 hours/3 days (which you can silence in the  pod status  settings )  Pod empty reservoir (which you can silence in the  pod status  settings )  Pod deactivation acknowledgment   Pod fault alarm (also called a screamer) when reaching the max life of the Pod: 80 hours (3 days + 8 hours) or a fault/occlusion happens. (which you can silence using the  replace pod ) command in the pod settings page)", 
            "title": "Loop Notifications"
        }, 
        {
            "location": "/operation/features/notifications/#notification-settings-for-loop", 
            "text": "You can customize the way notifications of Loop are behaving in the Settings App of the iPhone:      Settings of Loop:", 
            "title": "Notification settings for Loop"
        }, 
        {
            "location": "/operation/features/notifications/#loop-failure", 
            "text": "At 20, 40, 60, and 120 minutes, there is a Loop Failure notification.\nThis mostly happens when the connection is lost for a longer period of time between the CGM or the Rileylink and Loop.", 
            "title": "Loop Failure"
        }, 
        {
            "location": "/operation/features/notifications/#bolus-failure", 
            "text": "If Loop detects that a bolus was not able to be delivered, it will provide a notification.  Bolus failures are usually due to stale pump data.  Try fetching recent history from the RileyLink menu to update pump data.  Loop will also notify of partial bolus deliveries.", 
            "title": "Bolus Failure"
        }, 
        {
            "location": "/operation/features/notifications/#low-reservoir", 
            "text": "Medtronic \nAt 20% and 10% remaining reservoir volume, there is a Low Reservoir notification.  Omnipod \nAt  30U,  20U,  10U", 
            "title": "Low Reservoir"
        }, 
        {
            "location": "/operation/features/notifications/#empty-reservoir", 
            "text": "Loop will notify when the reservoir is empty. Loop will notify you every minute with this notification.   Omnipod \nNormally you will have 5-30 minutes to replace the pod, but do know the pod can  scream  at any moment from this point on.", 
            "title": "Empty Reservoir"
        }, 
        {
            "location": "/operation/features/notifications/#pod-expiration-omnipod", 
            "text": "You can customize the time of notification when to replace your pod any time from 1 hour up to 71 hours (3 days - 1 hour)  after staring a new pod  or you change the time later in the  pod configuration settings .\nThe expiry alarm will always sound when the pod reaches a running full 3 days (72 hours) which you can silence  in the pod status settings .", 
            "title": "Pod Expiration (Omnipod)"
        }, 
        {
            "location": "/operation/features/notifications/#low-battery-medtronic", 
            "text": "Loop will notify when battery levels have approximately 8-10 hours of battery life remaining.", 
            "title": "Low Battery (Medtronic)"
        }, 
        {
            "location": "/operation/features/notifications/#remote-notifications", 
            "text": "Loop does not have a remote notification to other devices.  If you are a remotely monitoring parent, you will want to read  here  about setting up pushover alerts using your Nightscout site if you want proactive notifications of looping related information.", 
            "title": "Remote Notifications"
        }, 
        {
            "location": "/operation/features/battery/", 
            "text": "Pump Battery\n\u2301\n\n\nOne common confusion point for new Loop users is how to interpret their pump's battery levels and whether they need to change their pump batteries based on which pieces of information.\n\n\nDischarge Curves\n\u2301\n\n\nThere are generally two different types of AAA batteries that we use in these Medtronic pumps; alkaline or lithium.\n\n\nTo understand pump battery levels, you first need to know a little about \nbattery discharge curves\n.  It's not a hard concept...basically how a battery dies over time as it is used or sits in a drawer.  More technically said, a battery discharge curve is the measure of volts that a battery puts out over time.  Batteries start at a higher voltage output and slowly that voltage output degrades over time (or use) until the battery no longer provides enough \"ummph\" to keep the electronic gadget going.  BUT, alkaline batteries and lithium batteries have different discharge curves due to the chemistry inside them, and the curves can be slightly different depending on the environment (temperature) and battery manufacturer.\n\n\nAlkaline batteries have a relatively steady voltage drop over time, as shown below.  Notice the shape of the curve has a significant amount of time in the 1.3 to 1.2 volts range, and a relatively smooth decline to about 1.2 volts.\n\n\n\n\n\n\n\n\n\nLithium batteries have a much steadier voltage output over time, as shown below.  Notice how the shape of the curve is relatively flat for a large portion of the battery life before suddenly off around 1.3 volts.\n\n\n\n\n\n\n\n\n\nWhat does the above information mean in terms of Looping?  A lithium battery at 1.3v is going to have a much quicker time to death than an alkaline battery sitting at 1.3v.  You might only get a couple of hours of looping left when a lithium battery is at 1.3v, but an alkaline battery at 1.3v might go for several more days.  So when we talk about setting alarm levels in either system, your battery type is an important consideration.\n\n\nMedtronic Pump Battery Level Indicator\n\u2301\n\n\nIf you read Medtronic's literature, it will tell you to use Energizer alkaline batteries in their pumps.  Why would that be?  Hint: the answer doesn't mean that Duracell batteries are inherently worse than Energizer or that lithium batteries won't work in Medtronic pumps.\n\n\nThe answer is all about the accuracy of their little pump battery level indicator on their pump's screen.\n  Medtronic calibrated their pump battery level indicator to:\n\n\n\n\nEnergizer alkaline batteries\n\n\nNormal (non-Loop) uses\n\n\nTemperatures between 37\u00b0F (3\u00b0C) to 104\u00b0F (40\u00b0C).\n\n\n\n\nIn other words, Medtronic ran experiments to see exactly how long an Energizer alkaline battery will last in normal pump use and made their own discharge curve.  They programmed their pump battery level indicator to change from 4 bars to 3 bars to 2 bars to 1 bar based on that particular discharge curve.\n\n\nHowever, Loop users are slightly more demanding on the pump's battery/voltage than simply delivering insulin.  We are also asking for the pump to perform radio communications, in addition to delivering insulin.  Those radio communications needs a slightly higher voltage than the typical \"normal\" pump use.  So while a non-Looper might be ok running their pump until a voltage of about 1.12 for insulin delivery, radio communications might stop at a voltage output of about 1.17.  If you experiment with your Looping pump, you'll find Loop will turn red from failed pump comms before the pump actually fails at insulin delivery.  This difference between \"failure\" voltages needs to be considered when determining how much useful battery life is left for a pump battery.\n\n\nIn summary, that little pump battery indicator on the Medtronic pump screen is ONLY useful if you are:\n\n\n\n\nnot using the pump for Looping,\n\n\nusing Energizer alkaline batteries, and\n\n\nin the temperature environment similar to their testing.\n\n\n\n\n\n\nLoop users should not rely on their Medtronic pump screen's pump battery indicator, and instead use the Loop's pump battery level indicator.\n\n\n\n\nLoop's Pump Battery Level Indicator\n\u2301\n\n\nKeeping the information about battery discharge curves in mind, Loop developers tested various battery brands and types to develop discharge curves for Loop users.  These discharge curves form the basis of the pump battery level indicator found in the top right of the Loop's main display screen and the pump battery notifications provided by the Loop app.  The pump battery level indicator will also report in %.\n\n\n\n\nFor x23 and x54 model users, the Loop's pump battery level will move in 25% increments.\n\n\nFor x15 and x22 model users, the Loop's pump battery level will move in discrete % increments.\n\n\n\n\nBased on the battery type selected and the pump model being used, the Loop's pump battery level notifications are designed to give the user about 8 hours of notice before pump communications are likely to fail.  The Loop user should have some additional time after pump comms fail before actual insulin delivery would stop.\n\n\nNightscout Pump Battery Display\n\u2301\n\n\nThe Nightscout information regarding pump battery levels will depend on pump model being used.\n\n\n\n\nIf you use an x23 or x54 pump and MySentry, the pump levels are reported as a \npercent\n to NS, because that's how MySentry reports the data to Loop.  The packets use 100%, 75%, 50%, and 25% increments, and the Loop's main display matches the NS pump display.\n\n\nIf you use an x22 or x15 pump, the pump levels are reported as \nvoltage\n readings to NS because Loop has to specifically request the voltage reading from the pump.  The Loop's main display will show pump battery level as discrete %, not the individual voltage measurement.\n\n\nNo matter what pump you are using, you can always get the current pump battery's voltage by using the RileyLink's \nRead Pump Status\n command.\n\n\nThe extra communications effort for non-MySentry model pumps will mean slightly shorter battery life vs. MySentry model pumps.\n\n\n\n\nNightscout Pump Battery Alarms\n\u2301\n\n\nThe Nightscout alarms are based on the Heroku settings that you have input specifically.  If you don't specifically set them, Nightscout will use the default settings for pump battery alerts as shown below:\n\n\n\n\n\n\n\n\n\nNightscout pump battery levels, if you leave things at default installation, will not trigger alarms.  If however you add a setting of \nPUMP_ENABLE_ALERTS\n to \ntrue\n, you will receive pump battery notifications according to the levels shown in the parenthesis above.  For example, your x23 pump is reporting its levels in percent, therefore you'd receive a yellow warning alarm at 30% and an urgent red alarm at 20%.  Your x22 pump however is reporting its levels at voltage readings, therefore you'd receive a warning yellow alarm at 1.35v and an urgent red alarm at 1.30v.\n\n\n\n\nAre the default NS alarm levels going to work for you?  The answer depends on what type of battery level you are using, what model pump you are using, and how much advance notification you want to receive before needing to change a pump battery.  There is a bit of personal preference and experimentation to finding what works for you.\n\n\n\n\n\n\nFor x22 or x15 pump users, the NS alert settings that may need to be adjusted are the ones based on voltage.\n\n\n\n\n\nGenerally speaking, for a x22 or x15 pump using alkaline batteries, the default NS alarm levels will be too early to be useful and lead you to change out your battery too frequently.  Alkaline batteries can go to low 1.2s or high 1.1s before Looping starts to have communication problems.  How much lower than the default voltage 1.35/1.30 alarm levels you want to go will depend on how far in advance you want to be warned about an upcoming battery change.\n\n\nIf however, you are using a x22 or x15 pump with lithium batteries, the default 1.35v/1.30v alarm levels may be completely appropriate.  Remember how the lithium battery curves at the start of this discussion died off quickly around 1.3v?  You won't get hardly any heads-up notice for a lithium battery if you set the alarm below 1.3v.\n\n\n\n\nFor x23 or x54 pump users, the NS alert settings that may need to be adjusted are the ones based on percentage settings.\n\n\n\n\n\nAlkaline and lithium batteries should have automatically had their percentage-remaining based on the correct battery type in your Loop settings.  So, generally speaking the default NS alert levels don't generally need adjusting.  However, if you are using lithium batteries, the drop off between 75% to 25% can be quite dramatic and not be easy to anticipate (especially if the drop happens overnight).\n\n\nAs an alternative method of tracking pump battery changes, you could use the insulin age (IAGE) plug-in to anticipate your pump battery changes as well.  For example, after tracking pump battery life on my 723 using energizer batteries lithium batteries for the last several months, I know that we get about 15 days plus a handful of hours.  The amount of hours more beyond 15 days varies depending on how much we've interacted with the pump buttons directly, whether we've looped the full 15-days solid, and if the pump has been in extreme weather (cold weather can sap pump battery life).  By tracking the pump battery changes with NS's careportal \"insulin cartridge change\", I can see in advance if we are nearing an overnight on a 15 day battery and decide to change batteries before overnight to prevent any middle-of-night battery issues.\n\n\n\n\n\n\nLithium batteries will get a significantly longer life than an alkaline battery.\n\n\nExperiment and track your particular pump model and battery type to understand what NS settings will work best for you.\n\n\nDo not rely on the pump's on-screen pump battery indicator, especially when using lithium batteries.", 
            "title": "Pump Battery"
        }, 
        {
            "location": "/operation/features/battery/#pump-battery", 
            "text": "One common confusion point for new Loop users is how to interpret their pump's battery levels and whether they need to change their pump batteries based on which pieces of information.", 
            "title": "Pump Battery"
        }, 
        {
            "location": "/operation/features/battery/#discharge-curves", 
            "text": "There are generally two different types of AAA batteries that we use in these Medtronic pumps; alkaline or lithium.  To understand pump battery levels, you first need to know a little about  battery discharge curves .  It's not a hard concept...basically how a battery dies over time as it is used or sits in a drawer.  More technically said, a battery discharge curve is the measure of volts that a battery puts out over time.  Batteries start at a higher voltage output and slowly that voltage output degrades over time (or use) until the battery no longer provides enough \"ummph\" to keep the electronic gadget going.  BUT, alkaline batteries and lithium batteries have different discharge curves due to the chemistry inside them, and the curves can be slightly different depending on the environment (temperature) and battery manufacturer.  Alkaline batteries have a relatively steady voltage drop over time, as shown below.  Notice the shape of the curve has a significant amount of time in the 1.3 to 1.2 volts range, and a relatively smooth decline to about 1.2 volts.     Lithium batteries have a much steadier voltage output over time, as shown below.  Notice how the shape of the curve is relatively flat for a large portion of the battery life before suddenly off around 1.3 volts.     What does the above information mean in terms of Looping?  A lithium battery at 1.3v is going to have a much quicker time to death than an alkaline battery sitting at 1.3v.  You might only get a couple of hours of looping left when a lithium battery is at 1.3v, but an alkaline battery at 1.3v might go for several more days.  So when we talk about setting alarm levels in either system, your battery type is an important consideration.", 
            "title": "Discharge Curves"
        }, 
        {
            "location": "/operation/features/battery/#medtronic-pump-battery-level-indicator", 
            "text": "If you read Medtronic's literature, it will tell you to use Energizer alkaline batteries in their pumps.  Why would that be?  Hint: the answer doesn't mean that Duracell batteries are inherently worse than Energizer or that lithium batteries won't work in Medtronic pumps.  The answer is all about the accuracy of their little pump battery level indicator on their pump's screen.   Medtronic calibrated their pump battery level indicator to:   Energizer alkaline batteries  Normal (non-Loop) uses  Temperatures between 37\u00b0F (3\u00b0C) to 104\u00b0F (40\u00b0C).   In other words, Medtronic ran experiments to see exactly how long an Energizer alkaline battery will last in normal pump use and made their own discharge curve.  They programmed their pump battery level indicator to change from 4 bars to 3 bars to 2 bars to 1 bar based on that particular discharge curve.  However, Loop users are slightly more demanding on the pump's battery/voltage than simply delivering insulin.  We are also asking for the pump to perform radio communications, in addition to delivering insulin.  Those radio communications needs a slightly higher voltage than the typical \"normal\" pump use.  So while a non-Looper might be ok running their pump until a voltage of about 1.12 for insulin delivery, radio communications might stop at a voltage output of about 1.17.  If you experiment with your Looping pump, you'll find Loop will turn red from failed pump comms before the pump actually fails at insulin delivery.  This difference between \"failure\" voltages needs to be considered when determining how much useful battery life is left for a pump battery.  In summary, that little pump battery indicator on the Medtronic pump screen is ONLY useful if you are:   not using the pump for Looping,  using Energizer alkaline batteries, and  in the temperature environment similar to their testing.    Loop users should not rely on their Medtronic pump screen's pump battery indicator, and instead use the Loop's pump battery level indicator.", 
            "title": "Medtronic Pump Battery Level Indicator"
        }, 
        {
            "location": "/operation/features/battery/#loops-pump-battery-level-indicator", 
            "text": "Keeping the information about battery discharge curves in mind, Loop developers tested various battery brands and types to develop discharge curves for Loop users.  These discharge curves form the basis of the pump battery level indicator found in the top right of the Loop's main display screen and the pump battery notifications provided by the Loop app.  The pump battery level indicator will also report in %.   For x23 and x54 model users, the Loop's pump battery level will move in 25% increments.  For x15 and x22 model users, the Loop's pump battery level will move in discrete % increments.   Based on the battery type selected and the pump model being used, the Loop's pump battery level notifications are designed to give the user about 8 hours of notice before pump communications are likely to fail.  The Loop user should have some additional time after pump comms fail before actual insulin delivery would stop.", 
            "title": "Loop's Pump Battery Level Indicator"
        }, 
        {
            "location": "/operation/features/battery/#nightscout-pump-battery-display", 
            "text": "The Nightscout information regarding pump battery levels will depend on pump model being used.   If you use an x23 or x54 pump and MySentry, the pump levels are reported as a  percent  to NS, because that's how MySentry reports the data to Loop.  The packets use 100%, 75%, 50%, and 25% increments, and the Loop's main display matches the NS pump display.  If you use an x22 or x15 pump, the pump levels are reported as  voltage  readings to NS because Loop has to specifically request the voltage reading from the pump.  The Loop's main display will show pump battery level as discrete %, not the individual voltage measurement.  No matter what pump you are using, you can always get the current pump battery's voltage by using the RileyLink's  Read Pump Status  command.  The extra communications effort for non-MySentry model pumps will mean slightly shorter battery life vs. MySentry model pumps.", 
            "title": "Nightscout Pump Battery Display"
        }, 
        {
            "location": "/operation/features/battery/#nightscout-pump-battery-alarms", 
            "text": "The Nightscout alarms are based on the Heroku settings that you have input specifically.  If you don't specifically set them, Nightscout will use the default settings for pump battery alerts as shown below:     Nightscout pump battery levels, if you leave things at default installation, will not trigger alarms.  If however you add a setting of  PUMP_ENABLE_ALERTS  to  true , you will receive pump battery notifications according to the levels shown in the parenthesis above.  For example, your x23 pump is reporting its levels in percent, therefore you'd receive a yellow warning alarm at 30% and an urgent red alarm at 20%.  Your x22 pump however is reporting its levels at voltage readings, therefore you'd receive a warning yellow alarm at 1.35v and an urgent red alarm at 1.30v.   Are the default NS alarm levels going to work for you?  The answer depends on what type of battery level you are using, what model pump you are using, and how much advance notification you want to receive before needing to change a pump battery.  There is a bit of personal preference and experimentation to finding what works for you.    For x22 or x15 pump users, the NS alert settings that may need to be adjusted are the ones based on voltage.   Generally speaking, for a x22 or x15 pump using alkaline batteries, the default NS alarm levels will be too early to be useful and lead you to change out your battery too frequently.  Alkaline batteries can go to low 1.2s or high 1.1s before Looping starts to have communication problems.  How much lower than the default voltage 1.35/1.30 alarm levels you want to go will depend on how far in advance you want to be warned about an upcoming battery change.  If however, you are using a x22 or x15 pump with lithium batteries, the default 1.35v/1.30v alarm levels may be completely appropriate.  Remember how the lithium battery curves at the start of this discussion died off quickly around 1.3v?  You won't get hardly any heads-up notice for a lithium battery if you set the alarm below 1.3v.   For x23 or x54 pump users, the NS alert settings that may need to be adjusted are the ones based on percentage settings.   Alkaline and lithium batteries should have automatically had their percentage-remaining based on the correct battery type in your Loop settings.  So, generally speaking the default NS alert levels don't generally need adjusting.  However, if you are using lithium batteries, the drop off between 75% to 25% can be quite dramatic and not be easy to anticipate (especially if the drop happens overnight).  As an alternative method of tracking pump battery changes, you could use the insulin age (IAGE) plug-in to anticipate your pump battery changes as well.  For example, after tracking pump battery life on my 723 using energizer batteries lithium batteries for the last several months, I know that we get about 15 days plus a handful of hours.  The amount of hours more beyond 15 days varies depending on how much we've interacted with the pump buttons directly, whether we've looped the full 15-days solid, and if the pump has been in extreme weather (cold weather can sap pump battery life).  By tracking the pump battery changes with NS's careportal \"insulin cartridge change\", I can see in advance if we are nearing an overnight on a 15 day battery and decide to change batteries before overnight to prevent any middle-of-night battery issues.    Lithium batteries will get a significantly longer life than an alkaline battery.  Experiment and track your particular pump model and battery type to understand what NS settings will work best for you.  Do not rely on the pump's on-screen pump battery indicator, especially when using lithium batteries.", 
            "title": "Nightscout Pump Battery Alarms"
        }, 
        {
            "location": "/operation/loop/open-loop/", 
            "text": "Open-Loop\n\u2301\n\n\nOpen-loop is a great place to start with Loop. When you are operating in open-loop mode, Loop is offering recommendations for temp basals and will display them on the main screen.  The recommendations will not be enacted unless you specifically choose to enact the temp basal.  Usually in open-loop mode, you aren't really enacting the recommended basals but instead watching how the recommendations come in and figuring out WHY they are being recommended.\n\n\nIt is understandable to want to jump straight away into close-loop mode, but a lot can be learned by watching Loop operate in open mode.  Becoming familiar with the algorithm can be easier by watching it in action rather than only reading about it in docs.\n\n\nTesting\n\u2301\n\n\nA great benefit of open-loop mode is that you can establish a baseline of BG trends without the influence of temp basals from Loop.  This is particularly helpful if you haven't used Medtronic sites/pumps prior to Loop.  You may find that your basal rates change significantly coming from other brands of pumps.  Taking the time to establish a good Medtronic pump basal profile will set you up for a smoother transition to close-loop mode.  Test your ISF during open-loop time too, as ISF is an important component for every Loop calculation for temp basals.  Every 5 minutes, Loop uses your ISF...so it's worth testing it ahead of close-loop mode.\n\n\nEventual BG\n\u2301\n\n\nOne of the best things you can do is to train yourself to watch the eventual BG rather than the current BG for helping understand Loop recommendations for temp basals.  So many of us have become accustomed to dealing with current BGs and perhaps IOB at the same time...but Loop is also looking at BG momentum, carbs on board, retrospective trends.  Loop is utilizing all of those variables to predict an eventual BG.  Its current decisions are based on that eventual BG.  Training yourself to watch that eventual BG will help you understand the temp basals being offered at any given time.\n\n\nCarb Absorption\n\u2301\n\n\nProbably the next most difficult transition involves using carb absorption as a component to every meal bolus.  Understand that the default carb absorption times in Loop may not work for your particular body.  Similar to how you perhaps had used extended boluses for meals that impacted BGs longer than the duration of your insulin...that same idea applies to estimate your carb absorption times.  Watch your meals and try to estimate how long they are impacting your BG for various types of food.  Watch the times when Loop would've wanted to suspend or high temp basal...ask yourself why it would be doing that.  Especially ask yourself if that is the same decision as you would've made at that time in a meal normally.  Would you be worried that you might go low later if you see Loop offering high temp basal early after a meal?  Would you be worried about going high later if Loop wants to suspend basals instead?  If you put some effort into this effort before closing the loop, it will pay off with a smoother transition to closed loop.\n\n\nTroubleshooting\n\u2301\n\n\nGet used to carrying the RileyLink around.  Find how far your connectivity stretches before you have pump communication problems.  Get used to troubleshooting yellow and red loops, finding out the pattern/cause of any potential loop issues.  You'll be less frustrated starting on closed loop if you aren't dealing with learning new electronics at the same time as you are learning carb absorption times in a closed loop.  Learn how to retune your RL. \n\n\nBolus\n\u2301\n\n\nBolus meals from the Loop, rather than the pump.  Become familiar with entering carbs into the Loop app, as well as editing them.  Watch how long it takes for Loop app to display the bolus after you enact it (hint: there's a delay until the bolus finishes delivery and the pump gets read).  Familiarize yourself with the \"Bolus May Have Failed\" notifications and how to handle them.  Double-check the pump and verify that the bolus didn't enact before trying to give the bolus again.  \n\n\nCaregiver training\n\u2301\n\n\nIf you are the parent or guardian of a t1d kid using Loop, make sure you take the time to educate caregivers around your family and school for how to use Loop.  Perhaps you want to draft individualized quick info sheets for those caregivers to use with Loop.  If your child needs a site change at school, school staff or your child need to know how to delete reservoir history or change to open-loop for the duration of DIA.  Try to watch Nightscout while you get to know Loop so that you can become better at remote troubleshooting of any problems that you might encounter.", 
            "title": "Open Loop"
        }, 
        {
            "location": "/operation/loop/open-loop/#open-loop", 
            "text": "Open-loop is a great place to start with Loop. When you are operating in open-loop mode, Loop is offering recommendations for temp basals and will display them on the main screen.  The recommendations will not be enacted unless you specifically choose to enact the temp basal.  Usually in open-loop mode, you aren't really enacting the recommended basals but instead watching how the recommendations come in and figuring out WHY they are being recommended.  It is understandable to want to jump straight away into close-loop mode, but a lot can be learned by watching Loop operate in open mode.  Becoming familiar with the algorithm can be easier by watching it in action rather than only reading about it in docs.", 
            "title": "Open-Loop"
        }, 
        {
            "location": "/operation/loop/open-loop/#testing", 
            "text": "A great benefit of open-loop mode is that you can establish a baseline of BG trends without the influence of temp basals from Loop.  This is particularly helpful if you haven't used Medtronic sites/pumps prior to Loop.  You may find that your basal rates change significantly coming from other brands of pumps.  Taking the time to establish a good Medtronic pump basal profile will set you up for a smoother transition to close-loop mode.  Test your ISF during open-loop time too, as ISF is an important component for every Loop calculation for temp basals.  Every 5 minutes, Loop uses your ISF...so it's worth testing it ahead of close-loop mode.", 
            "title": "Testing"
        }, 
        {
            "location": "/operation/loop/open-loop/#eventual-bg", 
            "text": "One of the best things you can do is to train yourself to watch the eventual BG rather than the current BG for helping understand Loop recommendations for temp basals.  So many of us have become accustomed to dealing with current BGs and perhaps IOB at the same time...but Loop is also looking at BG momentum, carbs on board, retrospective trends.  Loop is utilizing all of those variables to predict an eventual BG.  Its current decisions are based on that eventual BG.  Training yourself to watch that eventual BG will help you understand the temp basals being offered at any given time.", 
            "title": "Eventual BG"
        }, 
        {
            "location": "/operation/loop/open-loop/#carb-absorption", 
            "text": "Probably the next most difficult transition involves using carb absorption as a component to every meal bolus.  Understand that the default carb absorption times in Loop may not work for your particular body.  Similar to how you perhaps had used extended boluses for meals that impacted BGs longer than the duration of your insulin...that same idea applies to estimate your carb absorption times.  Watch your meals and try to estimate how long they are impacting your BG for various types of food.  Watch the times when Loop would've wanted to suspend or high temp basal...ask yourself why it would be doing that.  Especially ask yourself if that is the same decision as you would've made at that time in a meal normally.  Would you be worried that you might go low later if you see Loop offering high temp basal early after a meal?  Would you be worried about going high later if Loop wants to suspend basals instead?  If you put some effort into this effort before closing the loop, it will pay off with a smoother transition to closed loop.", 
            "title": "Carb Absorption"
        }, 
        {
            "location": "/operation/loop/open-loop/#troubleshooting", 
            "text": "Get used to carrying the RileyLink around.  Find how far your connectivity stretches before you have pump communication problems.  Get used to troubleshooting yellow and red loops, finding out the pattern/cause of any potential loop issues.  You'll be less frustrated starting on closed loop if you aren't dealing with learning new electronics at the same time as you are learning carb absorption times in a closed loop.  Learn how to retune your RL.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/operation/loop/open-loop/#bolus", 
            "text": "Bolus meals from the Loop, rather than the pump.  Become familiar with entering carbs into the Loop app, as well as editing them.  Watch how long it takes for Loop app to display the bolus after you enact it (hint: there's a delay until the bolus finishes delivery and the pump gets read).  Familiarize yourself with the \"Bolus May Have Failed\" notifications and how to handle them.  Double-check the pump and verify that the bolus didn't enact before trying to give the bolus again.", 
            "title": "Bolus"
        }, 
        {
            "location": "/operation/loop/open-loop/#caregiver-training", 
            "text": "If you are the parent or guardian of a t1d kid using Loop, make sure you take the time to educate caregivers around your family and school for how to use Loop.  Perhaps you want to draft individualized quick info sheets for those caregivers to use with Loop.  If your child needs a site change at school, school staff or your child need to know how to delete reservoir history or change to open-loop for the duration of DIA.  Try to watch Nightscout while you get to know Loop so that you can become better at remote troubleshooting of any problems that you might encounter.", 
            "title": "Caregiver training"
        }, 
        {
            "location": "/operation/loop/close-loop/", 
            "text": "Close-Loop\n\u2301\n\n\nWhen you feel like you have learned what you need from open-loop, you should be ready to switch to close-loop.  There are several ways you can help make that transition as smooth as possible.  \n\n\nTiming\n\u2301\n\n\nMany people choose to transition to close-loop in a step-wise fashion.  Starting close-loop on weekends is an easier starting point so that you can minimize distractions (let's face it...you'll probably be staring at the Loop a lot for those first few days). Typically, people have an easier time transitioning to close-loop for parts of their day that don't involve food...so nighttimes tend to be easier than daytimes to start.\n\n\nMaximum Basal Rate\n\u2301\n\n\nWhen you are first beginning to close-loop, it is important to be conservative (low) in setting your maximum basal rate.  If your settings are incorrect in other areas (basal rates, carb absorption time, carb ratio, etc), Loop may enact incorrectly aggressive high temp basals.  Gradually increase your maximum basal rate as your comfort and confidence in Loop increase.  Typically, experienced closed loop users set their max basal rate no more than 3-4 times their average basal rate.  \n\n\nBG targets\n\u2301\n\n\nIf your basals, ISF, or carb ratios aren't set correctly, Loop may overshoot and leave you lower than expected (or with more IOB than you are comfortable with).  Setting your low BG target slightly higher can help prevent unexpected lows or high IOB as you adjust your settings.\n\n\nWatch the IOB\n\u2301\n\n\nWatch whether Loop accumulates positive or negative IOB while holding your BG steady when no food is present.  If you find that you are \"carrying\" positive or negative IOB consistently, you should review your settings to see if perhaps your basal or ISF needs adjusting.\n\n\nMeals\n\u2301\n\n\nMeals will likely be the hardest part of transitioning to close-loop.  Starting with foods that you have a high comfort level with is a great idea.  If you have favorite meals that you know well (how high BGs usually go, how much to bolus, how to pre-bolus, etc), these would be a good starting point.  Watching when the Loop high temps or suspends basals (early vs late in the meal) will really help you adjust to find your typical carb absorption times.  As a general idea, \nassuming other settings are accurate\n:\n\n\n\n\nearly high temps in a meal that leave you low after, you may need to shorten carb absorption time\n\n\nearly suspensions in a meal that leave you high after, you may need to lengthen carb absorption time\n\n\n\n\nThis is definitely an area where YDMV (your diabetes may vary), so don't expect or accept that what works for others will work for you.  Test, observe, and adjust as needed.", 
            "title": "Closed Loop"
        }, 
        {
            "location": "/operation/loop/close-loop/#close-loop", 
            "text": "When you feel like you have learned what you need from open-loop, you should be ready to switch to close-loop.  There are several ways you can help make that transition as smooth as possible.", 
            "title": "Close-Loop"
        }, 
        {
            "location": "/operation/loop/close-loop/#timing", 
            "text": "Many people choose to transition to close-loop in a step-wise fashion.  Starting close-loop on weekends is an easier starting point so that you can minimize distractions (let's face it...you'll probably be staring at the Loop a lot for those first few days). Typically, people have an easier time transitioning to close-loop for parts of their day that don't involve food...so nighttimes tend to be easier than daytimes to start.", 
            "title": "Timing"
        }, 
        {
            "location": "/operation/loop/close-loop/#maximum-basal-rate", 
            "text": "When you are first beginning to close-loop, it is important to be conservative (low) in setting your maximum basal rate.  If your settings are incorrect in other areas (basal rates, carb absorption time, carb ratio, etc), Loop may enact incorrectly aggressive high temp basals.  Gradually increase your maximum basal rate as your comfort and confidence in Loop increase.  Typically, experienced closed loop users set their max basal rate no more than 3-4 times their average basal rate.", 
            "title": "Maximum Basal Rate"
        }, 
        {
            "location": "/operation/loop/close-loop/#bg-targets", 
            "text": "If your basals, ISF, or carb ratios aren't set correctly, Loop may overshoot and leave you lower than expected (or with more IOB than you are comfortable with).  Setting your low BG target slightly higher can help prevent unexpected lows or high IOB as you adjust your settings.", 
            "title": "BG targets"
        }, 
        {
            "location": "/operation/loop/close-loop/#watch-the-iob", 
            "text": "Watch whether Loop accumulates positive or negative IOB while holding your BG steady when no food is present.  If you find that you are \"carrying\" positive or negative IOB consistently, you should review your settings to see if perhaps your basal or ISF needs adjusting.", 
            "title": "Watch the IOB"
        }, 
        {
            "location": "/operation/loop/close-loop/#meals", 
            "text": "Meals will likely be the hardest part of transitioning to close-loop.  Starting with foods that you have a high comfort level with is a great idea.  If you have favorite meals that you know well (how high BGs usually go, how much to bolus, how to pre-bolus, etc), these would be a good starting point.  Watching when the Loop high temps or suspends basals (early vs late in the meal) will really help you adjust to find your typical carb absorption times.  As a general idea,  assuming other settings are accurate :   early high temps in a meal that leave you low after, you may need to shorten carb absorption time  early suspensions in a meal that leave you high after, you may need to lengthen carb absorption time   This is definitely an area where YDMV (your diabetes may vary), so don't expect or accept that what works for others will work for you.  Test, observe, and adjust as needed.", 
            "title": "Meals"
        }, 
        {
            "location": "/operation/loop/looptips/", 
            "text": "Loop Tips\n\u2301\n\n\nThese docs are a great resource for the technical aspects of building your Loop app.  However, they don't really cover in detail a lot of the frequently asked questions about \nUSING\n Loop. \n\n\nThings such as:\n\n\n\n\nHow to enter low treatments while using Loop?\n\n\nWhat to discuss with your Endo?\n\n\nWhat data reports might be useful?\n\n\nHow to deal with failed sites?\n\n\nWhat about pizza boluses?\n\n\nWhat do I do when I shower or swim?\n\n\n\n\nAll of those usability questions and more are addressed over in the companion site called \nLooptips\n.  \n\n\nPlease head over to Looptips in order to read some really helpful tips to make your Looping easier.", 
            "title": "Loop Tips"
        }, 
        {
            "location": "/operation/loop/looptips/#loop-tips", 
            "text": "These docs are a great resource for the technical aspects of building your Loop app.  However, they don't really cover in detail a lot of the frequently asked questions about  USING  Loop.   Things such as:   How to enter low treatments while using Loop?  What to discuss with your Endo?  What data reports might be useful?  How to deal with failed sites?  What about pizza boluses?  What do I do when I shower or swim?   All of those usability questions and more are addressed over in the companion site called  Looptips .    Please head over to Looptips in order to read some really helpful tips to make your Looping easier.", 
            "title": "Loop Tips"
        }, 
        {
            "location": "/operation/algorithm/overview/", 
            "text": "Overview\n\u2301\n\n\nLoop\u2019s algorithm for adjusting insulin delivery is oriented around making a blood glucose prediction. Every five minutes, triggered by new blood glucose data, it generates a new prediction. Both \nbolus recommendations\n and \ntemporary basal rates\n are set based on this prediction.\n\n\nTerminology\n\u2301\n\n\nThis graph and legend illustrates terms commonly used in discussing Loop's algorithm,\nand shows them in the context of historical and forecasted blood glucose in style similar to the\nstatus screen of Loop.\n\n\n\n\n\n\nInsulin activity duration\n\n\nThe insulin activity duration is the duration of the insulin activity curve, and describes the point at which the delivered insulin dose no longer affects blood glucose. The insulin activity duration is 6 hours for Loop's rapid-acting and Fiasp insulin models.\n\n\n\nCorrection range\n\n\nThe correction range is the blood glucose range Loop uses to determine corrective actions (e.g., between 90 and 120 mg/dL in the figure). NOTE: Loop\u2019s correction range is a user setting and should not be confused with the target range, typically 70-180 mg/dL, used for the purpose of calculating the percent time in range.\n\n\n\nCorrection minimum\n\n\nThe lower or minimum value of the user\u2019s correction range, which is 90 mg/dL in the figure.\n\n\n\nCorrection maximum\n\n\nThe upper or maximum value of the user\u2019s correction range, which is 120 mg/dL in the figure.\n\n\n\nCorrection target\n\n\nThe correction target is the average value of the correction range. In the overview figure, this is 105 mg/dL given that the correction minimum is 90 mg/dL and the correction maximum is 120 mg/dL.\n\n\n\nPredicted blood glucose\n\n\nLoop makes a prediction of blood glucose values out for a length of time equal to your insulin action duration. The predicted blood glucose is the basis for how Loop makes its insulin delivery recommendations and actions.\n\n\n\nEventual blood glucose\n\n\nThe last value of the predicted glucose curve, in other words the very last blood glucose predicted at the end of your insulin action duration. In the figure above, this is 85 mg/dL.\n\n\n\nMinimum predicted blood glucose\n\n\nThe lowest blood glucose value at any point in time within the prediction. In the figure above, this is 77 mg/dL.\n\n\n\nDelta\n\n\nThe delta is the difference between the eventual blood glucose and the correction target. In the overview figure, the eventual blood glucose is 85 mg/dL and the correction target is 105 mg/dL, which means that the delta is  -20 mg/dL. \n\n\n\nSuspend Threshold\n\n\nThe suspend threshold is a safety feature of the Loop algorithm. If any predicted blood glucose is below this threshold, the Loop algorithm will issue a temporary basal rate of 0\n\n\n\nCGM data\n\n\nBlood glucose readings made by a continuous glucose monitor.\n\n\n\nInsulin sensitivity factor\n\n\nA configuration value that provides an estimate of how much blood glucose will drop given a unit of insulin.\n\n\n\nActive insulin\n\n\nActive insulin is the remaining amount of insulin activity from boluses and temporary basal rates relative to a user\u2019s scheduled basal rates. More specifically, it is the total amount of insulin activity due to all bolus and basal insulin delivered within the last N hours, where N is determined by the insulin activity duration. The amount of \u201cactive\u201d insulin depends upon the insulin activity curve, and also accounts for the insulin withheld via basal suspensions. As such, it is possible that the active insulin can be negative. Negative active insulin will result in an increase in predicted blood glucose. The active insulin displayed in Loop's main display does not reflect the currently enacted temporary basal rate, as that basal rate may be canceled or modified before completion over the next 30 minutes. In others words, Loop doesn't count chickens before the eggs hatch...insulin delivery must be confirmed before being added to the active insulin reporting.", 
            "title": "Overview"
        }, 
        {
            "location": "/operation/algorithm/overview/#overview", 
            "text": "Loop\u2019s algorithm for adjusting insulin delivery is oriented around making a blood glucose prediction. Every five minutes, triggered by new blood glucose data, it generates a new prediction. Both  bolus recommendations  and  temporary basal rates  are set based on this prediction.", 
            "title": "Overview"
        }, 
        {
            "location": "/operation/algorithm/overview/#terminology", 
            "text": "This graph and legend illustrates terms commonly used in discussing Loop's algorithm,\nand shows them in the context of historical and forecasted blood glucose in style similar to the\nstatus screen of Loop.    Insulin activity duration  The insulin activity duration is the duration of the insulin activity curve, and describes the point at which the delivered insulin dose no longer affects blood glucose. The insulin activity duration is 6 hours for Loop's rapid-acting and Fiasp insulin models.  Correction range  The correction range is the blood glucose range Loop uses to determine corrective actions (e.g., between 90 and 120 mg/dL in the figure). NOTE: Loop\u2019s correction range is a user setting and should not be confused with the target range, typically 70-180 mg/dL, used for the purpose of calculating the percent time in range.  Correction minimum  The lower or minimum value of the user\u2019s correction range, which is 90 mg/dL in the figure.  Correction maximum  The upper or maximum value of the user\u2019s correction range, which is 120 mg/dL in the figure.  Correction target  The correction target is the average value of the correction range. In the overview figure, this is 105 mg/dL given that the correction minimum is 90 mg/dL and the correction maximum is 120 mg/dL.  Predicted blood glucose  Loop makes a prediction of blood glucose values out for a length of time equal to your insulin action duration. The predicted blood glucose is the basis for how Loop makes its insulin delivery recommendations and actions.  Eventual blood glucose  The last value of the predicted glucose curve, in other words the very last blood glucose predicted at the end of your insulin action duration. In the figure above, this is 85 mg/dL.  Minimum predicted blood glucose  The lowest blood glucose value at any point in time within the prediction. In the figure above, this is 77 mg/dL.  Delta  The delta is the difference between the eventual blood glucose and the correction target. In the overview figure, the eventual blood glucose is 85 mg/dL and the correction target is 105 mg/dL, which means that the delta is  -20 mg/dL.   Suspend Threshold  The suspend threshold is a safety feature of the Loop algorithm. If any predicted blood glucose is below this threshold, the Loop algorithm will issue a temporary basal rate of 0  CGM data  Blood glucose readings made by a continuous glucose monitor.  Insulin sensitivity factor  A configuration value that provides an estimate of how much blood glucose will drop given a unit of insulin.  Active insulin  Active insulin is the remaining amount of insulin activity from boluses and temporary basal rates relative to a user\u2019s scheduled basal rates. More specifically, it is the total amount of insulin activity due to all bolus and basal insulin delivered within the last N hours, where N is determined by the insulin activity duration. The amount of \u201cactive\u201d insulin depends upon the insulin activity curve, and also accounts for the insulin withheld via basal suspensions. As such, it is possible that the active insulin can be negative. Negative active insulin will result in an increase in predicted blood glucose. The active insulin displayed in Loop's main display does not reflect the currently enacted temporary basal rate, as that basal rate may be canceled or modified before completion over the next 30 minutes. In others words, Loop doesn't count chickens before the eggs hatch...insulin delivery must be confirmed before being added to the active insulin reporting.", 
            "title": "Terminology"
        }, 
        {
            "location": "/operation/algorithm/bolus/", 
            "text": "Bolus Recommendations\n\u2301\n\n\nLoop will recommend bolus insulin corrections when the eventual blood glucose is greater than the correction target and the active insulin plus any active 30-minute temporary basal will not be sufficient to cover the predicted excursion above correction target. These recommendations are not proactively sent to the Loop user through any notification or banner alert; the recommendation is only viewable when the user clicks on the bolus tool. Note that Loop never issues a bolus command automatically; all boluses are initiated by the user. \n\n\nThe bolus dose calculation is identical to the dose equation given in the basal recommendations section, with the exception that:\n\n\n\n\nthe insulin contribution from the currently running temporary basal set by Loop is removed or subtracted from the recommended bolus amount, and  \n\n\nthe delta is calculated for the top of the correction range, rather than the average of the correction range.\n\n\n\n\nFor recently saved carbohydrates where the projected carbohydrate absorption will outlast the insulin activity duration (e.g., very slow-digesting meals like pizza or pasta), Loop\u2019s algorithm will inherently decrease the initial meal bolus \u2014 to prevent hypoglycemia events that often occur after these meals \u2014 by only recommending enough bolus to prevent going below the correction range. As described above, the Loop algorithm computes the recommended bolus such that predicted glucose will not dip below the correction range. This may result in future blood glucose levels predicted above correction range, but will prevent a hypoglycemia event shortly after the meal (as is sometimes occurs for people giving a \"pizza bolus\" in traditional pump therapy). Loop will then later make corrections by issuing higher temporary basals. In effect, this algorithm behavior mimics traditional pump therapy of \u201cextended\u201d or \u201cdual wave\u201d bolusing, but with the benefit of added information about actual carbohydrate absorption effects as time goes by.\n\n\nFinally, Loop checks that the result of the calculations is below the maximum single bolus the Loop user specified in their settings. If the calculated bolus is less than the maximum single bolus setting, then the recommended bolus will be displayed in Loop\u2019s bolus tool.\n\n\n\n\nBolusing safety feature\n\n\nIf the current blood glucose, or any predicted blood glucose, falls below the suspend threshold, Loop will not return a recommended bolus. When the minimum blood glucose rises above the suspend threshold, the bolus tool will provide a recommended bolus.", 
            "title": "Bolus Recommendations"
        }, 
        {
            "location": "/operation/algorithm/bolus/#bolus-recommendations", 
            "text": "Loop will recommend bolus insulin corrections when the eventual blood glucose is greater than the correction target and the active insulin plus any active 30-minute temporary basal will not be sufficient to cover the predicted excursion above correction target. These recommendations are not proactively sent to the Loop user through any notification or banner alert; the recommendation is only viewable when the user clicks on the bolus tool. Note that Loop never issues a bolus command automatically; all boluses are initiated by the user.   The bolus dose calculation is identical to the dose equation given in the basal recommendations section, with the exception that:   the insulin contribution from the currently running temporary basal set by Loop is removed or subtracted from the recommended bolus amount, and    the delta is calculated for the top of the correction range, rather than the average of the correction range.   For recently saved carbohydrates where the projected carbohydrate absorption will outlast the insulin activity duration (e.g., very slow-digesting meals like pizza or pasta), Loop\u2019s algorithm will inherently decrease the initial meal bolus \u2014 to prevent hypoglycemia events that often occur after these meals \u2014 by only recommending enough bolus to prevent going below the correction range. As described above, the Loop algorithm computes the recommended bolus such that predicted glucose will not dip below the correction range. This may result in future blood glucose levels predicted above correction range, but will prevent a hypoglycemia event shortly after the meal (as is sometimes occurs for people giving a \"pizza bolus\" in traditional pump therapy). Loop will then later make corrections by issuing higher temporary basals. In effect, this algorithm behavior mimics traditional pump therapy of \u201cextended\u201d or \u201cdual wave\u201d bolusing, but with the benefit of added information about actual carbohydrate absorption effects as time goes by.  Finally, Loop checks that the result of the calculations is below the maximum single bolus the Loop user specified in their settings. If the calculated bolus is less than the maximum single bolus setting, then the recommended bolus will be displayed in Loop\u2019s bolus tool.   Bolusing safety feature  If the current blood glucose, or any predicted blood glucose, falls below the suspend threshold, Loop will not return a recommended bolus. When the minimum blood glucose rises above the suspend threshold, the bolus tool will provide a recommended bolus.", 
            "title": "Bolus Recommendations"
        }, 
        {
            "location": "/operation/algorithm/prediction/", 
            "text": "Blood Glucose Prediction\n\u2301\n\n\nLoop uses an algorithm to maintain blood glucose in a correction range by predicting the contributions from four individual effects (insulin, carbohydrates, retrospective correction, and blood glucose momentum) at any time \nt\n to recommend temporary basal rate corrections and boluses. \n\n\n\n\nYou can see the individual contributions of these effects by tapping on the predicted blood glucose chart on Loop's status screen. Loop updates this blood glucose prediction every five minutes when a new CGM value has been received and the pump's status has been updated.\n\n\nJust a note, this whole section is fairly technical. While perhaps not the most interesting topic for many readers, if you are seeking the detailed view of the Loop algorithm this discussion is quite useful. If you want a more surface understanding, the overview and temporary basal recommendations sections alone are probably sufficient.\n\n\nOverview\n\u2301\n\n\nBefore we delve into each of the four individual effects, a general overview figure may be a helpful start. There are four effects summed together to produce Loop's final predicted blood glucose curve. Each individual effect, along with their combined effect, is illustrated in the figure below. Insulin, from boluses and temporary basals, will have a decreasing effect on the prediction. Carbohydrates will have an increasing effect on the prediction. Blood glucose momentum effect can have a positive or negative effect, depending on how blood glucose is trending in the most recent CGM values. As shown in the example below, blood glucose is trending slightly upwards at the time of the prediction. Therefore, the blood glucose momentum effect\u2019s contribution is pulling up the overall prediction from the other three effects for a short time. Retrospective correction is having a decreasing effect on the prediction, indicating that the recent rise in blood glucose was not as large as had been previously predicted by Loop in the recent past. \n\n\n\n\nThe sections below provide detailed information on each of the four contributions. \n\n\nInsulin Effect\n\u2301\n\n\nMost traditional pump users and caregivers are already familiar with the concept of an insulin activity curve, where the insulin\u2019s effect is time-dependent. Insulin takes a little while to affect blood glucose. The insulin effect typically peaks around one hour after giving insulin and then gradually decays. \n\n\n\n\nLoop provides users with two different classes of insulin models (i.e., an exponential model and the Walsh model). All of the exponential models have an insulin activity duration of 6 hours, whereas the insulin activity duration is customizable for the Walsh model. The rapid-acting and Fiasp insulin activity curves are modeled as exponential curves that match the shape of the insulin activity curves from insulin labeling, and as observed in both adults and children.\n\n\n\n\nThe amount of insulin effect remaining, or percent of remaining active insulin after an insulin bolus is delivered, is modeled mathematically in Loop with an exponential decay curve.\n\n\nInsulin Effect Remaining\n\u2301\n\n\n\n\nIf a user\u2019s insulin sensitivity factor (ISF) is 50 mg/dL per 1 unit of insulin and the user gives 2 units of insulin, then the user\u2019s blood glucose would be expected to drop 100 mg/dL within the 6 hours following the insulin delivery. This insulin effect can be visualized in several different ways: the expected active insulin, expected drop in blood glucose every 5 minutes after delivery, and the expected cumulative drop in blood glucose. The figures below use the Rapid Acting - Adult insulin model in Loop.\n\n\nActive Insulin\n\u2301\n\n\nThis figure shows that 2 units of insulin are given initially, and the corresponding active insulin (i.e., insulin on board IOB) decays according to the curve below. \n\n\n\n\nThe active insulin at any time is the product of original insulin delivered and the percent of insulin activity remaining. Knowing the expected active insulin over the next 6 hours, and the insulin sensitivity factor (50 mg/dL, in this case), Loop can calculate the expected drop in blood glucose from that dose of insulin as shown in the figure below.\n\n\n\n\nNOTE: ISF is also a function of time, which means if the user\u2019s scheduled ISF changes during the insulin activity time, it will change the expected drop in blood glucose due to the insulin effect. \n\n\nExpected Change in Blood Glucose\n\u2301\n\n\nLastly, taking the first derivative (i.e., the rate of change) of the cumulative drop in the blood glucose curve yields the expected change in blood glucose over the insulin activity duration. For each dose of insulin given, Loop calculates the expected discrete drop in blood glucose at each 5-minute period for the insulin activity duration, as shown below.\n\n\n\n\nInsulin Effect on Blood Glucose\n\u2301\n\n\nFor this example, assuming a user\u2019s blood glucose was 205 mg/dL at the time of insulin delivery, Loop would predict a drop in blood glucose due to the two units delivered at 12 pm as shown in the figure below. \n\n\n\n\nScheduled Basal Rates\n\u2301\n\n\nIn traditional basal/bolus pump therapy, basal rates are set to accommodate the user's endogenous glucose production (EGP) that causes blood glucose to rise. If a user's basal settings were exactly right in traditional pump therapy, the user would have perfectly flat blood glucose all day, all other factors being equal.\n\n\nIn reality, people with type 1 diabetes, and their caregivers, know that basal settings are never exactly right. Every day is a little different, and a myriad of factors that affect blood glucose (e.g., including stress, hormones, sleep, etc.) may affect insulin needs. Some people have different basal profiles to accommodate these variations. Some people regularly tune and adjust their basal rates, and/or do so at their endocrinology clinic visits.\n\n\nSince the Loop algorithm assumes that the user-set basal rates are correct, it calculates the effect of insulin relative to scheduled basal rates. If basal rates are not entirely correct, Loop can compensate a bit through the retrospective correction and blood glucose momentum effects, discussed later in this document.\n\n\nThe insulin delivery chart below displays a bar-graph history of the temporary basal rates enacted by Loop. The display is relative to the scheduled basal rates entered in the Loop settings. A rate displayed in this chart as +0 would indicate that no temporary basal rate was set and that the basal rate being delivered was the scheduled basal rate. Positive values indicate a temporary basal rate was set above the scheduled basal rate (i.e., more insulin delivered), and negative values indicate that a temporary basal rate was set below the scheduled basal rate (i.e., less insulin delivered).\n\n\n\n\nFor example, if the user\u2019s scheduled basal rate is 1 U/hr, and Loop gives a temporary basal rate of 3 U/hr, then it will calculate the expected drop in blood glucose due to +2 U/hr of insulin.\n\n\nSimilarly if Loop sets a temporary basal rate of 0 U/hr for 1 hour, then the insulin effect will also be relative to the current scheduled basal rate of 1 U/hr, and Loop would predict the user\u2019s blood glucose to increase by the amount of change from -1 U/hr of insulin. If the user\u2019s ISF is 50 mg/dL, then Loop would predict blood glucose to rise 50 mg/dL over the insulin activity duration (6 hours). \n\n\nHere is a real-world example where Loop is setting many temporary basal rates over the course of the day. The light orange bars are the temporary basal rates delivered and the solid orange line is the active insulin at any given time during the day.  \n\n\n\n\nTotal Insulin Effect (combining boluses and temporary basal rates)\n\u2301\n\n\nLoop will combine or stack the active insulin of all the discrete (individual) boluses and temporary basal rates over the past insulin activity duration (6 hours), to predict the active insulin for the next 6 hours. As demonstrated above, using the predicted active insulin Loop can predict the blood glucose drop over the next 6 hours. \n\n\nLastly, the combined effect of bolus and basal insulin are visually represented for the user by Loop\u2019s insulin charts:\n\n\n\n\nThe insulin effect can be expressed mathematically:\n\n\n\n\nwhere BG is the expected change in blood glucose with the units (mg/dL/5min), ISF is the insulin sensitivity factor (mg/dL/U) at time t, and IA is the insulin activity (U/5min) at time \nt\n. Insulin activity can also be thought of as a velocity or rate of change in blood glucose due to insulin. The insulin activity accounts for the EGP and any active insulin from basals and boluses.\n\n\nCarbohydrate Effect\n\u2301\n\n\nCarbohydrates will raise blood glucose, but the speed and degree to which they impact blood glucose are dependent on the type of carbohydrates. High glycemic index (GI) carbohydrates will raise blood glucose quickly over a shorter time, whereas low GI foods will raise blood glucose more slowly over a longer period. Foods like candy, juice, and fruits tend to be high GI foods, while pizza, burritos, and quesadillas are usually lower GI foods. Digestion issues like gastroparesis may also contribute to variations in carbohydrate absorption.\n\n\nBecause carbohydrate absorption can be quite variable, Loop has a model that dynamically adjusts the expected remaining time of carbohydrate absorption. To start with, Loop allows the user to input a rough guess of how long they think the food or drink will take to absorb. The user\u2019s guess is used as a middle of the road estimate, and Loop\u2019s algorithm will shorten or lengthen it based on observed blood glucose change.\n\n\nFor all carbohydrate entries, Loop assumes carbohydrates will not start absorbing for 10 minutes, so there is a 10-minute period of no absorption that is modeled prior to the absorption modeled in the next sections.\n\n\nLinear Carbohydrate Absorption\n\u2301\n\n\nLoop takes a conservative view of how fast the remaining carbohydrates will absorb.  Because it is safer to under-deliver insulin for long-duration meals, Loop starts out at a minimum rate of absorption based on extending the entered carbohydrate duration by 50%. Said another way, the minimum carbohydrate absorption rate is the total number of grams of carbohydrates over 150% of the entered duration. \n\n\nUsing this initial minimum absorption rate, the remaining carbohydrates are modeled to absorb linearly. For example, if the user enters a 72g carbohydrate meal, and selects an estimated absorption time of 4 hours, then Loop will forecast a 12g/hr absorption rate for the next 6 hours. This rate can be termed the minimum absorption rate, which can be represented mathematically as:\n\n\n\n\nwhere MAR is the minimum absorption rate (g/hr), CA is the number of carbohydrates (g) and d is the expected duration (hr) it will take the carbohydrates to absorb. \n\n\nDynamic Carbohydrate Absorption\n\u2301\n\n\nThe linear model above is modulated by an additional calculation that uses recently observed blood glucose data to estimate how fast carbohydrates have been absorbing. The expected change in blood glucose due to insulin effects alone is compared to the actual observed changes in blood glucose. This difference is termed the insulin counteraction effect (ICE):\n\n\n\n\nwhere, ICE (mg/dL/5 min) is the insulin counteraction effect, OA is the observed activity (mg/dL/5min) or observed change in blood glucose at time \nt\n, and IA is the insulin activity (mg/dL/5min). \n\n\nInsulin counteraction effects are caused by more than just carbohydrates, and can include exercise, sensitivity changes, or incorrectly configured insulin delivery settings (e.g., basal rate, ISF, etc.). However, since the effect of carbohydrates is often dominant (after insulin), Loop can still make useful ongoing adjustments to its carbohydrate model by assuming that the increase in blood glucose is mainly carbohydrate absorption in the period following recorded meal entries.  \n\n\nThe insulin counteraction effect is converted into an estimated carbohydrate absorption amount by using the current carbohydrate-to-insulin ratio and the insulin sensitivity factor at the time of the recorded meal entry.\n\n\n\n\nwhere AC is the number of carbohydrates absorbed (g/5min), ICE is the insulin counteraction effect, CIR is the carbohydrate-to-insulin ratio (g/U), and ISF is the insulin sensitivity factor (mg/dL/U) at time \nt\n. \n\n\nIf multiple meal entries are active (i.e., still absorbing), the estimated absorption is split between each carbohydrate entry in proportion to each carbohydrate entry\u2019s minimum absorption rate. For example, if 72g carbohydrates with an expected absorption time of 4 hours was consumed at 12 pm, and another 72g of carbohydrates with an expected absorption time of 2 hours was consumed at 3 pm, then the minimum absorption rate (see MAR equation above) would be 12 g/hr and 6 g/hr respectively, or 1 g/5min and 0.5 g/5min.\n\n\n\n\n\n\nExamining just the simple linear carbohydrate effect of these two meals:\n\n\n\n\nIf we further expand this example, by assuming the following at 4pm:\n\n\n\n\nthat there are still carbohydrates left to be absorbed from both meals, \n\n\nthat the estimated insulin counteraction effect (ICE) is +15 \n, and \n\n\nthe user\u2019s CIR is 10 g/U and the ISF is 50 mg/dL/U,\n\n\n\n\nthen the estimated amount of carbohydrates absorbed at 4pm would be 3g:\n\n\n\n\nThose 3g of carbohydrates would then be split amongst the meals proportional to their minimum absorption rates:\n\n\n\n\n\n\nresulting in 2g of absorption being attributed to Meal 1 and 1g attributed to Meal 2.\n\n\nMinimum Carbohydrate Absorption Rate\n\u2301\n\n\nIf the estimated carbohydrate absorption of a meal entry is less what would have been absorbed using the minimum absorption rate, then the minimum absorption rate is used instead. This is to ensure that meal entries expire in a reasonable amount of time.\n\n\nModeling Remaining Active Carbohydrates\n\u2301\n\n\nAfter the estimated absorbed carbohydrates have been subtracted from each meal entry, the remaining carbohydrates (for each entry) are then forecasted to decay or absorb using the minimum absorption rate. Loop uses this forecast to estimate the effect (active carbohydrates, or carbohydrate activity) of the remaining carbohydrates. The carbohydrate effect can be expressed mathematically using the terms described above:\n\n\n\n\nRetrospective Correction Effect\n\u2301\n\n\n\n\nThe retrospective correction effect allows the Loop algorithm to account for effects that are not modeled with the insulin and carbohydrate effects, by comparing historical predictions to the actual blood glucose.\n\n\n\n\nIn addition to the modeled effects of insulin and carbohydrates, there are many other factors that affect blood glucose (e.g., exercise, stress, hormones, etc.). Many of these effects are active for a period of time. By observing its own forecast error, Loop can estimate the magnitude of these effects and, by assuming that they will continue for some short period of time, incorporate them into the forecast to improve forecast accuracy.\n\n\nTo do this, Loop calculates a retrospective forecast with a start time of 30 minutes in the past, ending at the current time. Loop compares the retrospective forecast to the actual observed change in blood glucose, and the difference is summed into a blood glucose velocity or rate of difference:\n\n\n\n\nwhere BG\nvel\n is a velocity term (mg/dL per 5min) that represents the average blood glucose difference between the retrospective forecast (RF) and the actual blood glucose (BG) over the last 30 minutes. This term is applied to the current forecast from the insulin and carb effects with a linear decay over the next hour. For example, the first forecast point (t=5) is approximately 100% of this velocity, the forecast point one-half hour from now is adjusted by 50% of the velocity, and points from one hour or more in the future are not affected by this term.\n\n\nThe retrospective correction effect can be expressed mathematically:\n\n\n\n\nwhere BG is the predicted change in blood glucose with the units (mg/dL/5min) at time \nt\n over the time range of 5 to 60 minutes, and the other term gives the percentage of BG\nvel\n that is applied to this effect.\n\n\nThe retrospective correction effect can be illustrated with an example: if the BG\nvel\n over the past 30 minutes was -10 mg/dL per 5min, then the retrospective correction effect over the next 60 minutes would be as follows:\n\n\n\n\n\n\n\n\nMinutes relative to now (\nt=0\n)\n\n\nPercent of BG\nvel\n Applied to RC Effect\n\n\n\n\n\n\n\n\n\n\n\n\n5\n\n\n100%\n\n\n-10\n\n\n\n\n\n\n\n\n10\n\n\n91%\n\n\n-9.1\n\n\n\n\n\n\n15\n\n\n82%\n\n\n-8.2\n\n\n\n\n\n\n20\n\n\n73%\n\n\n-7.3\n\n\n\n\n\n\n25\n\n\n64%\n\n\n-6.4\n\n\n\n\n\n\n30\n\n\n55%\n\n\n-5.5\n\n\n\n\n\n\n35\n\n\n45%\n\n\n-4.5\n\n\n\n\n\n\n40\n\n\n36%\n\n\n-3.6\n\n\n\n\n\n\n45\n\n\n27%\n\n\n-2.7\n\n\n\n\n\n\n50\n\n\n18%\n\n\n-1.8\n\n\n\n\n\n\n55\n\n\n9%\n\n\n-0.9\n\n\n\n\n\n\n60\n\n\n0%\n\n\n0\n\n\n\n\n\n\n\n\n\nHere\u2019s an example below that shows the retrospective correction effect when the BG\nvel\n over the past 30 minutes was -10mg/dL/5min.   \n\n\n\n\nBlood Glucose Momentum Effect\n\u2301\n\n\n\n\nThe blood glucose momentum effect incorporates a prediction component based on the assumption that recent blood glucose trends tend to persist for a short period of time. In other words, the best predictor of the future is the recent past.\n\n\n\n\nThe blood glucose momentum portion of the algorithm gives weight or importance to recent blood glucose to improve the near-future forecast. Loop calculates the slope of the last 3 continuous CGM readings (i.e., the last 15 minutes) using linear regression. Using multiple points helps filter out noise in the CGM data while still responding fast to changing situations. That momentum slope (Mslope) is the approximate or average rate of change over the last 15 minutes, though it is normalized to 5 minutes so that the units are (mg/dL/5min). \n\n\nThe momentum slope is then blended into the next 20 minutes of predicted blood glucose from the other effects (i.e., insulin, carbohydrates, and retrospective correction effects). This, in essence, makes the next 20 minutes of blood glucose prediction more sensitive to recent blood glucose trends. The blending of the recent trend slope into the next 20 minutes is weighted so that the first prediction point (5 minutes into the future) is highly influenced by the slope, and the influence of the slope gradually decays over the 20 minute time period. The momentum effect can be expressed mathematically as:\n\n\n\n\nNOTE: The term \n is also applied to the combined insulin, carbohydrates, and retrospective correction effects to get the delta blood glucose prediction. \n\n\nThe momentum effect can be illustrated with an example: if the last 3 blood glucose readings were 100, 103, and 106 mg/dL, then the slope would be 3 mg/dL per 5 minutes (0.6 mg/dL per minute). The amount of that recent trend or slope applied to the next 20 minutes of predictions (i.e., the next 4 predictions from the other effects) is roughly 100% (3 mg/dL per 5 min) at 5 minutes, 66% (2 mg/dL per 5 min) at 10 minutes, 33% (1 mg/dL per 5 min) at 15 minutes, and 0% (0 mg/dL per 5 min) at 20 minutes.\n\n\nAlso, if the combined effect from the insulin, carbohydrates, and retrospective correction is assumed to be a constant 6 mg/dL/5min over the next 20 minutes, then the expected overall effect and the predicted blood glucose can be calculated as follows. \n\n\n\n\n\n\n\n\nMinutes relative to now (\nt=0\n)\n\n\nPercent of Slope Applied to Momentum Effect\n\n\nMomentum Effect (3mg/dL/5min)\n\n\nPercent of Other Effects Applied Overall Effect\n\n\nOther Effects (Insulin, Carbohydrate, and Retrospective Correction)\n\n\nOverall Effect (mg/dL/5min)\n\n\nPredicted BG (mg/dL)\n\n\n\n\n\n\n\n\n\n\n5\n\n\n100%\n\n\n3\n\n\n0\n\n\n6\n\n\n3\n\n\n109\n\n\n\n\n\n\n\n\n10\n\n\n66.6%\n\n\n2\n\n\n33.3%\n\n\n6\n\n\n4\n\n\n113\n\n\n\n\n\n\n15\n\n\n33.3%\n\n\n1\n\n\n66.6%\n\n\n6\n\n\n5\n\n\n118\n\n\n\n\n\n\n20\n\n\n0%\n\n\n0\n\n\n100%\n\n\n6\n\n\n6\n\n\n124\n\n\n\n\n\n\n\n\n\nThis example is illustrated in the figure below.\n\n\n\n\nIt is also worth noting that Loop will not calculate blood glucose momentum in instances where CGM data is not continuous (i.e., must have at least three continuous CGM readings to draw the best-fit straight line trend). It also will not calculate blood glucose momentum when the last three CGM readings contain any calibration points, as those may not be representative of true blood glucose momentum trends. \n\n\nPredicting Glucose\n\u2301\n\n\nAs described in the momentum effect section, the momentum effect is blended with the insulin, carbohydrate, and retrospective correction effects to predict the change in blood glucose:\n\n\n\n\nLastly, the forecast or predicted blood glucose BG at time \nt\n is the current blood glucose BG plus the sum of all blood glucose effects BG over the time interval [t5, t]:\n\n\n\n\nEach individual effect along with the combined effects are illustrated in the figure below. As shown, blood glucose is trending slightly upwards at the time of the prediction. Therefore, the blood glucose momentum effect\u2019s contribution is pulling up the overall prediction from the other three effects for a short time. Retrospective correction is having a dampening effect on the prediction, indicating that the recent rise in blood glucose was not as great as had been previously predicted in the recent past.", 
            "title": "Glucose Prediction"
        }, 
        {
            "location": "/operation/algorithm/prediction/#blood-glucose-prediction", 
            "text": "Loop uses an algorithm to maintain blood glucose in a correction range by predicting the contributions from four individual effects (insulin, carbohydrates, retrospective correction, and blood glucose momentum) at any time  t  to recommend temporary basal rate corrections and boluses.    You can see the individual contributions of these effects by tapping on the predicted blood glucose chart on Loop's status screen. Loop updates this blood glucose prediction every five minutes when a new CGM value has been received and the pump's status has been updated.  Just a note, this whole section is fairly technical. While perhaps not the most interesting topic for many readers, if you are seeking the detailed view of the Loop algorithm this discussion is quite useful. If you want a more surface understanding, the overview and temporary basal recommendations sections alone are probably sufficient.", 
            "title": "Blood Glucose Prediction"
        }, 
        {
            "location": "/operation/algorithm/prediction/#overview", 
            "text": "Before we delve into each of the four individual effects, a general overview figure may be a helpful start. There are four effects summed together to produce Loop's final predicted blood glucose curve. Each individual effect, along with their combined effect, is illustrated in the figure below. Insulin, from boluses and temporary basals, will have a decreasing effect on the prediction. Carbohydrates will have an increasing effect on the prediction. Blood glucose momentum effect can have a positive or negative effect, depending on how blood glucose is trending in the most recent CGM values. As shown in the example below, blood glucose is trending slightly upwards at the time of the prediction. Therefore, the blood glucose momentum effect\u2019s contribution is pulling up the overall prediction from the other three effects for a short time. Retrospective correction is having a decreasing effect on the prediction, indicating that the recent rise in blood glucose was not as large as had been previously predicted by Loop in the recent past.    The sections below provide detailed information on each of the four contributions.", 
            "title": "Overview"
        }, 
        {
            "location": "/operation/algorithm/prediction/#insulin-effect", 
            "text": "Most traditional pump users and caregivers are already familiar with the concept of an insulin activity curve, where the insulin\u2019s effect is time-dependent. Insulin takes a little while to affect blood glucose. The insulin effect typically peaks around one hour after giving insulin and then gradually decays.    Loop provides users with two different classes of insulin models (i.e., an exponential model and the Walsh model). All of the exponential models have an insulin activity duration of 6 hours, whereas the insulin activity duration is customizable for the Walsh model. The rapid-acting and Fiasp insulin activity curves are modeled as exponential curves that match the shape of the insulin activity curves from insulin labeling, and as observed in both adults and children.   The amount of insulin effect remaining, or percent of remaining active insulin after an insulin bolus is delivered, is modeled mathematically in Loop with an exponential decay curve.", 
            "title": "Insulin Effect"
        }, 
        {
            "location": "/operation/algorithm/prediction/#insulin-effect-remaining", 
            "text": "If a user\u2019s insulin sensitivity factor (ISF) is 50 mg/dL per 1 unit of insulin and the user gives 2 units of insulin, then the user\u2019s blood glucose would be expected to drop 100 mg/dL within the 6 hours following the insulin delivery. This insulin effect can be visualized in several different ways: the expected active insulin, expected drop in blood glucose every 5 minutes after delivery, and the expected cumulative drop in blood glucose. The figures below use the Rapid Acting - Adult insulin model in Loop.", 
            "title": "Insulin Effect Remaining"
        }, 
        {
            "location": "/operation/algorithm/prediction/#active-insulin", 
            "text": "This figure shows that 2 units of insulin are given initially, and the corresponding active insulin (i.e., insulin on board IOB) decays according to the curve below.    The active insulin at any time is the product of original insulin delivered and the percent of insulin activity remaining. Knowing the expected active insulin over the next 6 hours, and the insulin sensitivity factor (50 mg/dL, in this case), Loop can calculate the expected drop in blood glucose from that dose of insulin as shown in the figure below.   NOTE: ISF is also a function of time, which means if the user\u2019s scheduled ISF changes during the insulin activity time, it will change the expected drop in blood glucose due to the insulin effect.", 
            "title": "Active Insulin"
        }, 
        {
            "location": "/operation/algorithm/prediction/#expected-change-in-blood-glucose", 
            "text": "Lastly, taking the first derivative (i.e., the rate of change) of the cumulative drop in the blood glucose curve yields the expected change in blood glucose over the insulin activity duration. For each dose of insulin given, Loop calculates the expected discrete drop in blood glucose at each 5-minute period for the insulin activity duration, as shown below.", 
            "title": "Expected Change in Blood Glucose"
        }, 
        {
            "location": "/operation/algorithm/prediction/#insulin-effect-on-blood-glucose", 
            "text": "For this example, assuming a user\u2019s blood glucose was 205 mg/dL at the time of insulin delivery, Loop would predict a drop in blood glucose due to the two units delivered at 12 pm as shown in the figure below.", 
            "title": "Insulin Effect on Blood Glucose"
        }, 
        {
            "location": "/operation/algorithm/prediction/#scheduled-basal-rates", 
            "text": "In traditional basal/bolus pump therapy, basal rates are set to accommodate the user's endogenous glucose production (EGP) that causes blood glucose to rise. If a user's basal settings were exactly right in traditional pump therapy, the user would have perfectly flat blood glucose all day, all other factors being equal.  In reality, people with type 1 diabetes, and their caregivers, know that basal settings are never exactly right. Every day is a little different, and a myriad of factors that affect blood glucose (e.g., including stress, hormones, sleep, etc.) may affect insulin needs. Some people have different basal profiles to accommodate these variations. Some people regularly tune and adjust their basal rates, and/or do so at their endocrinology clinic visits.  Since the Loop algorithm assumes that the user-set basal rates are correct, it calculates the effect of insulin relative to scheduled basal rates. If basal rates are not entirely correct, Loop can compensate a bit through the retrospective correction and blood glucose momentum effects, discussed later in this document.  The insulin delivery chart below displays a bar-graph history of the temporary basal rates enacted by Loop. The display is relative to the scheduled basal rates entered in the Loop settings. A rate displayed in this chart as +0 would indicate that no temporary basal rate was set and that the basal rate being delivered was the scheduled basal rate. Positive values indicate a temporary basal rate was set above the scheduled basal rate (i.e., more insulin delivered), and negative values indicate that a temporary basal rate was set below the scheduled basal rate (i.e., less insulin delivered).   For example, if the user\u2019s scheduled basal rate is 1 U/hr, and Loop gives a temporary basal rate of 3 U/hr, then it will calculate the expected drop in blood glucose due to +2 U/hr of insulin.  Similarly if Loop sets a temporary basal rate of 0 U/hr for 1 hour, then the insulin effect will also be relative to the current scheduled basal rate of 1 U/hr, and Loop would predict the user\u2019s blood glucose to increase by the amount of change from -1 U/hr of insulin. If the user\u2019s ISF is 50 mg/dL, then Loop would predict blood glucose to rise 50 mg/dL over the insulin activity duration (6 hours).   Here is a real-world example where Loop is setting many temporary basal rates over the course of the day. The light orange bars are the temporary basal rates delivered and the solid orange line is the active insulin at any given time during the day.", 
            "title": "Scheduled Basal Rates"
        }, 
        {
            "location": "/operation/algorithm/prediction/#total-insulin-effect-combining-boluses-and-temporary-basal-rates", 
            "text": "Loop will combine or stack the active insulin of all the discrete (individual) boluses and temporary basal rates over the past insulin activity duration (6 hours), to predict the active insulin for the next 6 hours. As demonstrated above, using the predicted active insulin Loop can predict the blood glucose drop over the next 6 hours.   Lastly, the combined effect of bolus and basal insulin are visually represented for the user by Loop\u2019s insulin charts:   The insulin effect can be expressed mathematically:   where BG is the expected change in blood glucose with the units (mg/dL/5min), ISF is the insulin sensitivity factor (mg/dL/U) at time t, and IA is the insulin activity (U/5min) at time  t . Insulin activity can also be thought of as a velocity or rate of change in blood glucose due to insulin. The insulin activity accounts for the EGP and any active insulin from basals and boluses.", 
            "title": "Total Insulin Effect (combining boluses and temporary basal rates)"
        }, 
        {
            "location": "/operation/algorithm/prediction/#carbohydrate-effect", 
            "text": "Carbohydrates will raise blood glucose, but the speed and degree to which they impact blood glucose are dependent on the type of carbohydrates. High glycemic index (GI) carbohydrates will raise blood glucose quickly over a shorter time, whereas low GI foods will raise blood glucose more slowly over a longer period. Foods like candy, juice, and fruits tend to be high GI foods, while pizza, burritos, and quesadillas are usually lower GI foods. Digestion issues like gastroparesis may also contribute to variations in carbohydrate absorption.  Because carbohydrate absorption can be quite variable, Loop has a model that dynamically adjusts the expected remaining time of carbohydrate absorption. To start with, Loop allows the user to input a rough guess of how long they think the food or drink will take to absorb. The user\u2019s guess is used as a middle of the road estimate, and Loop\u2019s algorithm will shorten or lengthen it based on observed blood glucose change.  For all carbohydrate entries, Loop assumes carbohydrates will not start absorbing for 10 minutes, so there is a 10-minute period of no absorption that is modeled prior to the absorption modeled in the next sections.", 
            "title": "Carbohydrate Effect"
        }, 
        {
            "location": "/operation/algorithm/prediction/#linear-carbohydrate-absorption", 
            "text": "Loop takes a conservative view of how fast the remaining carbohydrates will absorb.  Because it is safer to under-deliver insulin for long-duration meals, Loop starts out at a minimum rate of absorption based on extending the entered carbohydrate duration by 50%. Said another way, the minimum carbohydrate absorption rate is the total number of grams of carbohydrates over 150% of the entered duration.   Using this initial minimum absorption rate, the remaining carbohydrates are modeled to absorb linearly. For example, if the user enters a 72g carbohydrate meal, and selects an estimated absorption time of 4 hours, then Loop will forecast a 12g/hr absorption rate for the next 6 hours. This rate can be termed the minimum absorption rate, which can be represented mathematically as:   where MAR is the minimum absorption rate (g/hr), CA is the number of carbohydrates (g) and d is the expected duration (hr) it will take the carbohydrates to absorb.", 
            "title": "Linear Carbohydrate Absorption"
        }, 
        {
            "location": "/operation/algorithm/prediction/#dynamic-carbohydrate-absorption", 
            "text": "The linear model above is modulated by an additional calculation that uses recently observed blood glucose data to estimate how fast carbohydrates have been absorbing. The expected change in blood glucose due to insulin effects alone is compared to the actual observed changes in blood glucose. This difference is termed the insulin counteraction effect (ICE):   where, ICE (mg/dL/5 min) is the insulin counteraction effect, OA is the observed activity (mg/dL/5min) or observed change in blood glucose at time  t , and IA is the insulin activity (mg/dL/5min).   Insulin counteraction effects are caused by more than just carbohydrates, and can include exercise, sensitivity changes, or incorrectly configured insulin delivery settings (e.g., basal rate, ISF, etc.). However, since the effect of carbohydrates is often dominant (after insulin), Loop can still make useful ongoing adjustments to its carbohydrate model by assuming that the increase in blood glucose is mainly carbohydrate absorption in the period following recorded meal entries.    The insulin counteraction effect is converted into an estimated carbohydrate absorption amount by using the current carbohydrate-to-insulin ratio and the insulin sensitivity factor at the time of the recorded meal entry.   where AC is the number of carbohydrates absorbed (g/5min), ICE is the insulin counteraction effect, CIR is the carbohydrate-to-insulin ratio (g/U), and ISF is the insulin sensitivity factor (mg/dL/U) at time  t .   If multiple meal entries are active (i.e., still absorbing), the estimated absorption is split between each carbohydrate entry in proportion to each carbohydrate entry\u2019s minimum absorption rate. For example, if 72g carbohydrates with an expected absorption time of 4 hours was consumed at 12 pm, and another 72g of carbohydrates with an expected absorption time of 2 hours was consumed at 3 pm, then the minimum absorption rate (see MAR equation above) would be 12 g/hr and 6 g/hr respectively, or 1 g/5min and 0.5 g/5min.    Examining just the simple linear carbohydrate effect of these two meals:   If we further expand this example, by assuming the following at 4pm:   that there are still carbohydrates left to be absorbed from both meals,   that the estimated insulin counteraction effect (ICE) is +15  , and   the user\u2019s CIR is 10 g/U and the ISF is 50 mg/dL/U,   then the estimated amount of carbohydrates absorbed at 4pm would be 3g:   Those 3g of carbohydrates would then be split amongst the meals proportional to their minimum absorption rates:    resulting in 2g of absorption being attributed to Meal 1 and 1g attributed to Meal 2.", 
            "title": "Dynamic Carbohydrate Absorption"
        }, 
        {
            "location": "/operation/algorithm/prediction/#minimum-carbohydrate-absorption-rate", 
            "text": "If the estimated carbohydrate absorption of a meal entry is less what would have been absorbed using the minimum absorption rate, then the minimum absorption rate is used instead. This is to ensure that meal entries expire in a reasonable amount of time.", 
            "title": "Minimum Carbohydrate Absorption Rate"
        }, 
        {
            "location": "/operation/algorithm/prediction/#modeling-remaining-active-carbohydrates", 
            "text": "After the estimated absorbed carbohydrates have been subtracted from each meal entry, the remaining carbohydrates (for each entry) are then forecasted to decay or absorb using the minimum absorption rate. Loop uses this forecast to estimate the effect (active carbohydrates, or carbohydrate activity) of the remaining carbohydrates. The carbohydrate effect can be expressed mathematically using the terms described above:", 
            "title": "Modeling Remaining Active Carbohydrates"
        }, 
        {
            "location": "/operation/algorithm/prediction/#retrospective-correction-effect", 
            "text": "The retrospective correction effect allows the Loop algorithm to account for effects that are not modeled with the insulin and carbohydrate effects, by comparing historical predictions to the actual blood glucose.   In addition to the modeled effects of insulin and carbohydrates, there are many other factors that affect blood glucose (e.g., exercise, stress, hormones, etc.). Many of these effects are active for a period of time. By observing its own forecast error, Loop can estimate the magnitude of these effects and, by assuming that they will continue for some short period of time, incorporate them into the forecast to improve forecast accuracy.  To do this, Loop calculates a retrospective forecast with a start time of 30 minutes in the past, ending at the current time. Loop compares the retrospective forecast to the actual observed change in blood glucose, and the difference is summed into a blood glucose velocity or rate of difference:   where BG vel  is a velocity term (mg/dL per 5min) that represents the average blood glucose difference between the retrospective forecast (RF) and the actual blood glucose (BG) over the last 30 minutes. This term is applied to the current forecast from the insulin and carb effects with a linear decay over the next hour. For example, the first forecast point (t=5) is approximately 100% of this velocity, the forecast point one-half hour from now is adjusted by 50% of the velocity, and points from one hour or more in the future are not affected by this term.  The retrospective correction effect can be expressed mathematically:   where BG is the predicted change in blood glucose with the units (mg/dL/5min) at time  t  over the time range of 5 to 60 minutes, and the other term gives the percentage of BG vel  that is applied to this effect.  The retrospective correction effect can be illustrated with an example: if the BG vel  over the past 30 minutes was -10 mg/dL per 5min, then the retrospective correction effect over the next 60 minutes would be as follows:     Minutes relative to now ( t=0 )  Percent of BG vel  Applied to RC Effect       5  100%  -10     10  91%  -9.1    15  82%  -8.2    20  73%  -7.3    25  64%  -6.4    30  55%  -5.5    35  45%  -4.5    40  36%  -3.6    45  27%  -2.7    50  18%  -1.8    55  9%  -0.9    60  0%  0     Here\u2019s an example below that shows the retrospective correction effect when the BG vel  over the past 30 minutes was -10mg/dL/5min.", 
            "title": "Retrospective Correction Effect"
        }, 
        {
            "location": "/operation/algorithm/prediction/#blood-glucose-momentum-effect", 
            "text": "The blood glucose momentum effect incorporates a prediction component based on the assumption that recent blood glucose trends tend to persist for a short period of time. In other words, the best predictor of the future is the recent past.   The blood glucose momentum portion of the algorithm gives weight or importance to recent blood glucose to improve the near-future forecast. Loop calculates the slope of the last 3 continuous CGM readings (i.e., the last 15 minutes) using linear regression. Using multiple points helps filter out noise in the CGM data while still responding fast to changing situations. That momentum slope (Mslope) is the approximate or average rate of change over the last 15 minutes, though it is normalized to 5 minutes so that the units are (mg/dL/5min).   The momentum slope is then blended into the next 20 minutes of predicted blood glucose from the other effects (i.e., insulin, carbohydrates, and retrospective correction effects). This, in essence, makes the next 20 minutes of blood glucose prediction more sensitive to recent blood glucose trends. The blending of the recent trend slope into the next 20 minutes is weighted so that the first prediction point (5 minutes into the future) is highly influenced by the slope, and the influence of the slope gradually decays over the 20 minute time period. The momentum effect can be expressed mathematically as:   NOTE: The term   is also applied to the combined insulin, carbohydrates, and retrospective correction effects to get the delta blood glucose prediction.   The momentum effect can be illustrated with an example: if the last 3 blood glucose readings were 100, 103, and 106 mg/dL, then the slope would be 3 mg/dL per 5 minutes (0.6 mg/dL per minute). The amount of that recent trend or slope applied to the next 20 minutes of predictions (i.e., the next 4 predictions from the other effects) is roughly 100% (3 mg/dL per 5 min) at 5 minutes, 66% (2 mg/dL per 5 min) at 10 minutes, 33% (1 mg/dL per 5 min) at 15 minutes, and 0% (0 mg/dL per 5 min) at 20 minutes.  Also, if the combined effect from the insulin, carbohydrates, and retrospective correction is assumed to be a constant 6 mg/dL/5min over the next 20 minutes, then the expected overall effect and the predicted blood glucose can be calculated as follows.      Minutes relative to now ( t=0 )  Percent of Slope Applied to Momentum Effect  Momentum Effect (3mg/dL/5min)  Percent of Other Effects Applied Overall Effect  Other Effects (Insulin, Carbohydrate, and Retrospective Correction)  Overall Effect (mg/dL/5min)  Predicted BG (mg/dL)      5  100%  3  0  6  3  109     10  66.6%  2  33.3%  6  4  113    15  33.3%  1  66.6%  6  5  118    20  0%  0  100%  6  6  124     This example is illustrated in the figure below.   It is also worth noting that Loop will not calculate blood glucose momentum in instances where CGM data is not continuous (i.e., must have at least three continuous CGM readings to draw the best-fit straight line trend). It also will not calculate blood glucose momentum when the last three CGM readings contain any calibration points, as those may not be representative of true blood glucose momentum trends.", 
            "title": "Blood Glucose Momentum Effect"
        }, 
        {
            "location": "/operation/algorithm/prediction/#predicting-glucose", 
            "text": "As described in the momentum effect section, the momentum effect is blended with the insulin, carbohydrate, and retrospective correction effects to predict the change in blood glucose:   Lastly, the forecast or predicted blood glucose BG at time  t  is the current blood glucose BG plus the sum of all blood glucose effects BG over the time interval [t5, t]:   Each individual effect along with the combined effects are illustrated in the figure below. As shown, blood glucose is trending slightly upwards at the time of the prediction. Therefore, the blood glucose momentum effect\u2019s contribution is pulling up the overall prediction from the other three effects for a short time. Retrospective correction is having a dampening effect on the prediction, indicating that the recent rise in blood glucose was not as great as had been previously predicted in the recent past.", 
            "title": "Predicting Glucose"
        }, 
        {
            "location": "/operation/algorithm/temp-basal/", 
            "text": "Basal Adjustments\n\u2301\n\n\nThe Loop algorithm takes one of four actions depending upon the eventual blood glucose, predicted glucose, and suspend threshold. Note that all temporary basal rate commands are issued for 30 minutes, however they may be updated (re-issued) every 5 minutes. Said another way, Loop may enact a new temporary basal rate every 5 minutes. But, if communication with the pump is lost, the last issued temporary basal rate will last for at most 30 minutes before the pump reverts to the user\u2019s scheduled basal rates. Note: If a user is operating Loop in open-loop mode, the Loop will only recommend basal dosing actions and will not automatically enact those recommendations.\n\n\nFour Possible Actions\n\u2301\n\n\nLoop implements one of four possible basal actions: \ndecrease\n, \nincrease\n, \nsuspend\n, or \nresume\n a scheduled basal rate.\n\n\nDecrease Basal Rate\n\u2301\n\n\nIf the eventual blood glucose is less than the correction range and all of the predicted glucose values are above the suspend threshold, then Loop will issue a temporary basal rate that is lower than the current scheduled basal rate to bring the eventual blood glucose up to the correction target.\n\n\n\n\nIncrease Basal Rate\n\u2301\n\n\nIf the eventual blood glucose is greater than the correction range and all of the predicted glucose values are above the suspend threshold, then Loop will issue a temporary basal rate that is higher than the current basal rate to bring the eventual blood glucose down to the correction target.\n\n\n\n\nSuspend Basal Rate\n\u2301\n\n\nIf the minimum predicted blood glucose goes below the suspend threshold, then Loop will issue a temporary basal rate of zero units per hour, regardless of the eventual blood glucose.\n\n\n\n\nResume Basal Rate\n\u2301\n\n\nThere are three situations where the Loop algorithm will resume the current scheduled basal rate.\n\n\nIf the eventual blood glucose is within the correction range, and all of the predicted glucose values are above the suspend threshold, then Loop will resume the current scheduled basal rate.\n\n\n\n\nIf the eventual blood glucose is above the correction range, and the predicted glucose values have a temporary excursion below the correction range but still above the suspend threshold, then Loop will resume the current scheduled basal rate.\n\n\n\n\nIf the Loop algorithm does not have ALL of the data it needs to make a prediction, it will let the remaining temporary basal rate run its duration (maximum of 30 minutes), and then the basal rate will default back to the current scheduled basal rate, thus returning to the same therapy pattern that they would receive using a traditional insulin pump.\n\n\nDetermining the Temporary Basal Rate\n\u2301\n\n\nTo determine the corrective temporary basal rate to implement, Loop calculates a \u201cdose\u201d in the same way doses are calculated in both open-loop and traditional insulin pump therapy. It's also the same math many people on multiple-daily injection therapy use. The benefit of Loop (and all other close-loop algorithms) is that it does this math every 5 minutes, and is far less prone to error than humans doing the math. Loop also does its math based on predicting into the future, which traditional pumps and humans, do not always have the time or inclination to do.\n\n\nThe amount of insulin needed, or dose, is calculated using the desired reduction in blood glucose and the user\u2019s ISF. For the Loop algorithm, the desired reduction in blood glucose is the delta between the eventual blood glucose and the correction target:\n\n\n\n\n\n\nA major difference between traditional pump therapy and how the Loop calculates dose is that in pump therapy the current blood glucose is used to estimate the dose, whereas in the Loop algorithm the eventual and minimum blood glucose predictions are also used in determining dosing decisions.\n\n\n\n\nLoop then converts the dose into a basal rate using the Loop\u2019s temporary basal rate duration of 30 minutes:\n\n\n\n\nwhere BR is the basal rate (U/hr), which is the amount of insulin needed over the next 30 minutes to bring the eventual blood glucose to the correction target. The basal rate, however, is the amount of basal rate needed beyond the user\u2019s scheduled basal rate. As such, the required basal rate can be determined by:\n\n\n\n\nwhere RBR is the required basal rate and SBR is the scheduled basal rate.\n\n\nFinally, Loop compares the RBR with the user-specified maximum temporary basal rate setting to determine the temporary basal to issue:\n\n\n\n\n\n\nIf RBR \u2265 maximum basal rate, then Loop will issue the maximum basal rate  \n\n\n\n\n\n\nIf RBR \n maximum temporary basal rate, then Loop will issue RBR \n\n\n\n\n\n\nAfter running the temporary basal calculation described above, Loop checks whether there is already an appropriate basal running with at least 10 minutes remaining. If so, Loop will not reissue the temporary basal. However, if the recommended temporary basal differs from the currently running temporary basal \u2014 or the current scheduled basal if no temporary is running \u2014  then Loop will replace the current basal rate with the recommended temporary basal rate. \n\n\nAs mentioned at the beginning of this section, the process of determining whether a temporary basal should be issued is repeated every 5 minutes.\n\n\nTemporary Basal Rate Calculation Example\n\u2301\n\n\nTo illustrate how the Loop calculates the temporary basal rate to issue, consider the calculation for the following scenario:\n\n\n\n\n\n\nEventual blood glucose = 200 mg/dL  \n\n\n\n\n\n\nCorrection target = 100 mg/dL  \n\n\n\n\n\n\nISF = 50 mg/dL/U  \n\n\n\n\n\n\nCurrent scheduled basal rate (SBR) is 1 U/hr  \n\n\n\n\n\n\nMaximum basal setting (set by user in Loop) = 6 U/hr  \n\n\n\n\n\n\nFirst, calculate the dose:\n\n\n\n\nThen, convert the dose into a basal rate to be issued for the next 30 minutes:\n\n\n\n\nNext, calculate the required basal rate:\n\n\n\n\nLastly, compare the required basal rate to the maximum temporary basal rate, and find that Loop will enact a temporary basal rate of 5 U/hr for 30 minutes since this temporary basal rate is below the maximum temporary basal rate of 6 U/hr, which was set by the user in Loop app settings.", 
            "title": "Temp Basal Adjustments"
        }, 
        {
            "location": "/operation/algorithm/temp-basal/#basal-adjustments", 
            "text": "The Loop algorithm takes one of four actions depending upon the eventual blood glucose, predicted glucose, and suspend threshold. Note that all temporary basal rate commands are issued for 30 minutes, however they may be updated (re-issued) every 5 minutes. Said another way, Loop may enact a new temporary basal rate every 5 minutes. But, if communication with the pump is lost, the last issued temporary basal rate will last for at most 30 minutes before the pump reverts to the user\u2019s scheduled basal rates. Note: If a user is operating Loop in open-loop mode, the Loop will only recommend basal dosing actions and will not automatically enact those recommendations.", 
            "title": "Basal Adjustments"
        }, 
        {
            "location": "/operation/algorithm/temp-basal/#four-possible-actions", 
            "text": "Loop implements one of four possible basal actions:  decrease ,  increase ,  suspend , or  resume  a scheduled basal rate.", 
            "title": "Four Possible Actions"
        }, 
        {
            "location": "/operation/algorithm/temp-basal/#decrease-basal-rate", 
            "text": "If the eventual blood glucose is less than the correction range and all of the predicted glucose values are above the suspend threshold, then Loop will issue a temporary basal rate that is lower than the current scheduled basal rate to bring the eventual blood glucose up to the correction target.", 
            "title": "Decrease Basal Rate"
        }, 
        {
            "location": "/operation/algorithm/temp-basal/#increase-basal-rate", 
            "text": "If the eventual blood glucose is greater than the correction range and all of the predicted glucose values are above the suspend threshold, then Loop will issue a temporary basal rate that is higher than the current basal rate to bring the eventual blood glucose down to the correction target.", 
            "title": "Increase Basal Rate"
        }, 
        {
            "location": "/operation/algorithm/temp-basal/#suspend-basal-rate", 
            "text": "If the minimum predicted blood glucose goes below the suspend threshold, then Loop will issue a temporary basal rate of zero units per hour, regardless of the eventual blood glucose.", 
            "title": "Suspend Basal Rate"
        }, 
        {
            "location": "/operation/algorithm/temp-basal/#resume-basal-rate", 
            "text": "There are three situations where the Loop algorithm will resume the current scheduled basal rate.  If the eventual blood glucose is within the correction range, and all of the predicted glucose values are above the suspend threshold, then Loop will resume the current scheduled basal rate.   If the eventual blood glucose is above the correction range, and the predicted glucose values have a temporary excursion below the correction range but still above the suspend threshold, then Loop will resume the current scheduled basal rate.   If the Loop algorithm does not have ALL of the data it needs to make a prediction, it will let the remaining temporary basal rate run its duration (maximum of 30 minutes), and then the basal rate will default back to the current scheduled basal rate, thus returning to the same therapy pattern that they would receive using a traditional insulin pump.", 
            "title": "Resume Basal Rate"
        }, 
        {
            "location": "/operation/algorithm/temp-basal/#determining-the-temporary-basal-rate", 
            "text": "To determine the corrective temporary basal rate to implement, Loop calculates a \u201cdose\u201d in the same way doses are calculated in both open-loop and traditional insulin pump therapy. It's also the same math many people on multiple-daily injection therapy use. The benefit of Loop (and all other close-loop algorithms) is that it does this math every 5 minutes, and is far less prone to error than humans doing the math. Loop also does its math based on predicting into the future, which traditional pumps and humans, do not always have the time or inclination to do.  The amount of insulin needed, or dose, is calculated using the desired reduction in blood glucose and the user\u2019s ISF. For the Loop algorithm, the desired reduction in blood glucose is the delta between the eventual blood glucose and the correction target:    A major difference between traditional pump therapy and how the Loop calculates dose is that in pump therapy the current blood glucose is used to estimate the dose, whereas in the Loop algorithm the eventual and minimum blood glucose predictions are also used in determining dosing decisions.   Loop then converts the dose into a basal rate using the Loop\u2019s temporary basal rate duration of 30 minutes:   where BR is the basal rate (U/hr), which is the amount of insulin needed over the next 30 minutes to bring the eventual blood glucose to the correction target. The basal rate, however, is the amount of basal rate needed beyond the user\u2019s scheduled basal rate. As such, the required basal rate can be determined by:   where RBR is the required basal rate and SBR is the scheduled basal rate.  Finally, Loop compares the RBR with the user-specified maximum temporary basal rate setting to determine the temporary basal to issue:    If RBR \u2265 maximum basal rate, then Loop will issue the maximum basal rate      If RBR   maximum temporary basal rate, then Loop will issue RBR     After running the temporary basal calculation described above, Loop checks whether there is already an appropriate basal running with at least 10 minutes remaining. If so, Loop will not reissue the temporary basal. However, if the recommended temporary basal differs from the currently running temporary basal \u2014 or the current scheduled basal if no temporary is running \u2014  then Loop will replace the current basal rate with the recommended temporary basal rate.   As mentioned at the beginning of this section, the process of determining whether a temporary basal should be issued is repeated every 5 minutes.", 
            "title": "Determining the Temporary Basal Rate"
        }, 
        {
            "location": "/operation/algorithm/temp-basal/#temporary-basal-rate-calculation-example", 
            "text": "To illustrate how the Loop calculates the temporary basal rate to issue, consider the calculation for the following scenario:    Eventual blood glucose = 200 mg/dL      Correction target = 100 mg/dL      ISF = 50 mg/dL/U      Current scheduled basal rate (SBR) is 1 U/hr      Maximum basal setting (set by user in Loop) = 6 U/hr      First, calculate the dose:   Then, convert the dose into a basal rate to be issued for the next 30 minutes:   Next, calculate the required basal rate:   Lastly, compare the required basal rate to the maximum temporary basal rate, and find that Loop will enact a temporary basal rate of 5 U/hr for 30 minutes since this temporary basal rate is below the maximum temporary basal rate of 6 U/hr, which was set by the user in Loop app settings.", 
            "title": "Temporary Basal Rate Calculation Example"
        }, 
        {
            "location": "/troubleshooting/overview/", 
            "text": "Troubleshooting\n\u2301\n\n\nAfter you have been using Loop for a while, there's a potential that you will run across a behavior or issue that you wonder if it is normal or intended.  When that happens, there are a few things that we'd recommend doing to resolve the issue.\n\n\nIssues with\n\u2301\n\n\nGather information\n\u2301\n\n\nCheck the Docs\n\u2301\n\n\nThe Loop docs are updated regularly.  If you built your Loop app awhile ago, chances are good that more information has been updated and changed since you first read them.  Please can the topics and look for a section that may be applicable.  For example, if your Nightscout isn't working, try looking at the docs there.  A good read of ALL the pages at the beginning of using Loop is encouraged.  Many FAQs from new Loop users are covered in the docs.\n\n\nScreenshots\n\u2301\n\n\nTake a screenshot of your Loop main display screen\n, or other screens (such as Tuning results of RileyLink) that may help troubleshooters better understand your issue.  A lot of times a picture is worth a thousand words.  Being able to see recent Loop basal adjustments, predicted BG curve, and carb entries really help fill in the full story of the current Loop status.  If you didn't manage to get a screenshot when the issue was happening, you can also go to Nightscout and scroll back over the previous 48 hours to obtain much of the same information.  Try to capture a Nightscout screen from the time period in question.\n\n\nIssue Report\n\u2301\n\n\nUnder the Loop app settings, there is a selection called \nIssue Report\n.  Within the Issue Report are important information about your Loop's actions and status that can be very useful for troubleshooters...particularly with unexplained behaviors.  The upper right corner of the Issue Report includes a button so that you can email the Issue Report to yourself (or others).  If you are seeing something unusual in your Loop, capture an Issue Report while it is happening and save it.  A troubleshooter may want to see that information.\n\n\nCheck Resources\n\u2301\n\n\nGitHub Issues\n\u2301\n\n\nCheck the current list of \nGitHub Loop Issues\n for known issues.  Many times other users have noticed the same issue previously and opened an Issue so that more information can be added to help develop a solution.  If you see your same issue has already been reported, please add to the open issue instead of creating a new one.\n\n\n\n\n\n\n\n\n\nZulipchat and Facebook\n\u2301\n\n\nSearch in \nZulipchat\n or \nFacebook\n.  Quite possibly someone else has already posted about the same issue and perhaps a resolution has already been provided.  \n\n\nAsk for Help\n\u2301\n\n\nIf you can't find any information in the Loop docs, GitHub Issues, Zulipchat, or Facebook...PLEASE post and ask for help.  GitHub Issues list is an EXCELLENT place to post issues of unexpected Loop behavior (that you believe are errant or need improvement).  However, if you are just seeking clarifications on Loop, but don't necessarily expect that there's a problem with the underlying code, then Facebook and Gitter would be a good place.  For example, Zulipchat and Facebook are great for asking about bolus strategies or exercise target use...those aren't really code issues.\n\n\nWhen you post, provide a description along with any screenshots of the issue you are having.  You don't necessarily have to tag any particular person, the community is fairly active in replying to messages.", 
            "title": "Overview"
        }, 
        {
            "location": "/troubleshooting/overview/#troubleshooting", 
            "text": "After you have been using Loop for a while, there's a potential that you will run across a behavior or issue that you wonder if it is normal or intended.  When that happens, there are a few things that we'd recommend doing to resolve the issue.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/troubleshooting/overview/#issues-with", 
            "text": "", 
            "title": "Issues with"
        }, 
        {
            "location": "/troubleshooting/overview/#gather-information", 
            "text": "", 
            "title": "Gather information"
        }, 
        {
            "location": "/troubleshooting/overview/#check-the-docs", 
            "text": "The Loop docs are updated regularly.  If you built your Loop app awhile ago, chances are good that more information has been updated and changed since you first read them.  Please can the topics and look for a section that may be applicable.  For example, if your Nightscout isn't working, try looking at the docs there.  A good read of ALL the pages at the beginning of using Loop is encouraged.  Many FAQs from new Loop users are covered in the docs.", 
            "title": "Check the Docs"
        }, 
        {
            "location": "/troubleshooting/overview/#screenshots", 
            "text": "Take a screenshot of your Loop main display screen , or other screens (such as Tuning results of RileyLink) that may help troubleshooters better understand your issue.  A lot of times a picture is worth a thousand words.  Being able to see recent Loop basal adjustments, predicted BG curve, and carb entries really help fill in the full story of the current Loop status.  If you didn't manage to get a screenshot when the issue was happening, you can also go to Nightscout and scroll back over the previous 48 hours to obtain much of the same information.  Try to capture a Nightscout screen from the time period in question.", 
            "title": "Screenshots"
        }, 
        {
            "location": "/troubleshooting/overview/#issue-report", 
            "text": "Under the Loop app settings, there is a selection called  Issue Report .  Within the Issue Report are important information about your Loop's actions and status that can be very useful for troubleshooters...particularly with unexplained behaviors.  The upper right corner of the Issue Report includes a button so that you can email the Issue Report to yourself (or others).  If you are seeing something unusual in your Loop, capture an Issue Report while it is happening and save it.  A troubleshooter may want to see that information.", 
            "title": "Issue Report"
        }, 
        {
            "location": "/troubleshooting/overview/#check-resources", 
            "text": "", 
            "title": "Check Resources"
        }, 
        {
            "location": "/troubleshooting/overview/#github-issues", 
            "text": "Check the current list of  GitHub Loop Issues  for known issues.  Many times other users have noticed the same issue previously and opened an Issue so that more information can be added to help develop a solution.  If you see your same issue has already been reported, please add to the open issue instead of creating a new one.", 
            "title": "GitHub Issues"
        }, 
        {
            "location": "/troubleshooting/overview/#zulipchat-and-facebook", 
            "text": "Search in  Zulipchat  or  Facebook .  Quite possibly someone else has already posted about the same issue and perhaps a resolution has already been provided.", 
            "title": "Zulipchat and Facebook"
        }, 
        {
            "location": "/troubleshooting/overview/#ask-for-help", 
            "text": "If you can't find any information in the Loop docs, GitHub Issues, Zulipchat, or Facebook...PLEASE post and ask for help.  GitHub Issues list is an EXCELLENT place to post issues of unexpected Loop behavior (that you believe are errant or need improvement).  However, if you are just seeking clarifications on Loop, but don't necessarily expect that there's a problem with the underlying code, then Facebook and Gitter would be a good place.  For example, Zulipchat and Facebook are great for asking about bolus strategies or exercise target use...those aren't really code issues.  When you post, provide a description along with any screenshots of the issue you are having.  You don't necessarily have to tag any particular person, the community is fairly active in replying to messages.", 
            "title": "Ask for Help"
        }, 
        {
            "location": "/troubleshooting/loop-crashing/", 
            "text": "Loop Crashes Upon Opening\n\u2301\n\n\nIf your Loop app crashes immediately upon opening, you have a problem that needs to be fixed. What do I mean by \"crashes\"? That your Loop app immediately turns to a white screen and shuts itself down, landing you back at your iPhone's main screen. No amount of tapping will let you keep your Loop app open.\n\n\nThere are only two potential causes of this: \n\n\n\n\nApp expired, or\n\n\nA correction range was saved backward.\n\n\n\n\nExpired app\n\u2301\n\n\nYour Loop app has an expiration date. The expiration date will depend on the type of developer account that signed the app.\n\n\n\n\nIf you build with a free account, your app will expire after 7 days.\n\n\nIf you build with a paid account, your app will expire after 12 months.\n\n\n\n\nMany people \naccidentally\n build with their old free account even after buying a paid account. How can you tell which you're signing with? The free signing team has the \n(Personal Team)\n listed after your name in the signing team.\n\n\nIf your app expires, you simply need to plug your phone back into the computer and press the play button on your project again. This will rebuild. If you want to change to a paid signing team before rebuilding, please make sure to double-check which signing team is selected before building again. \n\n\nIncorrectly entered correction range\n\u2301\n\n\n\n\nImportant To Know\n\n\nCorrection ranges in Loop are to be entered in minimum-maximum...in other words, LOW-HIGH. If you enter the range backward, your app will crash as soon as Loop tries to use that backward target range...that could be immediately or at a time in the future, depending on when the backwards entry is in your schedule.\n\n\n\n\nAn example of a properly entered correction range: 100-120 mg/dL\n\n\nAn example of an improperly entered correction range: 120-100 mg/dL\n\n\n\n\n\n\nIf your app crashes because of an improperly set correction range, you will need to entirely delete your Loop app in order to fix the problem. Unfortunately, simply rebuilding Loop app will not be sufficient because settings are saved from just rebuilding on top of an existing Loop app. And, these bad settings need to be deleted, not saved. So...if you are podding...you'll also need to start a new pod after rebuilding. Make sure to move your existing pod far away from the room when starting a new pod as that old pod may interfere with pairing a new one, since the old one was not properly deactivated before removing.\n\n\nBecause of the obvious hassle to fix an incorrect entry, please be careful when entering in the correction range. Follow the greyed out text suggestions in the Loop user interface that say \nmin-max\n.", 
            "title": "Loop crashes"
        }, 
        {
            "location": "/troubleshooting/loop-crashing/#loop-crashes-upon-opening", 
            "text": "If your Loop app crashes immediately upon opening, you have a problem that needs to be fixed. What do I mean by \"crashes\"? That your Loop app immediately turns to a white screen and shuts itself down, landing you back at your iPhone's main screen. No amount of tapping will let you keep your Loop app open.  There are only two potential causes of this:    App expired, or  A correction range was saved backward.", 
            "title": "Loop Crashes Upon Opening"
        }, 
        {
            "location": "/troubleshooting/loop-crashing/#expired-app", 
            "text": "Your Loop app has an expiration date. The expiration date will depend on the type of developer account that signed the app.   If you build with a free account, your app will expire after 7 days.  If you build with a paid account, your app will expire after 12 months.   Many people  accidentally  build with their old free account even after buying a paid account. How can you tell which you're signing with? The free signing team has the  (Personal Team)  listed after your name in the signing team.  If your app expires, you simply need to plug your phone back into the computer and press the play button on your project again. This will rebuild. If you want to change to a paid signing team before rebuilding, please make sure to double-check which signing team is selected before building again.", 
            "title": "Expired app"
        }, 
        {
            "location": "/troubleshooting/loop-crashing/#incorrectly-entered-correction-range", 
            "text": "Important To Know  Correction ranges in Loop are to be entered in minimum-maximum...in other words, LOW-HIGH. If you enter the range backward, your app will crash as soon as Loop tries to use that backward target range...that could be immediately or at a time in the future, depending on when the backwards entry is in your schedule.   An example of a properly entered correction range: 100-120 mg/dL  An example of an improperly entered correction range: 120-100 mg/dL    If your app crashes because of an improperly set correction range, you will need to entirely delete your Loop app in order to fix the problem. Unfortunately, simply rebuilding Loop app will not be sufficient because settings are saved from just rebuilding on top of an existing Loop app. And, these bad settings need to be deleted, not saved. So...if you are podding...you'll also need to start a new pod after rebuilding. Make sure to move your existing pod far away from the room when starting a new pod as that old pod may interfere with pairing a new one, since the old one was not properly deactivated before removing.  Because of the obvious hassle to fix an incorrect entry, please be careful when entering in the correction range. Follow the greyed out text suggestions in the Loop user interface that say  min-max .", 
            "title": "Incorrectly entered correction range"
        }, 
        {
            "location": "/troubleshooting/green-loop/", 
            "text": "Turning Your Grey Loop to Green\n\u2301\n\n\nWhen you are initially starting the Loop app, the Loop will be colored grey.  Wait about 15-20 minutes for the Loop to turn from grey to green.  There's a bit of time for Loop to pull all of those first pieces of data together, especially reading your pump history for the first time.  If the Loop remains grey after 15-20 min, there are several possible causes for this.  If you find yourself with a grey loop that just won't turn green, check these most frequently missed items on new setups:\n\n\nPump\n\u2301\n\n\n\n\nMax basal rate in Loop app is no greater than the max basal rate in pump settings\n\n\nTemp basal type in the pump's basal menu is set to \"Insulin Rate (U/hr)\" and not \"Percent of Basal\"\n\n\n\n\nCGM\n\u2301\n\n\n\n\nDexcom app installed on the looping iPhone and open\n\n\nCGM getting current values without interruption\n\n\nLoop app has a CGM value displayed in the top bar of the main display\n\n\n\n\nRileyLink\n\u2301\n\n\n\n\nRL is charged (it does not ship completely charged)\n\n\nRL battery needs to be securely plugged in, \ncheck those connections\n\n\n\n\nLoop Settings\n\u2301\n\n\n\n\nCorrect CGM system has been selected in Loop settings\n\n\nInsulin curve has been selected\n\n\nSuspend Threshold has been entered\n\n\n\n\n\n\nThe most common delay in getting a grey loop to turn green is probably the lack of CGM data.  If you have waited 15-20 minutes and no CGM data has appeared, try closing both the Loop and Dexcom apps (double-tap home button and up-swipe to close apps).  Toggle your BT on iPhone off/on.  Reopen the Loop app, then reopen Dexcom app.\n\n\n\n\nIf all else fails after verifying the settings listed in the sections above, you can:\n\n\n\n\nClose and restart the Loop and Dexcom apps\n\n\nToggle BT off/on\n\n\nTurn RileyLink off/on\n\n\nReplace pump battery", 
            "title": "Grey Loop"
        }, 
        {
            "location": "/troubleshooting/green-loop/#turning-your-grey-loop-to-green", 
            "text": "When you are initially starting the Loop app, the Loop will be colored grey.  Wait about 15-20 minutes for the Loop to turn from grey to green.  There's a bit of time for Loop to pull all of those first pieces of data together, especially reading your pump history for the first time.  If the Loop remains grey after 15-20 min, there are several possible causes for this.  If you find yourself with a grey loop that just won't turn green, check these most frequently missed items on new setups:", 
            "title": "Turning Your Grey Loop to Green"
        }, 
        {
            "location": "/troubleshooting/green-loop/#pump", 
            "text": "Max basal rate in Loop app is no greater than the max basal rate in pump settings  Temp basal type in the pump's basal menu is set to \"Insulin Rate (U/hr)\" and not \"Percent of Basal\"", 
            "title": "Pump"
        }, 
        {
            "location": "/troubleshooting/green-loop/#cgm", 
            "text": "Dexcom app installed on the looping iPhone and open  CGM getting current values without interruption  Loop app has a CGM value displayed in the top bar of the main display", 
            "title": "CGM"
        }, 
        {
            "location": "/troubleshooting/green-loop/#rileylink", 
            "text": "RL is charged (it does not ship completely charged)  RL battery needs to be securely plugged in,  check those connections", 
            "title": "RileyLink"
        }, 
        {
            "location": "/troubleshooting/green-loop/#loop-settings", 
            "text": "Correct CGM system has been selected in Loop settings  Insulin curve has been selected  Suspend Threshold has been entered    The most common delay in getting a grey loop to turn green is probably the lack of CGM data.  If you have waited 15-20 minutes and no CGM data has appeared, try closing both the Loop and Dexcom apps (double-tap home button and up-swipe to close apps).  Toggle your BT on iPhone off/on.  Reopen the Loop app, then reopen Dexcom app.   If all else fails after verifying the settings listed in the sections above, you can:   Close and restart the Loop and Dexcom apps  Toggle BT off/on  Turn RileyLink off/on  Replace pump battery", 
            "title": "Loop Settings"
        }, 
        {
            "location": "/troubleshooting/yellow-red-loop/", 
            "text": "Yellow and Red Loops\n\u2301\n\n\nA properly operating Loop will remain green for 5 minutes.  To remain green, there are several things that Loop must do:\n\n\n\n\nLoop obtains a BG value from your CGM source, and\n\n\nLoop reads your pump history to know about insulin deliveries and recent events, and\n\n\nLoop completes a run of its calculations based on those inputs\n\n\nLoop recommends a temp basal and sends that instruction to the pump\n\n\nPump enacts the recommended temp basal\n\n\nLoop confirms the pump enacted the recommended temp basal\n\n\n\n\nIf something goes wrong in those steps and more than 5 minutes goes by, the Loop will turn yellow until it can solve the problem.  If more than 15 minutes goes by and the problem still exists, Loop will turn red.\n\n\n\n\nTo see the latest Loop error messages, touch the yellow or red Loop Status circle on the main screen. If an error message is available, it will appear in a dialog window. Use that error message to help guide your next troubleshooting steps, as laid out in the discussion below.\n\n\n\n\nA healthy green loop will have timestamps less than 5 minutes old below the green loop, BG reading, and reservoir level.  This indicates that the Loop was run less than 5 minutes ago, fresh BGs have been coming in, temp basals have been enacted by the pump, and the pump is communicating with Loop.  The screenshot below is a very happy Loop.\n\n\n\n\n\n\n\n\n\n\n\nFor Loopers who have already been successfully getting green loops, but suddenly find themselves with problems...we need to figure out which area your loop is failing in.\n\n\n\n\nThe displayed error message should help you narrow in on the cause of the red loop:\n\n    \nIs this a CGM issue?\n\n    \nIs this a pump issue?\n\n    \nIs this a RileyLink/BT issue?\n\n\n\n\nCGM issues\n\u2301\n\n\nOld BG data (CGM issue)\n\u2301\n\n\n\n\nIf your Loop turns yellow or red, easiest to start by checking the timestamps on the BG.  \nIf the BG reading is more than 5 minutes older than your iPhone time, your Loop will not be green.\n  The screenshot below is a good example of missing BG data preventing the Loop from staying green.  The pump is still communicating (reservoir reading is only 2 minutes old)...BGs appear to be the problem.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBG troubleshooting steps:\n\n\n\n\nVerify you have enabled the correct \nCGM Selection\n in Loop settings; it is easy to accidentally change the selection while scrolling through the settings page\n\n\nFor G5, verify your \ntransmitter ID\n is set correctly in Loop settings\n\n\nFor G4, verify the Dexcom Share app is running on your phone\n\n\nFetch Recent Glucose\n command in RL only works for Medtronic CGM users, by the way...so don't expect that command to solve Dexcom CGM issues\n\n\nIf your local CGM is working fine on the Dexcom app, but Loop isn't reading it:\n\n\nmake sure you enter your Dexcom Share account info in the Loop settings. Loop will automatically switch to pulling from the Dexcom servers if the local reading isn't working.\n\n\ntry turning Loop and Dexcom apps off, toggle BT off/on, restart Loop app, and then restart Dexcom app\n\n\n\n\n\n\n\n\n\n\nPump Issues\n\u2301\n\n\nOld Pump data (Pump Issue)\n\u2301\n\n\n\n\nIf your pump reading is older than 5 minutes, but BGs are fine, then you will need to troubleshoot the pump communications.  The screenshot below is a good example of missing pump data preventing the Loop from staying green.  The CGM is still communicating (BG reading is only 2 minutes old)...but pump reservoir reading is older than 5 min.\n\n\n\n\n\n\n\n\n\n\n\nPump troubleshooting steps:\n\n\n\n\nYour pump battery may be low.  Replace the battery...even if the percentage doesn't look low, this is a good starting point\n\n\nIf you have an x23 or x54 model pump, make sure your mysentry is paired\n\n\nHave the pump and RL gotten too far away from each other?  Try bringing them closer\n\n\nTry retuning the RL.  Just a note though, the Loop has code embedded to automatically retune RL when the pump comms are failing for 20 minutes.  So, manual retuning is more about speeding things along rather than being a necessary intervention to fixing pump comms.\n\n\nTry a \nSend Button Press\n to \"wake up the pump\" a bit.\n\n\nTry a \nFetch Pump History\n.  Same as retuning though, the Loop has code embedded to automatically pull pump history.  Manual fetching of pump history is more about speeding things along than being a necessary step to fixing pump comms.\n\n\nIf you have a backup pump, try switching to that pump and see whether the issue persists.\n\n\n\n\n\n\nAbout Pump Communications\n\n\nPump communications errors can and will happen. Just be patient, and they almost always correct themselves.  Yellow loops happen sometimes, and aren't usually worth troubleshooting.  Red loops are more infrequent and usually a good time to start investigating possible source.  \nSome environments will be noisy for rf comms (such as concerts, amusement parks, tech venues, conferences with OpenAPS users in attendance, etc.), and your loop may not stay green as often as usual.  Just be patient. When you leave that environment, looping will go back to normal.\n  Wireless microphones, baby monitors, and other similar types of devices can interfere with pump communications if there are lots of competing radio devices in a tight environment.  If you find you have areas of your house that consistently have poor pump communications, look for potential sources of interference from wireless devices.\n\n\nAnother common area for failed pump communications are at night if you tend to sleep on your pump, or otherwise \"body block\" the RL's ability to communicate with the pump.  Try to place your pump and RL such that your body will not block the signal to/from RL.  Standing the RL on its base with antenna pointing up, on a nearby nightstand should be sufficient proximity/orientation for overnight looping.\n\n\nThese examples below are pump error messages.  Notice they all mention the pump specifically.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIncorrect Pump Time (Pump Issue)\n\u2301\n\n\n\n\nAnd here's an interesting problem.  BGs are current, but notice that the pump time is 2 hours into the future of the current iPhone time.  In this case, the Loop user had manually set their pump time during travels and caused the pump time to be out of sync with Loop.  Remember, \ndo not change your pump time manually...always use the RL to set the pump time\n.  This red loop was resolved as soon as the Looper used RL to set the pump time.\n\n\n\n\n\n\n\n\n\n\n\n\n\nFailure to Enact Temp Basals (Pump Issue)\n\u2301\n\n\n\n\nIf you see messages about \"Could not verify TempBasal on attempt  2\", that is likely one of just a few issues.  The message indicates that Loop has BGs and pump data, has sent a recommended basal to the pump, but the pump does not appear to be enacting those basals.\n\n\n\n\n\n\n\n\n\n\n\n\n\nYour pump cannot be suspended.  Resume insulin deliveries\n\n\nMax basal rate in Loop app cannot be greater than max basal rate in pump settings\n\n\nTemp basal type must be set to unit/hour, not percent, in pump\n\n\n\n\n\n\nBluetooth/RL issues\n\u2301\n\n\nBluetooth failures (RL or iPhone issue)\n\u2301\n\n\n\n\nSometimes the RilleyLink and iPhone fail to communicate via BT.  You need to determine if this is due to RL's problems, iPhone's problems, or just BT communications problem.  There can be messages when BT fails, such as the message below, or \"RileyLink Timeout\" error messages.\n\n\n\n\n\n\n\n\n\n\n\n\n\nHas your RL been fully charged? Try charging your RL for an hour or two, make sure the red light comes on while charging\n\n\nIs your lipo battery old and perhaps dying earlier in the day?  Order a new battery, replace lipo battery\n\n\nCheck your lipo battery wires?  If your wires are dislodged from the lipo itself, RL will not likely work for long\n\n\nYour RL battery needs to be securely plugged in, check those connections.\n\n\nCheck if your RL is on and says \"connected\" in the \nstatus screen for bluetooth\n. If it says \"connecting\" or \"disconnected\", you have a BT problem with RL and iPhone.\n\n\nMake sure your iPhone's BT is turned on, and BT is not being affected by other BT systems (such as car audio)\n\n\nCheck if any of the RL command buttons work...such as \nSend Button Press\n.\n\n\nIf you've checked all of the above, toggle your RL power switch and turn your iPhone BT off/on.  Try rebooting your phone.  If those steps don't work and the RL is properly charging otherwise, likely you have a bad RileyLink and will need to replace it.\n\n\n\n\n\n\nLoop Settings Issues\n\u2301\n\n\nFailure to set Insulin Curve Model (Loop settings)\n\u2301\n\n\n\n\nIf you see messages about \"Missing data: Glucose effects\", you likely have \nforgotten to set your Insulin Curve Model\n.  The message indicates that Loop is missing a component of its algorithm inputs to calculate glucose effects on predicted BGs.   Return to your Loop app settings and pick an Insulin Curve.", 
            "title": "Yellow/Red Loop"
        }, 
        {
            "location": "/troubleshooting/yellow-red-loop/#yellow-and-red-loops", 
            "text": "A properly operating Loop will remain green for 5 minutes.  To remain green, there are several things that Loop must do:   Loop obtains a BG value from your CGM source, and  Loop reads your pump history to know about insulin deliveries and recent events, and  Loop completes a run of its calculations based on those inputs  Loop recommends a temp basal and sends that instruction to the pump  Pump enacts the recommended temp basal  Loop confirms the pump enacted the recommended temp basal   If something goes wrong in those steps and more than 5 minutes goes by, the Loop will turn yellow until it can solve the problem.  If more than 15 minutes goes by and the problem still exists, Loop will turn red.   To see the latest Loop error messages, touch the yellow or red Loop Status circle on the main screen. If an error message is available, it will appear in a dialog window. Use that error message to help guide your next troubleshooting steps, as laid out in the discussion below.   A healthy green loop will have timestamps less than 5 minutes old below the green loop, BG reading, and reservoir level.  This indicates that the Loop was run less than 5 minutes ago, fresh BGs have been coming in, temp basals have been enacted by the pump, and the pump is communicating with Loop.  The screenshot below is a very happy Loop.      For Loopers who have already been successfully getting green loops, but suddenly find themselves with problems...we need to figure out which area your loop is failing in.   The displayed error message should help you narrow in on the cause of the red loop: \n     Is this a CGM issue? \n     Is this a pump issue? \n     Is this a RileyLink/BT issue?", 
            "title": "Yellow and Red Loops"
        }, 
        {
            "location": "/troubleshooting/yellow-red-loop/#cgm-issues", 
            "text": "", 
            "title": "CGM issues"
        }, 
        {
            "location": "/troubleshooting/yellow-red-loop/#old-bg-data-cgm-issue", 
            "text": "If your Loop turns yellow or red, easiest to start by checking the timestamps on the BG.   If the BG reading is more than 5 minutes older than your iPhone time, your Loop will not be green.   The screenshot below is a good example of missing BG data preventing the Loop from staying green.  The pump is still communicating (reservoir reading is only 2 minutes old)...BGs appear to be the problem.         BG troubleshooting steps:   Verify you have enabled the correct  CGM Selection  in Loop settings; it is easy to accidentally change the selection while scrolling through the settings page  For G5, verify your  transmitter ID  is set correctly in Loop settings  For G4, verify the Dexcom Share app is running on your phone  Fetch Recent Glucose  command in RL only works for Medtronic CGM users, by the way...so don't expect that command to solve Dexcom CGM issues  If your local CGM is working fine on the Dexcom app, but Loop isn't reading it:  make sure you enter your Dexcom Share account info in the Loop settings. Loop will automatically switch to pulling from the Dexcom servers if the local reading isn't working.  try turning Loop and Dexcom apps off, toggle BT off/on, restart Loop app, and then restart Dexcom app", 
            "title": "Old BG data (CGM issue)"
        }, 
        {
            "location": "/troubleshooting/yellow-red-loop/#pump-issues", 
            "text": "", 
            "title": "Pump Issues"
        }, 
        {
            "location": "/troubleshooting/yellow-red-loop/#old-pump-data-pump-issue", 
            "text": "If your pump reading is older than 5 minutes, but BGs are fine, then you will need to troubleshoot the pump communications.  The screenshot below is a good example of missing pump data preventing the Loop from staying green.  The CGM is still communicating (BG reading is only 2 minutes old)...but pump reservoir reading is older than 5 min.      Pump troubleshooting steps:   Your pump battery may be low.  Replace the battery...even if the percentage doesn't look low, this is a good starting point  If you have an x23 or x54 model pump, make sure your mysentry is paired  Have the pump and RL gotten too far away from each other?  Try bringing them closer  Try retuning the RL.  Just a note though, the Loop has code embedded to automatically retune RL when the pump comms are failing for 20 minutes.  So, manual retuning is more about speeding things along rather than being a necessary intervention to fixing pump comms.  Try a  Send Button Press  to \"wake up the pump\" a bit.  Try a  Fetch Pump History .  Same as retuning though, the Loop has code embedded to automatically pull pump history.  Manual fetching of pump history is more about speeding things along than being a necessary step to fixing pump comms.  If you have a backup pump, try switching to that pump and see whether the issue persists.    About Pump Communications  Pump communications errors can and will happen. Just be patient, and they almost always correct themselves.  Yellow loops happen sometimes, and aren't usually worth troubleshooting.  Red loops are more infrequent and usually a good time to start investigating possible source.   Some environments will be noisy for rf comms (such as concerts, amusement parks, tech venues, conferences with OpenAPS users in attendance, etc.), and your loop may not stay green as often as usual.  Just be patient. When you leave that environment, looping will go back to normal.   Wireless microphones, baby monitors, and other similar types of devices can interfere with pump communications if there are lots of competing radio devices in a tight environment.  If you find you have areas of your house that consistently have poor pump communications, look for potential sources of interference from wireless devices.  Another common area for failed pump communications are at night if you tend to sleep on your pump, or otherwise \"body block\" the RL's ability to communicate with the pump.  Try to place your pump and RL such that your body will not block the signal to/from RL.  Standing the RL on its base with antenna pointing up, on a nearby nightstand should be sufficient proximity/orientation for overnight looping.  These examples below are pump error messages.  Notice they all mention the pump specifically.", 
            "title": "Old Pump data (Pump Issue)"
        }, 
        {
            "location": "/troubleshooting/yellow-red-loop/#incorrect-pump-time-pump-issue", 
            "text": "And here's an interesting problem.  BGs are current, but notice that the pump time is 2 hours into the future of the current iPhone time.  In this case, the Loop user had manually set their pump time during travels and caused the pump time to be out of sync with Loop.  Remember,  do not change your pump time manually...always use the RL to set the pump time .  This red loop was resolved as soon as the Looper used RL to set the pump time.", 
            "title": "Incorrect Pump Time (Pump Issue)"
        }, 
        {
            "location": "/troubleshooting/yellow-red-loop/#failure-to-enact-temp-basals-pump-issue", 
            "text": "If you see messages about \"Could not verify TempBasal on attempt  2\", that is likely one of just a few issues.  The message indicates that Loop has BGs and pump data, has sent a recommended basal to the pump, but the pump does not appear to be enacting those basals.       Your pump cannot be suspended.  Resume insulin deliveries  Max basal rate in Loop app cannot be greater than max basal rate in pump settings  Temp basal type must be set to unit/hour, not percent, in pump", 
            "title": "Failure to Enact Temp Basals (Pump Issue)"
        }, 
        {
            "location": "/troubleshooting/yellow-red-loop/#bluetoothrl-issues", 
            "text": "", 
            "title": "Bluetooth/RL issues"
        }, 
        {
            "location": "/troubleshooting/yellow-red-loop/#bluetooth-failures-rl-or-iphone-issue", 
            "text": "Sometimes the RilleyLink and iPhone fail to communicate via BT.  You need to determine if this is due to RL's problems, iPhone's problems, or just BT communications problem.  There can be messages when BT fails, such as the message below, or \"RileyLink Timeout\" error messages.       Has your RL been fully charged? Try charging your RL for an hour or two, make sure the red light comes on while charging  Is your lipo battery old and perhaps dying earlier in the day?  Order a new battery, replace lipo battery  Check your lipo battery wires?  If your wires are dislodged from the lipo itself, RL will not likely work for long  Your RL battery needs to be securely plugged in, check those connections.  Check if your RL is on and says \"connected\" in the  status screen for bluetooth . If it says \"connecting\" or \"disconnected\", you have a BT problem with RL and iPhone.  Make sure your iPhone's BT is turned on, and BT is not being affected by other BT systems (such as car audio)  Check if any of the RL command buttons work...such as  Send Button Press .  If you've checked all of the above, toggle your RL power switch and turn your iPhone BT off/on.  Try rebooting your phone.  If those steps don't work and the RL is properly charging otherwise, likely you have a bad RileyLink and will need to replace it.", 
            "title": "Bluetooth failures (RL or iPhone issue)"
        }, 
        {
            "location": "/troubleshooting/yellow-red-loop/#loop-settings-issues", 
            "text": "", 
            "title": "Loop Settings Issues"
        }, 
        {
            "location": "/troubleshooting/yellow-red-loop/#failure-to-set-insulin-curve-model-loop-settings", 
            "text": "If you see messages about \"Missing data: Glucose effects\", you likely have  forgotten to set your Insulin Curve Model .  The message indicates that Loop is missing a component of its algorithm inputs to calculate glucose effects on predicted BGs.   Return to your Loop app settings and pick an Insulin Curve.", 
            "title": "Failure to set Insulin Curve Model (Loop settings)"
        }, 
        {
            "location": "/troubleshooting/pod-pairing/", 
            "text": "Pod Pairing Failure\n\u2301\n\n\nAt the end of a pod life, you will deactivate your pod and then start the procedure for starting a new pod. You'll fill the new pod and it will start sending out periodic beeps while looking to establish a new pairing with your Loop. If during the pod pairing, you encounter troubles in Loop, here are some steps to take:\n\n\nCheck RileyLink\n\u2301\n\n\nFirst, let's make sure everything is ok as far as the RileyLink goes:\n\n\n\n\nRileyLink is charged and nearby, and\n\n\nRileyLink has a green LED light lit (indicating a Bluetooth connection with your iPhone), and\n\n\nTry toggling the RileyLink off/on at its physical switch if the green light is not on.\n\n\n\n\nDeactivate and Pair Fresh\n\u2301\n\n\nAssuming the RileyLink is ok, the most common cause of a pod failure is that Loop kind of incorrectly \"halfway\" pairs. Imagine if you will that the pod is calling out \"I'm here...over here. My name is Cassandra.\" And the Loop says \"Oh...I hear you! Hi Cassie! Let's get together!!\" Except the pod is actually Cassandra, not Cassie. So the pod will not pair. And worse...when you try to get another pod, Jane, who replaces Cassandra...that won't work either. Now there's Cassandra and Jane both screaming out for someone to pair with and your Loop app is still looking for Cassie. Two pods down and no closer to a pairing. (Obviously, I'm simplifying the description for ease of explanation.)\n\n\nSo...here's how to fix that issue. We need to get the Loop to stop looking for Cassie without insulting Cassandra. What we are going to do is leave Cassandra and Jane (and any other pods you've tried as well) out of the room, far away.\n\n\n\n\n\n\nTake your RileyLink and iPhone and walk far away from all the beeping pods (Cassandras and Janes) looking to pair. How far away? Far enough away that there's no chance the beeping pods will hear the Loop app. We do not want the beeping pods to connect to the RileyLink or hear the commands we are about to do. (If you want, you could put the pods in a faraday bag or your microwave to shield them similar to what you might already do for Dexcom restarts.)\n\n\n\n\n\n\nWhile you are out-of-range from the beeping pods, click on the \ncancel\n button in the upper right corner of the pairing screen you've been stuck on.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOn the next screen, click on the button to \nDeactivate Pod\n. This will make the Loop app forget about the \"Cassie\" it has been trying to use to pair with, leaving Loop free to make a fresh pairing.\n\n\n\n\n\n\nAfter you finish that deactivation, now come back into range of ONE of your beeping pods....just one of them. Pull that pod close to RileyLink and do the usual steps for pairing in Loop again. This should now give the pod and Loop a chance to get their pairing done properly.", 
            "title": "Pod Pairing Failures"
        }, 
        {
            "location": "/troubleshooting/pod-pairing/#pod-pairing-failure", 
            "text": "At the end of a pod life, you will deactivate your pod and then start the procedure for starting a new pod. You'll fill the new pod and it will start sending out periodic beeps while looking to establish a new pairing with your Loop. If during the pod pairing, you encounter troubles in Loop, here are some steps to take:", 
            "title": "Pod Pairing Failure"
        }, 
        {
            "location": "/troubleshooting/pod-pairing/#check-rileylink", 
            "text": "First, let's make sure everything is ok as far as the RileyLink goes:   RileyLink is charged and nearby, and  RileyLink has a green LED light lit (indicating a Bluetooth connection with your iPhone), and  Try toggling the RileyLink off/on at its physical switch if the green light is not on.", 
            "title": "Check RileyLink"
        }, 
        {
            "location": "/troubleshooting/pod-pairing/#deactivate-and-pair-fresh", 
            "text": "Assuming the RileyLink is ok, the most common cause of a pod failure is that Loop kind of incorrectly \"halfway\" pairs. Imagine if you will that the pod is calling out \"I'm here...over here. My name is Cassandra.\" And the Loop says \"Oh...I hear you! Hi Cassie! Let's get together!!\" Except the pod is actually Cassandra, not Cassie. So the pod will not pair. And worse...when you try to get another pod, Jane, who replaces Cassandra...that won't work either. Now there's Cassandra and Jane both screaming out for someone to pair with and your Loop app is still looking for Cassie. Two pods down and no closer to a pairing. (Obviously, I'm simplifying the description for ease of explanation.)  So...here's how to fix that issue. We need to get the Loop to stop looking for Cassie without insulting Cassandra. What we are going to do is leave Cassandra and Jane (and any other pods you've tried as well) out of the room, far away.    Take your RileyLink and iPhone and walk far away from all the beeping pods (Cassandras and Janes) looking to pair. How far away? Far enough away that there's no chance the beeping pods will hear the Loop app. We do not want the beeping pods to connect to the RileyLink or hear the commands we are about to do. (If you want, you could put the pods in a faraday bag or your microwave to shield them similar to what you might already do for Dexcom restarts.)    While you are out-of-range from the beeping pods, click on the  cancel  button in the upper right corner of the pairing screen you've been stuck on.         On the next screen, click on the button to  Deactivate Pod . This will make the Loop app forget about the \"Cassie\" it has been trying to use to pair with, leaving Loop free to make a fresh pairing.    After you finish that deactivation, now come back into range of ONE of your beeping pods....just one of them. Pull that pod close to RileyLink and do the usual steps for pairing in Loop again. This should now give the pod and Loop a chance to get their pairing done properly.", 
            "title": "Deactivate and Pair Fresh"
        }, 
        {
            "location": "/troubleshooting/uncertain-bolus/", 
            "text": "Pod \"Uncertain Bolus\"\n\u2301\n\n\nAt some point in Loop use, you may run into the situation where you try to bolus and get a message back in Loop that the bolus was \"uncertain\". \n\n\nWhy does this happen?\n\u2301\n\n\nAn \"uncertain bolus\" is when the bolus command was sent by Loop, but Loop never heard back from the pod with a comfirmation message that the command was received. Therefore, Loop is uncertain about the status of that command.\n\n\nWhat does Loop do when this happens?\n\u2301\n\n\nInitially, Loop assumes the worst (conservative path) and starts tracking things as if the bolus has been delivered. If Loop gets a status response from the pod to a different command while the pod is still bolusing, Loop will use the delivery glags that indicate \"bolusing\" or \"not bolusing\" to become certain about the delivery status. If no status response is received that changes the uncertainty, then the dose is considered delivered and is finalized.\n\n\nWhat should you do when this happens?\n\u2301\n\n\nThere isn't much you can do in this situation presently. You can \"enable bolus beeps\" or listen for the clicking of a bolus while it is happening. That is one good method to get a secondary confirmation by audio sleuthing.\n\n\nIf you are sure that the bolus failed, you can delete the bolus record from Health app and Pod's event history.\n\n\nWhat is Loop dev doing?\n\u2301\n\n\nThere are some various methods that could help more quickly resolve the uncertainty, but none of them are 100% perfect. There will be some changes coming to dev branch to help with these \"uncertain boluses\", but they won't be visible in the user interface...they will be under-the-hood of Loop code.", 
            "title": "Pod Uncertain Boluses"
        }, 
        {
            "location": "/troubleshooting/uncertain-bolus/#pod-uncertain-bolus", 
            "text": "At some point in Loop use, you may run into the situation where you try to bolus and get a message back in Loop that the bolus was \"uncertain\".", 
            "title": "Pod \"Uncertain Bolus\""
        }, 
        {
            "location": "/troubleshooting/uncertain-bolus/#why-does-this-happen", 
            "text": "An \"uncertain bolus\" is when the bolus command was sent by Loop, but Loop never heard back from the pod with a comfirmation message that the command was received. Therefore, Loop is uncertain about the status of that command.", 
            "title": "Why does this happen?"
        }, 
        {
            "location": "/troubleshooting/uncertain-bolus/#what-does-loop-do-when-this-happens", 
            "text": "Initially, Loop assumes the worst (conservative path) and starts tracking things as if the bolus has been delivered. If Loop gets a status response from the pod to a different command while the pod is still bolusing, Loop will use the delivery glags that indicate \"bolusing\" or \"not bolusing\" to become certain about the delivery status. If no status response is received that changes the uncertainty, then the dose is considered delivered and is finalized.", 
            "title": "What does Loop do when this happens?"
        }, 
        {
            "location": "/troubleshooting/uncertain-bolus/#what-should-you-do-when-this-happens", 
            "text": "There isn't much you can do in this situation presently. You can \"enable bolus beeps\" or listen for the clicking of a bolus while it is happening. That is one good method to get a secondary confirmation by audio sleuthing.  If you are sure that the bolus failed, you can delete the bolus record from Health app and Pod's event history.", 
            "title": "What should you do when this happens?"
        }, 
        {
            "location": "/troubleshooting/uncertain-bolus/#what-is-loop-dev-doing", 
            "text": "There are some various methods that could help more quickly resolve the uncertainty, but none of them are 100% perfect. There will be some changes coming to dev branch to help with these \"uncertain boluses\", but they won't be visible in the user interface...they will be under-the-hood of Loop code.", 
            "title": "What is Loop dev doing?"
        }, 
        {
            "location": "/troubleshooting/priming/", 
            "text": "Priming and Site Changes\n\u2301\n\n\nLoop uses event history and reservoir levels to determine how much insulin has actually been delivered through the pump, and correspondingly the Insulin On Board (IOB).  \n\n\nSite Changes\n\u2301\n\n\n\n\nPriming Events and IOB\n\n\nLoop version 1.3.2 and newer will automatically detect prime events and the primed insulin will not be counted to IOB.  \nYou will need to have your Preferred Data Source set to Event History for the automatic detection of primes to work (does not apply to Omnipod, Minimed Only.)\n  Reservoir Volumes will not detect prime events.\n\n\n\n\nIf you are using a version of Loop older than v1.3.2 (or using Preferred Data Source of Reservoir Volume), you will need to be aware of the following regarding prime events at site changes:\n\n\n\n\n\n\nIf you change sites and increase reservoir volume (i.e., start a new reservoir), don't worry. So long as you are putting in a reservoir that has more insulin than the old one, IOB will be accurate in Loop.  When Loop sees a rewind and an increase in reservoir volume, it will not count any tubing primes as IOB.\n\n\n\n\n\n\nIf you change sites but \ndo NOT increase reservoir volume\n (i.e., you keep existing reservoir going), you will need to go into Loop's reservoir history and delete 30 minutes of continuous reservoir history including the prime event.  By deleting 30 minutes of reservoir history, Loop will use Event History to determine insulin deliveries and IOB. If you cannot get the prime to clear from the IOB, operate in Open Loop mode until the insulin action duration time has passed.  Deleting history is done by:\n\n\n(1)  clicking on the Insulin Delivery Chart  \n\n\n(2)  selecting the Reservoir history screen  \n\n\n(3)  swiping to delete individual reservoir readings  \n\n\n(4)  delete at least 30 minutes of reservoir readings, including the readings that involved priming events\n\n\n\n\n\n\nPrime Menu\n\u2301\n\n\n\n\nWarning\n\n\nWhen you prime tubing on a Medtronic pump, make sure to complete the priming menu commands.\n\n\n\n\nIn other words, finish all the prompts so that you get back to the (nearly blank) normal Medtronic pump screen.  If you don't finish the priming menu, the pump will not begin basal insulin delivery, nor does it alarm.  It is equivalent to the pump being suspended...but you won't be able to see any indication of that in Nightscout as a remote monitoring parent other than Loop's temp basals not being set.  Loop will not detect the prime screen issue and will keep sending temp basal messages...but the pump won't enact them.  On Loop, you could notice it by the active IOB continually going down and then eventually negative IOB, as the basal is not delivered and the reservoir level remains constant.  However, the temp basal graph will still show the bars from the temp basal commands loop has been sending.\n\n\nSo, remember to finish those prime menu screens through to the end.", 
            "title": "MDT Priming and Sites"
        }, 
        {
            "location": "/troubleshooting/priming/#priming-and-site-changes", 
            "text": "Loop uses event history and reservoir levels to determine how much insulin has actually been delivered through the pump, and correspondingly the Insulin On Board (IOB).", 
            "title": "Priming and Site Changes"
        }, 
        {
            "location": "/troubleshooting/priming/#site-changes", 
            "text": "Priming Events and IOB  Loop version 1.3.2 and newer will automatically detect prime events and the primed insulin will not be counted to IOB.   You will need to have your Preferred Data Source set to Event History for the automatic detection of primes to work (does not apply to Omnipod, Minimed Only.)   Reservoir Volumes will not detect prime events.   If you are using a version of Loop older than v1.3.2 (or using Preferred Data Source of Reservoir Volume), you will need to be aware of the following regarding prime events at site changes:    If you change sites and increase reservoir volume (i.e., start a new reservoir), don't worry. So long as you are putting in a reservoir that has more insulin than the old one, IOB will be accurate in Loop.  When Loop sees a rewind and an increase in reservoir volume, it will not count any tubing primes as IOB.    If you change sites but  do NOT increase reservoir volume  (i.e., you keep existing reservoir going), you will need to go into Loop's reservoir history and delete 30 minutes of continuous reservoir history including the prime event.  By deleting 30 minutes of reservoir history, Loop will use Event History to determine insulin deliveries and IOB. If you cannot get the prime to clear from the IOB, operate in Open Loop mode until the insulin action duration time has passed.  Deleting history is done by:  (1)  clicking on the Insulin Delivery Chart    (2)  selecting the Reservoir history screen    (3)  swiping to delete individual reservoir readings    (4)  delete at least 30 minutes of reservoir readings, including the readings that involved priming events", 
            "title": "Site Changes"
        }, 
        {
            "location": "/troubleshooting/priming/#prime-menu", 
            "text": "Warning  When you prime tubing on a Medtronic pump, make sure to complete the priming menu commands.   In other words, finish all the prompts so that you get back to the (nearly blank) normal Medtronic pump screen.  If you don't finish the priming menu, the pump will not begin basal insulin delivery, nor does it alarm.  It is equivalent to the pump being suspended...but you won't be able to see any indication of that in Nightscout as a remote monitoring parent other than Loop's temp basals not being set.  Loop will not detect the prime screen issue and will keep sending temp basal messages...but the pump won't enact them.  On Loop, you could notice it by the active IOB continually going down and then eventually negative IOB, as the basal is not delivered and the reservoir level remains constant.  However, the temp basal graph will still show the bars from the temp basal commands loop has been sending.  So, remember to finish those prime menu screens through to the end.", 
            "title": "Prime Menu"
        }, 
        {
            "location": "/troubleshooting/time-change/", 
            "text": "Travel and Timezones\n\u2301\n\n\nAirports\n\u2301\n\n\nRileyLinks have no problem going through any of the airport security systems. You can carry it with you in the airplane cabin and it can go through the xray scanner that your carry-on bags go through.\n\n\nAirplane Mode\n\u2301\n\n\nNothing wrong with airplane mode, but many people forget about it at the time they travel. So, you can do this simple preparation step now:\n\n\nTurn airplane mode on. Then make sure your Bluetooth is still slid \u201con\u201d. If Bluetooth isn\u2019t on, then go slide it on again. Now go ahead and turn airplane mode off again.\n\n\nWhy did we just do that? Because airplane mode by default turns Bluetooth off for the first time you ever use it.\n\n\nBut, if you remember to turn Bluetooth back on while in airplane mode, two things happen (1) Dexcom and Loop will work while in airplane and (2) airplane mode will \u201cremember\u201d the next time that you like Bluetooth left on in airplane mode and will not turn it off the next time you slide airplane mode on. So now you\u2019ve just prevented yourself from forgetting to turn Bluetooth on the next time you fly and are in a hurry to meet your lovely seat mate and stow your luggage. You can safely follow cabin instructions and put phone in airplane mode without losing loop or dexcom.\n\n\nChanging Timezones and Daylight Savings Time\n\u2301\n\n\nLoop is built to operate fully across time zone and daylight savings time changes. When traveling, there is no urgency to update the pump's time to match the wall-clocks in your geography. Configuration schedules\u2014basal rates, target ranges, carb ratios, and insulin sensitivities\u2014will all remain in the pump's time zone. The app's graphs and status will always display in the time zone of the iPhone, and Loop will understand the difference in offset between the two, highlighting it when attempting to change configuration schedules.\n\n\nWhen you're ready to update the pump's time, simply \nuse the Loop's \"Change Time\" command\n \n. This will also shift your configuration schedules to the current time zone.\n\n\n\n\nMedtronic Users Only\n\n\nAlways use RileyLink to change pump time instead of the Medtronic Pump's screen.  If you fail to set the pump time by using the RileyLink, Loop will not function properly.\n\n\n\n\n\n\n\n\n\n\niPhone\n\u2301\n\n\nLoop will assume your iPhone's time (UTC, not timezone) is always correct. This theoretically may not be the case if a nearby cell tower is improperly configured (though there are likely resilience mechanisms in iOS to handle this). Automatic time setting can always be disabled in Settings.\n\n\nMinimed Pump and CGM\n\u2301\n\n\nThe Minimed pump doesn't expose a universal clock, instead it exposes the components of a date (YMDHIS). It has no concept of political time zones, and just continues to increment its components on schedule. Therefore, Loop assumes that the pump's date, until changed, remains at a fixed offset from UTC.\n\n\nThat offset is stored by Loop the first time the pump ID is changed, and every time the pump's time is changed using the \"Change Time Zone\" command.\n\n\nDexcom CGM\n\u2301\n\n\nNo particular input is needed on your part for Loop to work with Dexcom CGM data. All times are UTC.  However for Dexcom receiver users, at time changes you may want to manually change your receiver's time setting just so the time visually appears correct when you are viewing the screen.", 
            "title": "Time Changes"
        }, 
        {
            "location": "/troubleshooting/time-change/#travel-and-timezones", 
            "text": "", 
            "title": "Travel and Timezones"
        }, 
        {
            "location": "/troubleshooting/time-change/#airports", 
            "text": "RileyLinks have no problem going through any of the airport security systems. You can carry it with you in the airplane cabin and it can go through the xray scanner that your carry-on bags go through.", 
            "title": "Airports"
        }, 
        {
            "location": "/troubleshooting/time-change/#airplane-mode", 
            "text": "Nothing wrong with airplane mode, but many people forget about it at the time they travel. So, you can do this simple preparation step now:  Turn airplane mode on. Then make sure your Bluetooth is still slid \u201con\u201d. If Bluetooth isn\u2019t on, then go slide it on again. Now go ahead and turn airplane mode off again.  Why did we just do that? Because airplane mode by default turns Bluetooth off for the first time you ever use it.  But, if you remember to turn Bluetooth back on while in airplane mode, two things happen (1) Dexcom and Loop will work while in airplane and (2) airplane mode will \u201cremember\u201d the next time that you like Bluetooth left on in airplane mode and will not turn it off the next time you slide airplane mode on. So now you\u2019ve just prevented yourself from forgetting to turn Bluetooth on the next time you fly and are in a hurry to meet your lovely seat mate and stow your luggage. You can safely follow cabin instructions and put phone in airplane mode without losing loop or dexcom.", 
            "title": "Airplane Mode"
        }, 
        {
            "location": "/troubleshooting/time-change/#changing-timezones-and-daylight-savings-time", 
            "text": "Loop is built to operate fully across time zone and daylight savings time changes. When traveling, there is no urgency to update the pump's time to match the wall-clocks in your geography. Configuration schedules\u2014basal rates, target ranges, carb ratios, and insulin sensitivities\u2014will all remain in the pump's time zone. The app's graphs and status will always display in the time zone of the iPhone, and Loop will understand the difference in offset between the two, highlighting it when attempting to change configuration schedules.  When you're ready to update the pump's time, simply  use the Loop's \"Change Time\" command   . This will also shift your configuration schedules to the current time zone.   Medtronic Users Only  Always use RileyLink to change pump time instead of the Medtronic Pump's screen.  If you fail to set the pump time by using the RileyLink, Loop will not function properly.", 
            "title": "Changing Timezones and Daylight Savings Time"
        }, 
        {
            "location": "/troubleshooting/time-change/#iphone", 
            "text": "Loop will assume your iPhone's time (UTC, not timezone) is always correct. This theoretically may not be the case if a nearby cell tower is improperly configured (though there are likely resilience mechanisms in iOS to handle this). Automatic time setting can always be disabled in Settings.", 
            "title": "iPhone"
        }, 
        {
            "location": "/troubleshooting/time-change/#minimed-pump-and-cgm", 
            "text": "The Minimed pump doesn't expose a universal clock, instead it exposes the components of a date (YMDHIS). It has no concept of political time zones, and just continues to increment its components on schedule. Therefore, Loop assumes that the pump's date, until changed, remains at a fixed offset from UTC.  That offset is stored by Loop the first time the pump ID is changed, and every time the pump's time is changed using the \"Change Time Zone\" command.", 
            "title": "Minimed Pump and CGM"
        }, 
        {
            "location": "/troubleshooting/time-change/#dexcom-cgm", 
            "text": "No particular input is needed on your part for Loop to work with Dexcom CGM data. All times are UTC.  However for Dexcom receiver users, at time changes you may want to manually change your receiver's time setting just so the time visually appears correct when you are viewing the screen.", 
            "title": "Dexcom CGM"
        }, 
        {
            "location": "/troubleshooting/pump-errors/", 
            "text": "Medtronic Pump Errors\n\u2301\n\n\nThe Medtronic pumps are used and typically not under warranty.  Use this section at your own risk.  However, that said, some of the most common pump errors are repairable, or not actually a real problem.\n\n\nA21 error\n\u2301\n\n\nThis error message is common when a pump has been stored for a period of time without a battery.  Most pumps will show an A21 error when you first purchase them on the used market.  Not a big deal.  Press the down arrow (also has the symbol of a light bulb on it) and the pump screen message will scroll down to let you know how to clear that error message (press ESC then ACT).  If the message is coming up on a pump that hasn't been in storage, pull the battery out and replace with a fresh, new battery.  Chances are your battery or battery cap are old.  Look for signs of dirt or rust in the battery cap, give it a little cleaning.\n\n\n\n\nDisplay Tip\n\n\nWhen the pump screen has a little black/white bar on the right side, that is a scroll bar.  Use the arrow keys on the right of the pump screen to scroll and see the additional information.\n\n\n\n\n\n\n\n\n\n\n\nBatt Out Limit\n\u2301\n\n\nThis error message \"battery out of limits\" has to do with the internal pump battery, not the AAA battery you replace.  The internal battery cannot be replaced, and unfortunately also has a finite lifespan.  The error message is more of an annoyance than a true problem.  You can try to change the AAA battery faster.  But, the worst-case scenario is that you'll have to re-enter the time and date when you get this message more often.  (Don't forget to use RileyLink to set the time after you get this message.)\n\n\n\n\n\n\n\n\n\nButton Error\n\u2301\n\n\nThe Button Error message usually happens from water, moisture, or dust getting under the pump's button pad and causing button(s) to fail.  The fix luckily is quite straight-forward and takes less than 30 minutes.  Check out the fix \nhere for a YouTube video\n or \nhere for photo gallery\n\n\n\n\n\n\n\n\n\nThe solution involves simply prying up the button pad's sticker face to expose the layers beneath.\n\n\n\n\n\n\n\n\n\nYou can see some evidence of crud/rust on the underside of this button pad which caused the button error.\n\n\n\n\n\n\n\n\n\nAfter you finish your fix, another excellent idea is to make sure you add a length of clear packing tape across the front face of the pump to prevent errant water or dirt from having easy access to the button pad seams.\n\n\n\n\n\n\n\n\n\nCrack/Missing Piece Repairs\n\u2301\n\n\nAnother common issue on these Medtronic pumps are cracks and/or missing bits of plastic near the battery cap or reservoir sleeve. You can repair these fairly easily. For filling small cracks, \nTestor's plastic cement\n or \nGorilla epoxy\n are good choices.\n\n\nFor more extensive repairs to replace missing chunks of plastic, \nGorilla epoxy\n or \nSugru\n are excellent choices.  \n\n\nYou can use \nteflon thread tape\n on the battery cap to make sure the epoxy or Sugru don't stick to the battery cap, but still recreate the threads.  The first photos are of a Sugru repair and second set of photos are Gorilla epoxy repair.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMotor error\n\u2301\n\n\nOften a motor error is the result of a poorly seated reservoir or tubing cap.  If you get a motor error, the first thing you should do is detach from your infusion site.  Remove and reseat the reservoir, prime again, and see if the motor error resolves.  If it does not, try replacing the tubing cap on the reservoir (new tubing).  If that does not resolve the motor error, also replace the entire reservoir.\n\n\n\n\n\n\n\n\n\nA33 error\n\u2301\n\n\n\n\nSafety warning\n\n\nIf you get this error, DO NOT push on the bulged out end cap.  Always detach your tubing from your infusion set before addressing this error message.  If you push on the end cap in an attempt to get it back flush, you may delivery a dangerous amount of insulin mistakenly.\n\n\n\n\nThis error is a bit more involved to repair.  The problem is that there is a loose drive support cap.  Most of the time this error message will appear during a priming event as the end cap of the drive will slip, releasing the ability of the reservoir plunger to get pressure to delivery insulin.  The pump senses the lack of pressure and delivers the A33 error.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe solution is to UNHOOK from your site.  See warning above.  Remove reservoir and put your finger inside the reservoir sleeve.  Push on the drive so that the end cap is pushed out the most possible.  This will give your the most surface area possible to place the super glue GEL that you will use.  (don't use regular super glue...it must be gel.)  Remove the sticker that covers the end cap, save it for later because you can reattach when repair is completed.\n\n\nWith the end cap pushed out, take some glue gel with the toothpick and apply it on the outside of the popped out cap . Be generous cause you can do this only once . Once you are done take a napkin and press hard the cap toward the pump so it can go back inside and keep it pressed for a few seconds. Then remove all the small parts of the napkin that has glued to the pump. Leave the pump to dry for about 10-15 minutes.\n\n\n\n\n\n\n\n\n\nNow to test whether the pumps was glued well. You have already waited about 10-15 minutes so put your finger back in and press hard the plunger.  If you glued it well, the end cap will not move.  If the cap goes out again, you have to glue one more time. If all looks well, put some glue back on top of the pump cap and reattach the sticker that was removed to start.\n\n\nA32 and E22 error loop\n\u2301\n\n\nFrom what we know, this set of error codes seems like a pump killer.  A call to Medtronic support gave this less than hopeful information:\n\n\nA32 - failure of flash memory\nE22 - software re-installation is necessary\n\n\nWe don't have any reports of a good fix for these error codes.  When seen, usually the E22 error comes up and as soon as it is cleared, the A32 error comes up.  And the loop continues with a pump restart.", 
            "title": "MDT Pump Errors"
        }, 
        {
            "location": "/troubleshooting/pump-errors/#medtronic-pump-errors", 
            "text": "The Medtronic pumps are used and typically not under warranty.  Use this section at your own risk.  However, that said, some of the most common pump errors are repairable, or not actually a real problem.", 
            "title": "Medtronic Pump Errors"
        }, 
        {
            "location": "/troubleshooting/pump-errors/#a21-error", 
            "text": "This error message is common when a pump has been stored for a period of time without a battery.  Most pumps will show an A21 error when you first purchase them on the used market.  Not a big deal.  Press the down arrow (also has the symbol of a light bulb on it) and the pump screen message will scroll down to let you know how to clear that error message (press ESC then ACT).  If the message is coming up on a pump that hasn't been in storage, pull the battery out and replace with a fresh, new battery.  Chances are your battery or battery cap are old.  Look for signs of dirt or rust in the battery cap, give it a little cleaning.   Display Tip  When the pump screen has a little black/white bar on the right side, that is a scroll bar.  Use the arrow keys on the right of the pump screen to scroll and see the additional information.", 
            "title": "A21 error"
        }, 
        {
            "location": "/troubleshooting/pump-errors/#batt-out-limit", 
            "text": "This error message \"battery out of limits\" has to do with the internal pump battery, not the AAA battery you replace.  The internal battery cannot be replaced, and unfortunately also has a finite lifespan.  The error message is more of an annoyance than a true problem.  You can try to change the AAA battery faster.  But, the worst-case scenario is that you'll have to re-enter the time and date when you get this message more often.  (Don't forget to use RileyLink to set the time after you get this message.)", 
            "title": "Batt Out Limit"
        }, 
        {
            "location": "/troubleshooting/pump-errors/#button-error", 
            "text": "The Button Error message usually happens from water, moisture, or dust getting under the pump's button pad and causing button(s) to fail.  The fix luckily is quite straight-forward and takes less than 30 minutes.  Check out the fix  here for a YouTube video  or  here for photo gallery     The solution involves simply prying up the button pad's sticker face to expose the layers beneath.     You can see some evidence of crud/rust on the underside of this button pad which caused the button error.     After you finish your fix, another excellent idea is to make sure you add a length of clear packing tape across the front face of the pump to prevent errant water or dirt from having easy access to the button pad seams.", 
            "title": "Button Error"
        }, 
        {
            "location": "/troubleshooting/pump-errors/#crackmissing-piece-repairs", 
            "text": "Another common issue on these Medtronic pumps are cracks and/or missing bits of plastic near the battery cap or reservoir sleeve. You can repair these fairly easily. For filling small cracks,  Testor's plastic cement  or  Gorilla epoxy  are good choices.  For more extensive repairs to replace missing chunks of plastic,  Gorilla epoxy  or  Sugru  are excellent choices.    You can use  teflon thread tape  on the battery cap to make sure the epoxy or Sugru don't stick to the battery cap, but still recreate the threads.  The first photos are of a Sugru repair and second set of photos are Gorilla epoxy repair.", 
            "title": "Crack/Missing Piece Repairs"
        }, 
        {
            "location": "/troubleshooting/pump-errors/#motor-error", 
            "text": "Often a motor error is the result of a poorly seated reservoir or tubing cap.  If you get a motor error, the first thing you should do is detach from your infusion site.  Remove and reseat the reservoir, prime again, and see if the motor error resolves.  If it does not, try replacing the tubing cap on the reservoir (new tubing).  If that does not resolve the motor error, also replace the entire reservoir.", 
            "title": "Motor error"
        }, 
        {
            "location": "/troubleshooting/pump-errors/#a33-error", 
            "text": "Safety warning  If you get this error, DO NOT push on the bulged out end cap.  Always detach your tubing from your infusion set before addressing this error message.  If you push on the end cap in an attempt to get it back flush, you may delivery a dangerous amount of insulin mistakenly.   This error is a bit more involved to repair.  The problem is that there is a loose drive support cap.  Most of the time this error message will appear during a priming event as the end cap of the drive will slip, releasing the ability of the reservoir plunger to get pressure to delivery insulin.  The pump senses the lack of pressure and delivers the A33 error.        The solution is to UNHOOK from your site.  See warning above.  Remove reservoir and put your finger inside the reservoir sleeve.  Push on the drive so that the end cap is pushed out the most possible.  This will give your the most surface area possible to place the super glue GEL that you will use.  (don't use regular super glue...it must be gel.)  Remove the sticker that covers the end cap, save it for later because you can reattach when repair is completed.  With the end cap pushed out, take some glue gel with the toothpick and apply it on the outside of the popped out cap . Be generous cause you can do this only once . Once you are done take a napkin and press hard the cap toward the pump so it can go back inside and keep it pressed for a few seconds. Then remove all the small parts of the napkin that has glued to the pump. Leave the pump to dry for about 10-15 minutes.     Now to test whether the pumps was glued well. You have already waited about 10-15 minutes so put your finger back in and press hard the plunger.  If you glued it well, the end cap will not move.  If the cap goes out again, you have to glue one more time. If all looks well, put some glue back on top of the pump cap and reattach the sticker that was removed to start.", 
            "title": "A33 error"
        }, 
        {
            "location": "/troubleshooting/pump-errors/#a32-and-e22-error-loop", 
            "text": "From what we know, this set of error codes seems like a pump killer.  A call to Medtronic support gave this less than hopeful information:  A32 - failure of flash memory\nE22 - software re-installation is necessary  We don't have any reports of a good fix for these error codes.  When seen, usually the E22 error comes up and as soon as it is cleared, the A32 error comes up.  And the loop continues with a pump restart.", 
            "title": "A32 and E22 error loop"
        }, 
        {
            "location": "/troubleshooting/omnipod-faults/", 
            "text": "Omnipod Faults\n\u2301\n\n\nPod faults are shown in the HUD:\n\n\n\n\n\n\n\nLoop will put a higher battery load on a pod than the PDM due to its regular and repeated communications. A pod with lower battery level appears to be more likely to fault for conditions like static electricity and occlusions/pump issues that Loop is not directly causing, like internal fault codes 052, 061, 064 and 066. Pods always perform safety checks and if a potential problem is found, the pod will end itself by screaming and stop with the insulin delivery.\n\n\n\n\nNote\n\n\nDuring extensive tests after getting all commands working properly, many failures due to one specific safety check were still encountered. This check needed to recover its counter within 30 minutes after a temp basal returning to a normal basal schedule, or else the pod would scream. Eventually, this was resolved by disabling \nonly\n this particular check. Therefore the 096-106 faults are always ignored in the current configuration of Loop.\n\n\n\n\nKnown internal pod fault codes\n\u2301\n\n\nThe currently known pod faults are listed here on the openomni wiki page: \nPod Fault codes\n\n\nWays to reduce the possibility of a fault\n\u2301\n\n\nNone of the ways listed here are certain to reduce the possibility of a screaming pod, but they could be worth considering if the hypothesis of a low battery is indeed the cause of some late-in-life pods.\n\n\n\n\nKeep the Loop app up to date; newer versions might include improvements to reduce pod battery load\n\n\nDo not use the \"neutral temp basal\" code customization\n\n\nUse a 433 Mhz RileyLink\n\n\n\n\nNot \"replacement pod\" situations\n\u2301\n\n\nNormal pod use can still give these two internal pod faults, which are not eligible for a replacement pod:\n* 028, Pod expired\n* 024, Empty reservoir\n\n\nReplacement pod situations\n\u2301\n\n\nYou can always call Insulet tech support if a pod has a clear failure on the pod, such as:\n\n\n\n\nA cannula was sticking out when the end cap was removed.\n\n\nVisual inspection of the pod's cannula window indicating the cannula insertion was not successful.\n\n\nLeaking or kinked cannula was causing insulin delivery issues.\n\n\nThe adhesive was not working properly when trying to place it on your body.\n\n\n\n\nIf the pod fails during use with Loop, a replacement might still be possible. However, the software which communicates with the pod isn't developed or supported by Insulet. Generally speaking, calling in failed pods for reasons not listed, above mid-pod life, maybe a bit of a reach for the DIY community. There is a grey area here that we should be careful of and acknowledge that Looping may be a cause in certain faults.", 
            "title": "Omnipod Faults"
        }, 
        {
            "location": "/troubleshooting/omnipod-faults/#omnipod-faults", 
            "text": "Pod faults are shown in the HUD:    Loop will put a higher battery load on a pod than the PDM due to its regular and repeated communications. A pod with lower battery level appears to be more likely to fault for conditions like static electricity and occlusions/pump issues that Loop is not directly causing, like internal fault codes 052, 061, 064 and 066. Pods always perform safety checks and if a potential problem is found, the pod will end itself by screaming and stop with the insulin delivery.   Note  During extensive tests after getting all commands working properly, many failures due to one specific safety check were still encountered. This check needed to recover its counter within 30 minutes after a temp basal returning to a normal basal schedule, or else the pod would scream. Eventually, this was resolved by disabling  only  this particular check. Therefore the 096-106 faults are always ignored in the current configuration of Loop.", 
            "title": "Omnipod Faults"
        }, 
        {
            "location": "/troubleshooting/omnipod-faults/#known-internal-pod-fault-codes", 
            "text": "The currently known pod faults are listed here on the openomni wiki page:  Pod Fault codes", 
            "title": "Known internal pod fault codes"
        }, 
        {
            "location": "/troubleshooting/omnipod-faults/#ways-to-reduce-the-possibility-of-a-fault", 
            "text": "None of the ways listed here are certain to reduce the possibility of a screaming pod, but they could be worth considering if the hypothesis of a low battery is indeed the cause of some late-in-life pods.   Keep the Loop app up to date; newer versions might include improvements to reduce pod battery load  Do not use the \"neutral temp basal\" code customization  Use a 433 Mhz RileyLink", 
            "title": "Ways to reduce the possibility of a fault"
        }, 
        {
            "location": "/troubleshooting/omnipod-faults/#not-replacement-pod-situations", 
            "text": "Normal pod use can still give these two internal pod faults, which are not eligible for a replacement pod:\n* 028, Pod expired\n* 024, Empty reservoir", 
            "title": "Not \"replacement pod\" situations"
        }, 
        {
            "location": "/troubleshooting/omnipod-faults/#replacement-pod-situations", 
            "text": "You can always call Insulet tech support if a pod has a clear failure on the pod, such as:   A cannula was sticking out when the end cap was removed.  Visual inspection of the pod's cannula window indicating the cannula insertion was not successful.  Leaking or kinked cannula was causing insulin delivery issues.  The adhesive was not working properly when trying to place it on your body.   If the pod fails during use with Loop, a replacement might still be possible. However, the software which communicates with the pod isn't developed or supported by Insulet. Generally speaking, calling in failed pods for reasons not listed, above mid-pod life, maybe a bit of a reach for the DIY community. There is a grey area here that we should be careful of and acknowledge that Looping may be a cause in certain faults.", 
            "title": "Replacement pod situations"
        }, 
        {
            "location": "/nightscout/overview/", 
            "text": "Overview\n\u2301\n\n\nNightscout (NS) is an excellent tool for remotely viewing Loop's actions.  It allows for easy remote monitoring of Loop activities, troubleshooting of Loop errors, history of CGM, carbs, boluses, \n temp basals, reports analyzing data trends and patterns. There is a Nightscout app in your iPhone App Store, or you can use a web browser to view the data.  Setting up Nightscout is free and fairly quick.  Once set up, the site can be accessed by anyone that you share your unique Nightscout URL with.  \n\n\nNightscout is highly recommended for Loop users, especially those using Loop as caregivers to t1ds.  Nightscout displays are often the easiest way to troubleshoot Loop settings, if you are having problems and seeking input from others.  Below is some discussion about the general Nightscout display, as well as some Loop-specific display information.\n\n\n\n\n\n\n\n\n\n\n\n\n\nBlood Glucose\n\u2301\n\n\nYour blood glucose (BG) readings from your CGM are shown in green, yellow, or red in the main graph area of NS.  You can adjust your high and low BG targets in NS (when NS alerts will start for high/low BGs), but those will not affect your Loop performance.  Loop only uses the BG targets given in the Loop app settings.  The main screen of BGs is displaying the time duration you have selected (in the example above, 12 hours of BG history).  The bottom of the screen shows the last 48-hours of BG trends.  You can scan backward by dragging the bottom timeline to the left, if you want to review specific Loop actions or data in the last two days. \n\n\n\n\nSAGE, CAGE, BAGE pills\n\u2301\n\n\nThe SAGE, CAGE, and BAGE pills are for Sensor Age, Cannula Age, and (pump) Battery Age.  These optional pills track the time since your CGM sensor, Pump site, and Pump battery were last changed.  You can set up custom alerts to remind you when it is time to change the devices, or simply use the visuals to keep track of your particular timing for site/sensor changes. These fields will not auto-update from pump or CGM devices, instead you will have to update them using Nightscout Careportal so that the pill information is accurate.\n\n\n\n\nCarbs\n\u2301\n\n\nCarbs are automatically uploaded to NS by the Loop app.  The amount of carbs on board (active carbs or COB) can be seen by clicking the Loop pill.  The size of a white carb dot on the graph is proportional to the amount of carbs entered...bigger meals get bigger dots. Loop does not read carbs from NS for use in looping calculations, it only uploads carbs to NS that have been entered in the Loop app.\n\n\n\n\nBoluses\n\u2301\n\n\nInsulin boluses are also automatically uploaded to NS by the Loop app.  The bolus is shown as a filled-in blue lower-half of the dot, and the specific amount of the bolus is also shown.  There may be a slight delay between when the carbs for a meal are uploaded to NS to when the meal bolus appears.  This is because depending on the pump model and size of bolus, the bolus may take a few minutes to actually be administered then Loop has to perform a pump read to verify the reservoir volume has decreased (i.e., the bolus was given).  As shown in the example above, the meal carbs have been uploaded, but the bolus delivery is still in progress.  Insulin on board (active insulin or IOB) is also shown in the Loop pill.\n\n\n\n\nTemp Basals\n\u2301\n\n\nWithin your NS profile, you will enter in the scheduled basal for your Loop user.  This is not automatically updated when you update the Loop app or your pump; you will have to manually update your basal profile in your NS site if you change your basal profile in Loop and/or pump. (Note: The dev branch does now update NS with the basal schedule from Loop, but dev is considered generally less stable than the master branch).   If you don't update the NS basal profile, it doesn't cause any problems in Loop function...you simply won't have accurate VISUAL representation of high/low temp basals within NS. The dashed blue line represents the scheduled basal profile (as entered in your NS profile).  The solid blue lines indicate the actual basal amounts set for a given time...so as Loop sets temp basals higher or lower than your scheduled basal rate, the solid blue line will jump above or below your dashed blue line.  There is a slight delay (up to 2-5 minutes) in the rendering of basal changes on the blue lines, so if you want the accurate current basal rate, you can check the Loop pill.\n\n\n\n\nPredicted BG\n\u2301\n\n\nThe purple line to the right of the BG is Loop's predicted BG.  Watching the behavior of that purple line can help you understand why Loop is making decisions regarding high or low temps.  You can read more on that topic in the Algorithm section of these docs.\n\n\n\n\nLoop pill\n\u2301\n\n\nThe Loop pill is the little display box which when hovered over, or clicked, will provide additional information about recent Loop activities and status.  Information included is the last time Loop ran, the temp basal set, IOB, and COB.  Looking at the Loop pill is a quick method for assessing if you loop is currently active, as well.\n\n\n\n\nLoop Pill status indicator symbols\n\n\nX\n \n\nError in Loop\n\n\n\u03d5\n \n\nRecommending basal, but not enacting (open loop or pump suspended)\n\n\n\u2301\n \n\nEnacted a new temp basal\n\n\n\u21bb\n \n\nLoop is continuing with last temp basal, no change\n\n\n\u26a0\n \n\nWarning (Loop has not completed since since the time set on your LOOP_WARN setting in NS)\n\n\n\n\nMouseover or Touch the Loop pill to view a tool tip containing one or more of the latest status messages. The most up-to-date NS also includes information in the Loop pill for the minimum and maximum predicted BG, eventual and predicted BG.", 
            "title": "Overview"
        }, 
        {
            "location": "/nightscout/overview/#overview", 
            "text": "Nightscout (NS) is an excellent tool for remotely viewing Loop's actions.  It allows for easy remote monitoring of Loop activities, troubleshooting of Loop errors, history of CGM, carbs, boluses,   temp basals, reports analyzing data trends and patterns. There is a Nightscout app in your iPhone App Store, or you can use a web browser to view the data.  Setting up Nightscout is free and fairly quick.  Once set up, the site can be accessed by anyone that you share your unique Nightscout URL with.    Nightscout is highly recommended for Loop users, especially those using Loop as caregivers to t1ds.  Nightscout displays are often the easiest way to troubleshoot Loop settings, if you are having problems and seeking input from others.  Below is some discussion about the general Nightscout display, as well as some Loop-specific display information.", 
            "title": "Overview"
        }, 
        {
            "location": "/nightscout/overview/#blood-glucose", 
            "text": "Your blood glucose (BG) readings from your CGM are shown in green, yellow, or red in the main graph area of NS.  You can adjust your high and low BG targets in NS (when NS alerts will start for high/low BGs), but those will not affect your Loop performance.  Loop only uses the BG targets given in the Loop app settings.  The main screen of BGs is displaying the time duration you have selected (in the example above, 12 hours of BG history).  The bottom of the screen shows the last 48-hours of BG trends.  You can scan backward by dragging the bottom timeline to the left, if you want to review specific Loop actions or data in the last two days.", 
            "title": "Blood Glucose"
        }, 
        {
            "location": "/nightscout/overview/#sage-cage-bage-pills", 
            "text": "The SAGE, CAGE, and BAGE pills are for Sensor Age, Cannula Age, and (pump) Battery Age.  These optional pills track the time since your CGM sensor, Pump site, and Pump battery were last changed.  You can set up custom alerts to remind you when it is time to change the devices, or simply use the visuals to keep track of your particular timing for site/sensor changes. These fields will not auto-update from pump or CGM devices, instead you will have to update them using Nightscout Careportal so that the pill information is accurate.", 
            "title": "SAGE, CAGE, BAGE pills"
        }, 
        {
            "location": "/nightscout/overview/#carbs", 
            "text": "Carbs are automatically uploaded to NS by the Loop app.  The amount of carbs on board (active carbs or COB) can be seen by clicking the Loop pill.  The size of a white carb dot on the graph is proportional to the amount of carbs entered...bigger meals get bigger dots. Loop does not read carbs from NS for use in looping calculations, it only uploads carbs to NS that have been entered in the Loop app.", 
            "title": "Carbs"
        }, 
        {
            "location": "/nightscout/overview/#boluses", 
            "text": "Insulin boluses are also automatically uploaded to NS by the Loop app.  The bolus is shown as a filled-in blue lower-half of the dot, and the specific amount of the bolus is also shown.  There may be a slight delay between when the carbs for a meal are uploaded to NS to when the meal bolus appears.  This is because depending on the pump model and size of bolus, the bolus may take a few minutes to actually be administered then Loop has to perform a pump read to verify the reservoir volume has decreased (i.e., the bolus was given).  As shown in the example above, the meal carbs have been uploaded, but the bolus delivery is still in progress.  Insulin on board (active insulin or IOB) is also shown in the Loop pill.", 
            "title": "Boluses"
        }, 
        {
            "location": "/nightscout/overview/#temp-basals", 
            "text": "Within your NS profile, you will enter in the scheduled basal for your Loop user.  This is not automatically updated when you update the Loop app or your pump; you will have to manually update your basal profile in your NS site if you change your basal profile in Loop and/or pump. (Note: The dev branch does now update NS with the basal schedule from Loop, but dev is considered generally less stable than the master branch).   If you don't update the NS basal profile, it doesn't cause any problems in Loop function...you simply won't have accurate VISUAL representation of high/low temp basals within NS. The dashed blue line represents the scheduled basal profile (as entered in your NS profile).  The solid blue lines indicate the actual basal amounts set for a given time...so as Loop sets temp basals higher or lower than your scheduled basal rate, the solid blue line will jump above or below your dashed blue line.  There is a slight delay (up to 2-5 minutes) in the rendering of basal changes on the blue lines, so if you want the accurate current basal rate, you can check the Loop pill.", 
            "title": "Temp Basals"
        }, 
        {
            "location": "/nightscout/overview/#predicted-bg", 
            "text": "The purple line to the right of the BG is Loop's predicted BG.  Watching the behavior of that purple line can help you understand why Loop is making decisions regarding high or low temps.  You can read more on that topic in the Algorithm section of these docs.", 
            "title": "Predicted BG"
        }, 
        {
            "location": "/nightscout/overview/#loop-pill", 
            "text": "The Loop pill is the little display box which when hovered over, or clicked, will provide additional information about recent Loop activities and status.  Information included is the last time Loop ran, the temp basal set, IOB, and COB.  Looking at the Loop pill is a quick method for assessing if you loop is currently active, as well.   Loop Pill status indicator symbols  X   \nError in Loop  \u03d5   \nRecommending basal, but not enacting (open loop or pump suspended)  \u2301   \nEnacted a new temp basal  \u21bb   \nLoop is continuing with last temp basal, no change  \u26a0   \nWarning (Loop has not completed since since the time set on your LOOP_WARN setting in NS)   Mouseover or Touch the Loop pill to view a tool tip containing one or more of the latest status messages. The most up-to-date NS also includes information in the Loop pill for the minimum and maximum predicted BG, eventual and predicted BG.", 
            "title": "Loop pill"
        }, 
        {
            "location": "/nightscout/new_user/", 
            "text": "New Nightscout Users\n\u2301\n\n\nTwo options exist for easy hosting of NS; Azure or Heroku. Both hosting services are free.  However,  Azure has data quotas monthly and shorter-term CPU quotas.  If you exceed those quotas, you may be facing a monthly data-use bill or being locked out of NS for about 12 hours until the quotas reset.  As you start to use NS more intensively for alarms, pebble watches, etc\u2026it is possible that you may exceed your monthly data cap on Azure.  Many Loop users have transitioned their old sites from Azure over to Heroku and have found the hosting change to be beneficial.  Heroku also has some memory limits, but those limits have been more than adequate for Loop users.  Therefore, we recommend new users start with Heroku.\n\n\nIf you are the person who enjoys videos...here's a YouTube video that you can use to walk-through with these directions. Just give it a click.\n\n\n\n\n\n\n\n\n\nStep 1: Heroku Account\n\u2301\n\n\nCreate an account at \nHeroku's signup page\n. \n\n\nEnter your name, email address, role (\"Hobbyist\" is fine) and choose \"Node.js\" as the Primary Development Language.  When you get all those entered, confirm that you are not a robot and click the blue \"Create Free Account\" button\n\n\n\n\n\n\n\n\n\nNow follow the directions and check your email to confirm your Heroku account. You'll be asked to create a password...save that password somewhere. You'll likely be logging into Heroku as part of Looping in the future, so this is a good password to save.\n\n\nWhen you finish creating the password, you'll see a screen like below.\n\n\n\n\n\n\n\n\n\nWe have to complete one last step...adding a credit card to your Heroku account. Don't worry, Heroku is still free...but it's only free if you leave a credit card on file. I've used Heroku for 6 years now and never been charged.\n\n\nTo add your credit card, click on the icon of a little ninja person in the upper right corner of the Heroku site, and then select Account Settings and then Billing...or \nthis should take you right to the billing page for your account\n. Then click the purple \"Add credit card\" button. Finish the steps to add a credit card.\n\n\n\n\n\n\n\n\n\nOnce you finish that, you can just leave that page/tab alone and move on down to the next step below. \n\n\nStep 2: Create an account at GitHub\n\u2301\n\n\nGo to \nGitHub's signup page\n. Fill out the information to create your own unique username (write it down), email address, and password (also write this one down). Verify that you are a real person by tossing an animal's image around until it is upright...and then you'll be able to click the green \"create an account\" at the bottom of the page\n\n\n\n\n\n\n\n\n\nGithub will then ask if you want the Free Account (duh, yes). Confirm that (and unclick the Newsletter subscription if you don't want spam).\n\n\nFinally, Github will ask you a little about your programming experience and what you are going to use GitHub for...you can answer those or choose the \"skip this step\" option at the bottom of the screen.\n\n\nFinally, you'll be sent the email to verify your new account. Go to your emails and click the link sent to you.\n\n\nStep 3: Fork and deploy cgm-remote-monitor\n\u2301\n\n\nNow go to the \nNightscout cgm-remote-monitor repository\n. This is where the Nightscout developer's store their code that we are going to borrow a copy of. A copy of code in Github is called a \"fork\". In the upper right corner, you'll find a little button labeled \nFork\n.  Click that button and you'll see a message that GitHub is cloning/forking a copy of that code to your GitHub account.  That is a good thing.  Don't worry it only takes a few seconds.\n\n\n\n\n\n\n\n\n\n\nOnce the forking is done, scroll down (below all those folder and file names) until you see the purple \nDeploy to Heroku\n button. Click that button.\n\n\n\n\n\n\n\n\n\n\n\nPretty quickly, you should see a Heroku screen popup for \"Create New App\".  If you see that, you're good to go onto the next step to start setting up the Heroku Nightscout app.\n\n\n\nStep 4: Setup your Heroku Nightscout app\n\u2301\n\n\nHeroku calls the code that you just deployed an \"app\"...but probably easier for most people to imagine it as a website. \n\n\nThe first step is to give your \"app\" a name, this will be the prefix of your soon-to-be-created Nightscout site\u2019s URL. For example, if you enter \"janehasthesugars\" then your Nightscout site's URL will be \nhttps://janehasthesugars.herokuapp.com\n\n\n\n\n\n\n\n\n\nNow scroll down a bit and we are going to fill out the information lines in the \nConfig Vars\n section (circled in red above) of that page. There are many variables listed in that section, but we will only \nneed\n to edit a few of them right now to get started. You can always go back later and edit the default values of your BG alarms and other defaults (or do it now, if you'd like). The variables listed below though do need you to make some edits/entries or review that the default settings work for your situation.\n\n\n\n\n\n\n\n\nVARIABLE\n\n\nVALUE\n\n\n\n\n\n\n\n\n\n\nAPI_SECRET\n\n\nCreate your own API_SECRET\u2026this is like the password to your NS site.  Please write it down somewhere safe or commit it to memory, you will be using it in the future.  It needs to be at least 12 characters long and should NOT use the @ or ! symbols.\n\n\n\n\n\n\nDISPLAY_UNITS\n\n\ndefault is mg/dl, you'll need to change to mmol if that's what you use\n\n\n\n\n\n\nENABLE\n\n\nbridge loop pump iob cob basal careportal sage cage bage openaps override\n(Enter all of the words above without commas.  Just add a single space between each word. Make sure autocorrect does not add space between careportal. Typically, the words basal and careportal will already be there waiting for you.)\n\n\n\n\n\n\nBRIDGE_USER_NAME\n\n\nEnter your Dexcom Share Account login name. This is not an email address. This should be the same account name used in the Looper's Dexcom app.\n\n\n\n\n\n\nBRIDGE_PASSWORD\n\n\nEnter your Dexcom Share Account password.\n\n\n\n\n\n\nBRIDGE_SERVER\n\n\nThe default assumes the Dexcom user is using a US Dexcom account. \nIf you are outside the US, you need to change this entry to EU.\n\n\n\n\n\n\n\n\n\n\n\n\n\nMOST COMMON ERRORS\n\n\nThe \nBRIDGE_PASSWORD\n and \nBRIDGE_USER_NAME\n are NOT visible from within your Dexcom app or online account. The values for them are what you entered into your Dexcom mobile app when you VERY FIRST logged into that app however long ago. The \nBRIDGE_USER_NAME\n is not an email address. The most common error on initial Nightscout setups is that people incorrectly use an old account or an old password. To test your username and password, go to \nDexcom's Clarity\n page and try logging into your Dexcom account. If your account info doesn't let you in, or you don't see data in your Clarity account...then you need to figure out your actual credentials before moving ahead.\n\n\n\n\n\n\nIf you are using Dexcom Share outside the United States, you will need to make sure you have EU in the BRIDGE_SERVER.\n\n\n\n\n\n\n\n\n\nKEY\n\n\nVALUE\n\n\n\n\n\n\n\n\n\n\nBRIDGE_SERVER\n\n\nEU\n\n\n\n\n\n\n\n\n\n\nNow that we have all the variables fixed up, click the purple \nDeploy\n button at the bottom of screen\n\n\n\n\n\n\n\n \n\n\nWait about 5 minutes while Heroku builds your Nightscout app. You\u2019ll see some text scroll by in the Build App box, and then finally, you will have a message that the app was successfully deployed.\n\n\n\n\n\n\n\n \n\n\n\nClick on the \nManage App\n button and then we will move onto the next step.\n\n\nStep 5: Additional Variables\n\u2301\n\n\nSelect the \nSettings\n tab near the top of the screen on your Heroku app. Click on \nReveal Config  Vars\n button that will be partway down the page. \n\n\n\n\n\n\n\n\n\n\nScroll down to the bottom of the variables list until you find the last blank one. \n\n\n\n\n\n\n\n\n\n\n\nYou are going to add several additional lines of variables specifically for Loop use; the \nDEVICESTATUS_ADVANCED\n is a required line, the others just make Nightscout more useful when Looping.\n\n\n\n\n\n\n\n\n\nKEY\n\n\nVALUE\n\n\n\n\n\n\n\n\n\n\nDEVICESTATUS_ADVANCED\n\n\ntrue\n\n\n\n\n\n\nPUMP_FIELDS\n\n\nbattery reservoir clock status\n\n\n\n\n\n\nPUMP_RETRO_FIELDS\n\n\nbattery reservoir clock status\n\n\n\n\n\n\nSHOW_FORECAST\n\n\nloop\n\n\n\n\n\n\nSHOW_PLUGINS\n\n\nloop pump cob iob sage cage careportal\n\n\n\n\n\n\nLOOP_ENABLE_ALERTS\n\n\ntrue\n\n\n\n\n\n\nLOOP_WARN\n\n\n20\n(This is the minutes since Loop last successfully looped, the t1d will have a similar notification at this time through the Loop app.  This will be a yellow alert in NS.)\n\n\n\n\n\n\nLOOP_URGENT\n\n\n60\n(Same as the alert above, but will be red in color and have a shorter snooze option.)\n\n\n\n\n\n\n\n\n\nFinally, I recommend deleting the \nPAPERTRAIL_API_TOKEN\n line. Heroku offers a free, tiny amount of Papertrail service (like a logging service for how the site is running), but really offers only confusion to most people later when they get a message that their \"Free Papertrail Service has run out of room\". Papertrail is not needed, and really doesn't provide useful info for Nightscout users anyways...so best to just delete that line and never have to get the useless email in the first place.\n\n\nStep 6: Setup Profile\n\u2301\n\n\nNow that we have finished all the variable setup, scroll up to the top of the page and click on the \nOpen App\n button in the top right corner of your Heroku site.\n\n\n\n\n\n\n\n\n\nYou will see black site with a profile warning at the top of the screen. Confirm to redirect to a profile set-up page.  (If it doesn't redirect automatically, refresh your webpage...might have to push the button a few times).  \n\n\n\n\n\n\n\n\n\nYou do not have to enter all the information in the profile if you are using Loop (since Loop will be providing the information for IOB and COB rather than letting NS calculate them), but you do have to fill out the \nTimeZone\n. That one is non-negotiable. I highly recommend also filling in the \nInsulin to carb ratio\n, \nInsulin Sensitivity Factor\n, and \nBasal Rates\n so that your information is properly displayed in Nightscout. To be clear, those values you enter in the Profile will not affect your Loop in anyway, because Loop will not read them from Nightscout. New versions of Loop will also update these values in this Profile if you change the corresponding settings in Loop. So really, this is just a one-time setup and after that Loop will do the work of updating these values. \n\n\nClick \nSave\n when you have entered the information.  You will be prompted to authenticate, if it is the first time you\u2019ve used the device to make changes in your profile.  Click on the \nAuthenticate\n link at the bottom of the site, and enter your API_SECRET to complete the authentication.\n\n\n\n\n\n\n\n\n\n\n\nClose out of the Profile Editor to return to the main Nightscout page and configure your NS settings.\n\n\nStep 7: Nightscout Settings\n\u2301\n\n\nThe last step is to finish your Nightscout's settings. Click on the settings (those three horizontal lines in upper right corner).  Now check that you have everything displaying correctly:\n\n\n\n\nRender Basal\n is set to either default or icicle (totally personal preference for how the temp basals show as blue lines in NS site)\n\n\nTheme is set to Colors\n\n\nCheck the boxes that you\u2019d like display pills in the SHOW PLUGINS (usually all of them except Openaps) section.\n\n\n\n\n\n\n\n\n\n\n\nSave the settings changes and you'll be on your way! Congrats!!\n\n\nStep 8: Loop Settings\n\u2301\n\n\nDon't forget to enter your new Nightscout site into your Loop settings! That way Loop can upload all the juicy great info directly to your Nightscout site (except CGM data...that is all handled by that BRIDGE info you put in earlier)\n\n\nDirections \nhere\n as well as warnings about the two most common errors when people add the URL to Loop settings. (Hint hint hint)\n\n\nTroubleshooting\n\u2301\n\n\nIf your site is not showing CGM (and Loop, if you are Looping) data within about 10 minutes of finishing your setup, then please follow these steps \nhere\n to troubleshoot.\n\n\nFuture warning\n\u2301\n\n\nAt some point in the future months, your Nightscout site will likely stop in some quirky way...like CGM data won't be showing is the most common. This won't affect Looping, but it might be kind of annoying if you are a parent using Nightscout for remote info. The reason? The database Heroku gives us for free has some size limitations. After several months of Looping, you'll likely fill up that free amount of space and we will need to cleanout in order to make room.\n\n\nSo...keep it in your head that if you see something odd with your NS site (like no CGM even though Dexcom is working), then please check \nthis page to learn how you can cleanout the database\n. It is easy and fast...no worries.", 
            "title": "Brand New NS"
        }, 
        {
            "location": "/nightscout/new_user/#new-nightscout-users", 
            "text": "Two options exist for easy hosting of NS; Azure or Heroku. Both hosting services are free.  However,  Azure has data quotas monthly and shorter-term CPU quotas.  If you exceed those quotas, you may be facing a monthly data-use bill or being locked out of NS for about 12 hours until the quotas reset.  As you start to use NS more intensively for alarms, pebble watches, etc\u2026it is possible that you may exceed your monthly data cap on Azure.  Many Loop users have transitioned their old sites from Azure over to Heroku and have found the hosting change to be beneficial.  Heroku also has some memory limits, but those limits have been more than adequate for Loop users.  Therefore, we recommend new users start with Heroku.  If you are the person who enjoys videos...here's a YouTube video that you can use to walk-through with these directions. Just give it a click.", 
            "title": "New Nightscout Users"
        }, 
        {
            "location": "/nightscout/new_user/#step-1-heroku-account", 
            "text": "Create an account at  Heroku's signup page .   Enter your name, email address, role (\"Hobbyist\" is fine) and choose \"Node.js\" as the Primary Development Language.  When you get all those entered, confirm that you are not a robot and click the blue \"Create Free Account\" button     Now follow the directions and check your email to confirm your Heroku account. You'll be asked to create a password...save that password somewhere. You'll likely be logging into Heroku as part of Looping in the future, so this is a good password to save.  When you finish creating the password, you'll see a screen like below.     We have to complete one last step...adding a credit card to your Heroku account. Don't worry, Heroku is still free...but it's only free if you leave a credit card on file. I've used Heroku for 6 years now and never been charged.  To add your credit card, click on the icon of a little ninja person in the upper right corner of the Heroku site, and then select Account Settings and then Billing...or  this should take you right to the billing page for your account . Then click the purple \"Add credit card\" button. Finish the steps to add a credit card.     Once you finish that, you can just leave that page/tab alone and move on down to the next step below.", 
            "title": "Step 1: Heroku Account"
        }, 
        {
            "location": "/nightscout/new_user/#step-2-create-an-account-at-github", 
            "text": "Go to  GitHub's signup page . Fill out the information to create your own unique username (write it down), email address, and password (also write this one down). Verify that you are a real person by tossing an animal's image around until it is upright...and then you'll be able to click the green \"create an account\" at the bottom of the page     Github will then ask if you want the Free Account (duh, yes). Confirm that (and unclick the Newsletter subscription if you don't want spam).  Finally, Github will ask you a little about your programming experience and what you are going to use GitHub for...you can answer those or choose the \"skip this step\" option at the bottom of the screen.  Finally, you'll be sent the email to verify your new account. Go to your emails and click the link sent to you.", 
            "title": "Step 2: Create an account at GitHub"
        }, 
        {
            "location": "/nightscout/new_user/#step-3-fork-and-deploy-cgm-remote-monitor", 
            "text": "Now go to the  Nightscout cgm-remote-monitor repository . This is where the Nightscout developer's store their code that we are going to borrow a copy of. A copy of code in Github is called a \"fork\". In the upper right corner, you'll find a little button labeled  Fork .  Click that button and you'll see a message that GitHub is cloning/forking a copy of that code to your GitHub account.  That is a good thing.  Don't worry it only takes a few seconds.     \nOnce the forking is done, scroll down (below all those folder and file names) until you see the purple  Deploy to Heroku  button. Click that button.     \nPretty quickly, you should see a Heroku screen popup for \"Create New App\".  If you see that, you're good to go onto the next step to start setting up the Heroku Nightscout app.", 
            "title": "Step 3: Fork and deploy cgm-remote-monitor"
        }, 
        {
            "location": "/nightscout/new_user/#step-4-setup-your-heroku-nightscout-app", 
            "text": "Heroku calls the code that you just deployed an \"app\"...but probably easier for most people to imagine it as a website.   The first step is to give your \"app\" a name, this will be the prefix of your soon-to-be-created Nightscout site\u2019s URL. For example, if you enter \"janehasthesugars\" then your Nightscout site's URL will be  https://janehasthesugars.herokuapp.com     Now scroll down a bit and we are going to fill out the information lines in the  Config Vars  section (circled in red above) of that page. There are many variables listed in that section, but we will only  need  to edit a few of them right now to get started. You can always go back later and edit the default values of your BG alarms and other defaults (or do it now, if you'd like). The variables listed below though do need you to make some edits/entries or review that the default settings work for your situation.     VARIABLE  VALUE      API_SECRET  Create your own API_SECRET\u2026this is like the password to your NS site.  Please write it down somewhere safe or commit it to memory, you will be using it in the future.  It needs to be at least 12 characters long and should NOT use the @ or ! symbols.    DISPLAY_UNITS  default is mg/dl, you'll need to change to mmol if that's what you use    ENABLE  bridge loop pump iob cob basal careportal sage cage bage openaps override (Enter all of the words above without commas.  Just add a single space between each word. Make sure autocorrect does not add space between careportal. Typically, the words basal and careportal will already be there waiting for you.)    BRIDGE_USER_NAME  Enter your Dexcom Share Account login name. This is not an email address. This should be the same account name used in the Looper's Dexcom app.    BRIDGE_PASSWORD  Enter your Dexcom Share Account password.    BRIDGE_SERVER  The default assumes the Dexcom user is using a US Dexcom account.  If you are outside the US, you need to change this entry to EU.       MOST COMMON ERRORS  The  BRIDGE_PASSWORD  and  BRIDGE_USER_NAME  are NOT visible from within your Dexcom app or online account. The values for them are what you entered into your Dexcom mobile app when you VERY FIRST logged into that app however long ago. The  BRIDGE_USER_NAME  is not an email address. The most common error on initial Nightscout setups is that people incorrectly use an old account or an old password. To test your username and password, go to  Dexcom's Clarity  page and try logging into your Dexcom account. If your account info doesn't let you in, or you don't see data in your Clarity account...then you need to figure out your actual credentials before moving ahead.    If you are using Dexcom Share outside the United States, you will need to make sure you have EU in the BRIDGE_SERVER.     KEY  VALUE      BRIDGE_SERVER  EU      Now that we have all the variables fixed up, click the purple  Deploy  button at the bottom of screen      \nWait about 5 minutes while Heroku builds your Nightscout app. You\u2019ll see some text scroll by in the Build App box, and then finally, you will have a message that the app was successfully deployed.       Click on the  Manage App  button and then we will move onto the next step.", 
            "title": "Step 4: Setup your Heroku Nightscout app"
        }, 
        {
            "location": "/nightscout/new_user/#step-5-additional-variables", 
            "text": "Select the  Settings  tab near the top of the screen on your Heroku app. Click on  Reveal Config  Vars  button that will be partway down the page.      \nScroll down to the bottom of the variables list until you find the last blank one.      \nYou are going to add several additional lines of variables specifically for Loop use; the  DEVICESTATUS_ADVANCED  is a required line, the others just make Nightscout more useful when Looping.     KEY  VALUE      DEVICESTATUS_ADVANCED  true    PUMP_FIELDS  battery reservoir clock status    PUMP_RETRO_FIELDS  battery reservoir clock status    SHOW_FORECAST  loop    SHOW_PLUGINS  loop pump cob iob sage cage careportal    LOOP_ENABLE_ALERTS  true    LOOP_WARN  20 (This is the minutes since Loop last successfully looped, the t1d will have a similar notification at this time through the Loop app.  This will be a yellow alert in NS.)    LOOP_URGENT  60 (Same as the alert above, but will be red in color and have a shorter snooze option.)     \nFinally, I recommend deleting the  PAPERTRAIL_API_TOKEN  line. Heroku offers a free, tiny amount of Papertrail service (like a logging service for how the site is running), but really offers only confusion to most people later when they get a message that their \"Free Papertrail Service has run out of room\". Papertrail is not needed, and really doesn't provide useful info for Nightscout users anyways...so best to just delete that line and never have to get the useless email in the first place.", 
            "title": "Step 5: Additional Variables"
        }, 
        {
            "location": "/nightscout/new_user/#step-6-setup-profile", 
            "text": "Now that we have finished all the variable setup, scroll up to the top of the page and click on the  Open App  button in the top right corner of your Heroku site.     You will see black site with a profile warning at the top of the screen. Confirm to redirect to a profile set-up page.  (If it doesn't redirect automatically, refresh your webpage...might have to push the button a few times).       You do not have to enter all the information in the profile if you are using Loop (since Loop will be providing the information for IOB and COB rather than letting NS calculate them), but you do have to fill out the  TimeZone . That one is non-negotiable. I highly recommend also filling in the  Insulin to carb ratio ,  Insulin Sensitivity Factor , and  Basal Rates  so that your information is properly displayed in Nightscout. To be clear, those values you enter in the Profile will not affect your Loop in anyway, because Loop will not read them from Nightscout. New versions of Loop will also update these values in this Profile if you change the corresponding settings in Loop. So really, this is just a one-time setup and after that Loop will do the work of updating these values.   Click  Save  when you have entered the information.  You will be prompted to authenticate, if it is the first time you\u2019ve used the device to make changes in your profile.  Click on the  Authenticate  link at the bottom of the site, and enter your API_SECRET to complete the authentication.      Close out of the Profile Editor to return to the main Nightscout page and configure your NS settings.", 
            "title": "Step 6: Setup Profile"
        }, 
        {
            "location": "/nightscout/new_user/#step-7-nightscout-settings", 
            "text": "The last step is to finish your Nightscout's settings. Click on the settings (those three horizontal lines in upper right corner).  Now check that you have everything displaying correctly:   Render Basal  is set to either default or icicle (totally personal preference for how the temp basals show as blue lines in NS site)  Theme is set to Colors  Check the boxes that you\u2019d like display pills in the SHOW PLUGINS (usually all of them except Openaps) section.      Save the settings changes and you'll be on your way! Congrats!!", 
            "title": "Step 7: Nightscout Settings"
        }, 
        {
            "location": "/nightscout/new_user/#step-8-loop-settings", 
            "text": "Don't forget to enter your new Nightscout site into your Loop settings! That way Loop can upload all the juicy great info directly to your Nightscout site (except CGM data...that is all handled by that BRIDGE info you put in earlier)  Directions  here  as well as warnings about the two most common errors when people add the URL to Loop settings. (Hint hint hint)", 
            "title": "Step 8: Loop Settings"
        }, 
        {
            "location": "/nightscout/new_user/#troubleshooting", 
            "text": "If your site is not showing CGM (and Loop, if you are Looping) data within about 10 minutes of finishing your setup, then please follow these steps  here  to troubleshoot.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/nightscout/new_user/#future-warning", 
            "text": "At some point in the future months, your Nightscout site will likely stop in some quirky way...like CGM data won't be showing is the most common. This won't affect Looping, but it might be kind of annoying if you are a parent using Nightscout for remote info. The reason? The database Heroku gives us for free has some size limitations. After several months of Looping, you'll likely fill up that free amount of space and we will need to cleanout in order to make room.  So...keep it in your head that if you see something odd with your NS site (like no CGM even though Dexcom is working), then please check  this page to learn how you can cleanout the database . It is easy and fast...no worries.", 
            "title": "Future warning"
        }, 
        {
            "location": "/nightscout/update_user/", 
            "text": "Adding Loop to Existing NS\n\u2301\n\n\nMany people may already have an existing Nightscout site setup from before adding Loop to their management strategies. In order to make the most of your Looping setup, you will need to modify your existing Nightscout site a bit specifically for Loop. The process is pretty easy and should not take long.\n\n\nNew Loopers Variables\n\u2301\n\n\nThe modifications for retrofitting an existing NS site for new Loop users will require you to make some edits to your Heroku site.  There are five steps:\n\n\n\n\nLogin to Heroku, Open Settings Tab\n\n\nEdit/Add Config Vars\n\n\nOpen Nightscout Site\n\n\nTurn on Plugins\n\n\nUpdate Profile Settings\n\n\n\n\nStep 1: Login to Heroku, Settings Tab\n\u2301\n\n\nLogin to your Heroku account\n, select the \nSettings\n tab near the top of the screen on your Heroku app.\n\n\n\n\n\n\n\n\n\nStep 2: Edit/Add Config Vars\n\u2301\n\n\nClick on \nReveal Config Vars\n.  Scroll down the bottom of the Config Vars lines until you find the last blank one.  You are going to add several additional lines of config vars for Loop use; the DEVICESTATUS_ADVANCED and ENABLE lines are required, the others just make Nightscout more useful when Looping.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nENABLE\n\n\nbridge loop pump iob cob basal careportal sage cage \n\n\n(Note: If you are an existing NS user, you likely already have an ENABLE line in this section of Heroku. Don't add a new one. Simply find the existing ENABLE line, click on the little pencil icon to the right of it, and add the words shown on the ENABLE line below to the existing words already on the enable line.  Avoid duplicates. The remainder of the lines are likely going to be brand new additions to your Heroku settings.)\n\n\n\n\n\n\nDEVICESTATUS_ADVANCED\n\n\ntrue\n\n\n\n\n\n\nPUMP_FIELDS\n\n\nbattery reservoir clock status\n\n\n\n\n\n\nPUMP_RETRO_FIELDS\n\n\nbattery reservoir clock status\n\n\n\n\n\n\nSHOW_FORECAST\n\n\nloop\n\n\n\n\n\n\nSHOW_PLUGINS\n\n\nloop pump cob iob sage cage careportal\n\n\n\n\n\n\nPUMP_ENABLE_ALERTS\n\n\ntrue\n\n\n\n\n\n\nPUMP_URGENT_BATT_U\n\n\n30\n(This is the pump battery percentage that will trigger a red, urgent alert in NS.)\n\n\n\n\n\n\nPUMP_URGENT_BATT_V\n\n\n1.25\n(This is the pump battery voltage that will trigger a red, urgent alert in NS.)\n\n\n\n\n\n\nPUMP_URGENT_RES\n\n\n10\n(This is the reservoir volume that will trigger a red, urgent alert in NS.)\n\n\n\n\n\n\nPUMP_URGENT_CLOCK\n\n\n30\n\n\n\n\n\n\nLOOP_ENABLE_ALERTS\n\n\ntrue\n\n\n\n\n\n\nLOOP_WARN\n\n\n20\n(This is the minutes since Loop last successfully looped, the t1d will have a similar notification at this time through the Loop app.  This will be a yellow alert in NS.)\n\n\n\n\n\n\nLOOP_URGENT\n\n\n60\n(Same as the alert above, but will be red in color and have a shorter snooze option.)\n\n\n\n\n\n\n\n\n\nStep 3: Open Your NS Site\n\u2301\n\n\nClick on \nOpen App\n in the top right corner of your Heroku site.\n\n\n\n\n\n\n\n\n\nStep 4: Turn on Plugins\n\u2301\n\n\nClick on the settings (those three horizontal lines in the upper right corner).  Now check that your basal render is selected to either default or icicle (personal preference for how the temp basals show as blue lines in NS site), check the boxes that you\u2019d like display pills in the SHOW PLUGINS (usually all of them), and then click save. If you have not authenticated your site previously, you may be prompted to provide your API Secret prior to Nightscout saving your changes. \n\n\n\n\n\n\n\n\n\nStep 5: Update Profile Settings\n\u2301\n\n\nDouble-check that your NS Profile settings are current and that you have a basal profile entered, if you want to see the temp basals that Loop is setting. The values in your Nightscout Profile settings will not impact or affect your Loop, but it is just nice to have them match up in the event you are looking at your data with an endocrinologist or retrospectively looking at data.\n\n\nNightscout Version Update\n\u2301\n\n\nIf you are new to Loop and haven\u2019t updated your NS site since before December 1, 2016, you will want to update your NS site. You can run either the \"master\" or \"dev\" branches of cgm-remote-monitor with Loop.  To check what version your Nightscout site is running, go to your Nightscout site and pull open the site settings by clicking on the three horizontal lines at the top right of the screen.  The version number is at the bottom.\n\n\nNightscout has a tool to help you update your Nightscout site and you can find the \ndirections using to the update tool here\n.\n\n\nSimply put, the \nUpdate tool\n will look at your GitHub repository and check if your Nightscout code is old and needs updating.  You will have to be logged into your GitHub account in order for the tool to work, so do that before starting this process.\n\n\n\n\n\n\n\n\n\n\nYou'll click on the green \nContinue updating at GitHub\n button, read the directions that will appear as a pop-up and then finish the update process. \n\n\nClick the big green \nCreate pull request\n button. \n\n\n\n\n\n\nFor most people, another screen will appear like shown in the screenshots below with a green \nAble to merge\n message. Fill in a title and click the button to create the pull request, and then you can \nMerge pull request\n, and finally \nConfirm merge\n.\n\n\n\n\n\n\nHowever, for some of you may encounter a red error message \nx Can't automatically merge\n message. If you have that message, you may want to post in FB for help on resolving that error message before proceeding any further.\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n \n\n\n\n\nYour cgm-remote-monitor repository is now up-to-date.  Nice work, and almost done.\n\n\nIf you don\u2019t have your Heroku set-up to automatically update when your repository is updated, you will have to go into your Heroku \nDeploy\n section and manually deploy your branch now that your repository has been updated.  Make sure you are connected to your GitHub cgm-remote-monitor repository.", 
            "title": "Retrofit Existing NS"
        }, 
        {
            "location": "/nightscout/update_user/#adding-loop-to-existing-ns", 
            "text": "Many people may already have an existing Nightscout site setup from before adding Loop to their management strategies. In order to make the most of your Looping setup, you will need to modify your existing Nightscout site a bit specifically for Loop. The process is pretty easy and should not take long.", 
            "title": "Adding Loop to Existing NS"
        }, 
        {
            "location": "/nightscout/update_user/#new-loopers-variables", 
            "text": "The modifications for retrofitting an existing NS site for new Loop users will require you to make some edits to your Heroku site.  There are five steps:   Login to Heroku, Open Settings Tab  Edit/Add Config Vars  Open Nightscout Site  Turn on Plugins  Update Profile Settings", 
            "title": "New Loopers Variables"
        }, 
        {
            "location": "/nightscout/update_user/#step-1-login-to-heroku-settings-tab", 
            "text": "Login to your Heroku account , select the  Settings  tab near the top of the screen on your Heroku app.", 
            "title": "Step 1: Login to Heroku, Settings Tab"
        }, 
        {
            "location": "/nightscout/update_user/#step-2-editadd-config-vars", 
            "text": "Click on  Reveal Config Vars .  Scroll down the bottom of the Config Vars lines until you find the last blank one.  You are going to add several additional lines of config vars for Loop use; the DEVICESTATUS_ADVANCED and ENABLE lines are required, the others just make Nightscout more useful when Looping.              ENABLE  bridge loop pump iob cob basal careportal sage cage   (Note: If you are an existing NS user, you likely already have an ENABLE line in this section of Heroku. Don't add a new one. Simply find the existing ENABLE line, click on the little pencil icon to the right of it, and add the words shown on the ENABLE line below to the existing words already on the enable line.  Avoid duplicates. The remainder of the lines are likely going to be brand new additions to your Heroku settings.)    DEVICESTATUS_ADVANCED  true    PUMP_FIELDS  battery reservoir clock status    PUMP_RETRO_FIELDS  battery reservoir clock status    SHOW_FORECAST  loop    SHOW_PLUGINS  loop pump cob iob sage cage careportal    PUMP_ENABLE_ALERTS  true    PUMP_URGENT_BATT_U  30 (This is the pump battery percentage that will trigger a red, urgent alert in NS.)    PUMP_URGENT_BATT_V  1.25 (This is the pump battery voltage that will trigger a red, urgent alert in NS.)    PUMP_URGENT_RES  10 (This is the reservoir volume that will trigger a red, urgent alert in NS.)    PUMP_URGENT_CLOCK  30    LOOP_ENABLE_ALERTS  true    LOOP_WARN  20 (This is the minutes since Loop last successfully looped, the t1d will have a similar notification at this time through the Loop app.  This will be a yellow alert in NS.)    LOOP_URGENT  60 (Same as the alert above, but will be red in color and have a shorter snooze option.)", 
            "title": "Step 2: Edit/Add Config Vars"
        }, 
        {
            "location": "/nightscout/update_user/#step-3-open-your-ns-site", 
            "text": "Click on  Open App  in the top right corner of your Heroku site.", 
            "title": "Step 3: Open Your NS Site"
        }, 
        {
            "location": "/nightscout/update_user/#step-4-turn-on-plugins", 
            "text": "Click on the settings (those three horizontal lines in the upper right corner).  Now check that your basal render is selected to either default or icicle (personal preference for how the temp basals show as blue lines in NS site), check the boxes that you\u2019d like display pills in the SHOW PLUGINS (usually all of them), and then click save. If you have not authenticated your site previously, you may be prompted to provide your API Secret prior to Nightscout saving your changes.", 
            "title": "Step 4: Turn on Plugins"
        }, 
        {
            "location": "/nightscout/update_user/#step-5-update-profile-settings", 
            "text": "Double-check that your NS Profile settings are current and that you have a basal profile entered, if you want to see the temp basals that Loop is setting. The values in your Nightscout Profile settings will not impact or affect your Loop, but it is just nice to have them match up in the event you are looking at your data with an endocrinologist or retrospectively looking at data.", 
            "title": "Step 5: Update Profile Settings"
        }, 
        {
            "location": "/nightscout/update_user/#nightscout-version-update", 
            "text": "If you are new to Loop and haven\u2019t updated your NS site since before December 1, 2016, you will want to update your NS site. You can run either the \"master\" or \"dev\" branches of cgm-remote-monitor with Loop.  To check what version your Nightscout site is running, go to your Nightscout site and pull open the site settings by clicking on the three horizontal lines at the top right of the screen.  The version number is at the bottom.  Nightscout has a tool to help you update your Nightscout site and you can find the  directions using to the update tool here .  Simply put, the  Update tool  will look at your GitHub repository and check if your Nightscout code is old and needs updating.  You will have to be logged into your GitHub account in order for the tool to work, so do that before starting this process.     \nYou'll click on the green  Continue updating at GitHub  button, read the directions that will appear as a pop-up and then finish the update process.   Click the big green  Create pull request  button.     For most people, another screen will appear like shown in the screenshots below with a green  Able to merge  message. Fill in a title and click the button to create the pull request, and then you can  Merge pull request , and finally  Confirm merge .    However, for some of you may encounter a red error message  x Can't automatically merge  message. If you have that message, you may want to post in FB for help on resolving that error message before proceeding any further.                       Your cgm-remote-monitor repository is now up-to-date.  Nice work, and almost done.  If you don\u2019t have your Heroku set-up to automatically update when your repository is updated, you will have to go into your Heroku  Deploy  section and manually deploy your branch now that your repository has been updated.  Make sure you are connected to your GitHub cgm-remote-monitor repository.", 
            "title": "Nightscout Version Update"
        }, 
        {
            "location": "/nightscout/troublehoot/", 
            "text": "Setup Troubleshooting\n\u2301\n\n\nIf you have just tried to set up your Nightscout site and have problems with seeing all your data, please check out the information below.\n\n\nDexcom data not showing\n\u2301\n\n\nIf you are using a Dexcom system, and your data is not appearing in Nightscout, there are only a limited number of reasons for that. You should check your (1) Heroku settings and (2) Dexcom Share.\n\n\nNOTE: The #1 reason why BGs aren't showing is that you have mismatched password and user names in Heroku settings and Dexcom. Please see blue box below for that error.\n\n\nHeroku Settings\n\u2301\n\n\nLogin to your Heroku account and from within Heroku settings, click on the  \nReveal Config Vars\n\n\n\n\n\n\n\n\n\nNow from the \nConfig Vars\n area, check the following (see screenshot below for reference):\n\n\n\n\nYou must use the same \nBRIDGE_PASSWORD\n or \nBRIDGE_USER_NAME\n that your Dexcom mobile app is using.\n\n\nYou must have \nbridge\n and \ncareportal\n on the \nENABLE\n line (you can have other values there...but don't forget these two).\n\n\nIf you are outside the USA, you must add \nBRIDGE_SERVER\n set to \nEU\n in Heroku settings.\n\n\nYour \ncareportal\n must be one word in the \nENABLE\n line, sometimes autocorrect makes it two words.\n\n\nIf using \nmmol\n, make sure you have spelled that value correctly in the \nDISPLAY_UNITS\n.\n\n\n\n\n\n\n\n\n\n\n\nOne thing that can happen if you have an incorrect Dexcom login/password in Loop's CGM Share account settings and/or in your Nightscout BRIDGE settings is that Dexcom will lock your account...and you won't see CGM data in Nightscout. If you notice your CGM readings disappeared, but everything else is flowing...check your Heroku logs that are viewable by selecting \"View Logs\" from the drop-down menu underneath the \"More\" option. \n\n\n\n\n\n\n\n\n\nDo your logs have \"SSO authentication errors\" like in the red box highlighted above? If you do, then:\n\n\n\n\n\n\nDelete your share account entry from your Loop's CGM account settings...like you should have NO ENTRY in your share account settings WITHIN LOOP CGM SETTINGS.\n\n\n\n\n\n\nDelete your BRIDGE entries within Heroku settings.  Don't delete the rows, just delete the entries within BRIDGE_PASSWORD and BRIDGE_USER_NAME.\n\n\n\n\n\n\nWait 15 minutes and then follow the directions in the blue box below. It is important to wait the 15 minutes...the reason you can't log in right now is that your Dexcom account has a temporary lock from one of the passwords in step 1 or 2 being incorrect. The temporary lock will expire after 10-15 minutes of giving the account login a break from the incorrect logins. So, definitely wait or else you'll just keep prolonging the issue.\n\n\n\n\n\n\n\n\nAbout your Bridge password and user name\n\n\nThe \nBRIDGE_PASSWORD\n and \nBRIDGE_USER_NAME\n are NOT visible from within your Dexcom mobile app or online account. The values of them are what you entered into your Dexcom mobile app when you VERY FIRST logged into that app however long ago. If you have double-checked everything else that could be incorrect and BGs still aren't showing in Nightscout, then you likely have those Bridge values incorrect. To fix that, delete your Dexcom app (don't stop the session before deleting the app...just keep it going). Download the app again from the iPhone's App Store and login to the freshly-downloaded Dexcom app. \nTake note\n that deleting the app will not stop your session, your session will pick right back up once the transmitter pairs again. The \nBRIDGE_USER_NAME\n is not an email address. Use that exact same login now in your Heroku settings. You can leave your Loop's Share account info blank...you just need the transmitter ID going forward.\n\n\n\n\nDexcom Share\n\u2301\n\n\nMake sure you have Dexcom Share turned ON in your Dexcom app. In the Dexcom app's main screen, find the triangle made of dots. If the dots are grey, you do not have Share turned on. Tap the triangle, and follow the directions to add a follower (yourself if you don't have someone else you'd like to invite) and turn on Share.\n\n\n\n\n\n\n\n\n\nLoop data not showing\n\u2301\n\n\nIf your BG data is showing, but Loop data is not (like Loop pill is empty and carbs and boluses are not showing), please delete your Nightscout account in Loop settings area. Enter the information in freshly. Make sure to use \nhttps://\n to start the site URL. Make sure there is no trailing slash at the end of the URL. Make sure you have \nloop\n on the ENABLE line in Heroku settings.", 
            "title": "Setup Troubleshooting"
        }, 
        {
            "location": "/nightscout/troublehoot/#setup-troubleshooting", 
            "text": "If you have just tried to set up your Nightscout site and have problems with seeing all your data, please check out the information below.", 
            "title": "Setup Troubleshooting"
        }, 
        {
            "location": "/nightscout/troublehoot/#dexcom-data-not-showing", 
            "text": "If you are using a Dexcom system, and your data is not appearing in Nightscout, there are only a limited number of reasons for that. You should check your (1) Heroku settings and (2) Dexcom Share.  NOTE: The #1 reason why BGs aren't showing is that you have mismatched password and user names in Heroku settings and Dexcom. Please see blue box below for that error.", 
            "title": "Dexcom data not showing"
        }, 
        {
            "location": "/nightscout/troublehoot/#heroku-settings", 
            "text": "Login to your Heroku account and from within Heroku settings, click on the   Reveal Config Vars     Now from the  Config Vars  area, check the following (see screenshot below for reference):   You must use the same  BRIDGE_PASSWORD  or  BRIDGE_USER_NAME  that your Dexcom mobile app is using.  You must have  bridge  and  careportal  on the  ENABLE  line (you can have other values there...but don't forget these two).  If you are outside the USA, you must add  BRIDGE_SERVER  set to  EU  in Heroku settings.  Your  careportal  must be one word in the  ENABLE  line, sometimes autocorrect makes it two words.  If using  mmol , make sure you have spelled that value correctly in the  DISPLAY_UNITS .      One thing that can happen if you have an incorrect Dexcom login/password in Loop's CGM Share account settings and/or in your Nightscout BRIDGE settings is that Dexcom will lock your account...and you won't see CGM data in Nightscout. If you notice your CGM readings disappeared, but everything else is flowing...check your Heroku logs that are viewable by selecting \"View Logs\" from the drop-down menu underneath the \"More\" option.      Do your logs have \"SSO authentication errors\" like in the red box highlighted above? If you do, then:    Delete your share account entry from your Loop's CGM account settings...like you should have NO ENTRY in your share account settings WITHIN LOOP CGM SETTINGS.    Delete your BRIDGE entries within Heroku settings.  Don't delete the rows, just delete the entries within BRIDGE_PASSWORD and BRIDGE_USER_NAME.    Wait 15 minutes and then follow the directions in the blue box below. It is important to wait the 15 minutes...the reason you can't log in right now is that your Dexcom account has a temporary lock from one of the passwords in step 1 or 2 being incorrect. The temporary lock will expire after 10-15 minutes of giving the account login a break from the incorrect logins. So, definitely wait or else you'll just keep prolonging the issue.     About your Bridge password and user name  The  BRIDGE_PASSWORD  and  BRIDGE_USER_NAME  are NOT visible from within your Dexcom mobile app or online account. The values of them are what you entered into your Dexcom mobile app when you VERY FIRST logged into that app however long ago. If you have double-checked everything else that could be incorrect and BGs still aren't showing in Nightscout, then you likely have those Bridge values incorrect. To fix that, delete your Dexcom app (don't stop the session before deleting the app...just keep it going). Download the app again from the iPhone's App Store and login to the freshly-downloaded Dexcom app.  Take note  that deleting the app will not stop your session, your session will pick right back up once the transmitter pairs again. The  BRIDGE_USER_NAME  is not an email address. Use that exact same login now in your Heroku settings. You can leave your Loop's Share account info blank...you just need the transmitter ID going forward.", 
            "title": "Heroku Settings"
        }, 
        {
            "location": "/nightscout/troublehoot/#dexcom-share", 
            "text": "Make sure you have Dexcom Share turned ON in your Dexcom app. In the Dexcom app's main screen, find the triangle made of dots. If the dots are grey, you do not have Share turned on. Tap the triangle, and follow the directions to add a follower (yourself if you don't have someone else you'd like to invite) and turn on Share.", 
            "title": "Dexcom Share"
        }, 
        {
            "location": "/nightscout/troublehoot/#loop-data-not-showing", 
            "text": "If your BG data is showing, but Loop data is not (like Loop pill is empty and carbs and boluses are not showing), please delete your Nightscout account in Loop settings area. Enter the information in freshly. Make sure to use  https://  to start the site URL. Make sure there is no trailing slash at the end of the URL. Make sure you have  loop  on the ENABLE line in Heroku settings.", 
            "title": "Loop data not showing"
        }, 
        {
            "location": "/nightscout/mlab_cleanup/", 
            "text": "Nightscout Issues\n\u2301\n\n\nThe free Nightscout we use also depends on a free database from mLab.  The free database only has so much room...500 MB to be specific.  After a period of time (it will vary, but usually on the order of months), your mLab database could reach its free limits.  When that happens, your NS site may stop showing data properly.  For example, you may notice your Share Bridge will not pull data and your site will be \u201cstale\u201d.\n\n\nThe good news?  Loop can still run just fine until you repair your mLab database.  The bad news?  You just won\u2019t be able to remotely monitor Loop through NS until you clear up some storage space in mLab.\n\n\n\n\nThese steps \nWILL BE NEEDED BY EVERYONE AT SOME POINT IN TIME\n...so please don't ignore these troubleshooting steps. If you see anything suddenly strange about your NS site after it had been working fine, start with these steps below. \n\n\n\n\nmLab Cleanup\n\u2301\n\n\nThere are two steps to getting your Nightscout site running again. You will need to do both steps.  The first step clears out some space in your database.  The second step consolidates the remaining data into a more compact space, and therefore makes the data take up less room overall in your database. You need to do both steps to help keep your NS humming along.\n\n\nIf you'd like a video demonstration of the steps needed to do this...here ya go. The video uses just a slightly different way to do Step 1...either way is totally fine. Click the image or click this \nNightscout Cleanup link\n...you'll end up at the same place.\n\n\n\n\n\n\n\n\n\nStep 1: Delete Data\n\u2301\n\n\nGo to your Nightscout site's settings (the three horizontal bars in the upper right of your Nightscout site) and open your Admin Tools for the site.  Click on the buttons to \"Delete all documents\" in your Clean Mongo status database section of the Admin Tools.  For good measure, also click on the buttons for removing future items as well.  \n\n\n\n\n\n\n\n\n\nStep 2: Repair Database\n\u2301\n\n\nNow that you cleared out some database space, we can now make the database more efficient by \"repairing\" the database.\n\n\nTo begin the repair process, click on the mlab link in your Heroku site control panel.\n\n\n\n\n\n\n\n\n\nThen click on the \nTools\n tab in the screen that opens.  Click on the \ncommands\n button and then select the \nrepairDatabase\n from the dropdown menu of available commands.  At the bottom of the screen, select the \nRun Command\n button. \n\n\n\n\n\n\n\n\n\nAfter a short time, you should get a return message of \"ok\" at the bottom of the command menu box.  If you failed to clear out your Mongo status database before running this command, you will likely not get a successful repair and instead your pointer wheel will just keep spinning.  Make sure you first clean out the database section as described above with your Nightscout Admin Tools.\n\n\nYou can verify that your database housekeeping was successful by returning to your NS site and waiting for the next Loop upload.  You should see all your information back in with the next Loop run.", 
            "title": "NS Stopped Working"
        }, 
        {
            "location": "/nightscout/mlab_cleanup/#nightscout-issues", 
            "text": "The free Nightscout we use also depends on a free database from mLab.  The free database only has so much room...500 MB to be specific.  After a period of time (it will vary, but usually on the order of months), your mLab database could reach its free limits.  When that happens, your NS site may stop showing data properly.  For example, you may notice your Share Bridge will not pull data and your site will be \u201cstale\u201d.  The good news?  Loop can still run just fine until you repair your mLab database.  The bad news?  You just won\u2019t be able to remotely monitor Loop through NS until you clear up some storage space in mLab.   These steps  WILL BE NEEDED BY EVERYONE AT SOME POINT IN TIME ...so please don't ignore these troubleshooting steps. If you see anything suddenly strange about your NS site after it had been working fine, start with these steps below.", 
            "title": "Nightscout Issues"
        }, 
        {
            "location": "/nightscout/mlab_cleanup/#mlab-cleanup", 
            "text": "There are two steps to getting your Nightscout site running again. You will need to do both steps.  The first step clears out some space in your database.  The second step consolidates the remaining data into a more compact space, and therefore makes the data take up less room overall in your database. You need to do both steps to help keep your NS humming along.  If you'd like a video demonstration of the steps needed to do this...here ya go. The video uses just a slightly different way to do Step 1...either way is totally fine. Click the image or click this  Nightscout Cleanup link ...you'll end up at the same place.", 
            "title": "mLab Cleanup"
        }, 
        {
            "location": "/nightscout/mlab_cleanup/#step-1-delete-data", 
            "text": "Go to your Nightscout site's settings (the three horizontal bars in the upper right of your Nightscout site) and open your Admin Tools for the site.  Click on the buttons to \"Delete all documents\" in your Clean Mongo status database section of the Admin Tools.  For good measure, also click on the buttons for removing future items as well.", 
            "title": "Step 1: Delete Data"
        }, 
        {
            "location": "/nightscout/mlab_cleanup/#step-2-repair-database", 
            "text": "Now that you cleared out some database space, we can now make the database more efficient by \"repairing\" the database.  To begin the repair process, click on the mlab link in your Heroku site control panel.     Then click on the  Tools  tab in the screen that opens.  Click on the  commands  button and then select the  repairDatabase  from the dropdown menu of available commands.  At the bottom of the screen, select the  Run Command  button.      After a short time, you should get a return message of \"ok\" at the bottom of the command menu box.  If you failed to clear out your Mongo status database before running this command, you will likely not get a successful repair and instead your pointer wheel will just keep spinning.  Make sure you first clean out the database section as described above with your Nightscout Admin Tools.  You can verify that your database housekeeping was successful by returning to your NS site and waiting for the next Loop upload.  You should see all your information back in with the next Loop run.", 
            "title": "Step 2: Repair Database"
        }, 
        {
            "location": "/nightscout/remote-overrides/", 
            "text": "Setup Remote Overrides\n\u2301\n\n\n\n\nPLEASE READ\n\n\nRemote overrides in Loop is in its initial testing. \nThis is by no means bug-free.\n If you choose to do this, there are some special setup steps for deploying a special branch of Nightscout and using a testing branch of Loop called \"remote-overrides\". If you do not feel you are capable of doing these special steps right now, please wait until some more testing is done by others. This page is created only to help answer questions in bulk...NOT AS AN ANNOUNCEMENT THAT REMOTE OVERRIDES IS PRIME-TIME READY. REPEAT: This is still an initial testing branch...if things work out though, the only part of these directions that will change is Step 3: Update Nightscout Site will be slightly different procedure, but will still need to be done. You'd still need to update your Loop, you'd still need to create a key for Apple Push Notification services.\n\n\n\n\nYou can now use your Nightscout site to remotely set and cancel your override presets in your Loop app.\n\n\nWhat?! Yes, really...you can set/cancel an override remotely for your child's Loop.\n\n\nHere's the breaking information on this:\n\n\n\n\n\n\nYou will need to update your Loop app. \n\n\n\n\n\n\nYou will need to create a Key for an Apple Push Notifications service (APNs)\n\n\n\n\n\n\nYou will then need to update your Nightscout site and add some \"config vars\" lines in your Heroku settings.\n\n\n\n\n\n\nStep 1: Updating Loop for remote-overrides\n\u2301\n\n\nRemote overrides are in dev branch now (as of October 13th), so you'll have to update your Loop to use this upated dev branch if you want to get this feature working.  Be sure to review all the steps for updating your Loop app \nhere\n.\n\n\nStep 2: Apple Push Notifications\n\u2301\n\n\nThe next part of this will help your Loop app give permissions to your Nightscout site to remotely interact with it.\n\n1. Login to your \nApple developer account\n with the Apple ID associated with your developer team that you used to sign your Loop app.\n\n2. Click on \"Certificates, Indentifiers \n Profiles\" and then, on the next page, click on \"Keys\" (located on the left-hand column). Click on the blue \"Create a new key\" \nOR\n the \"+\" icon to add a new key. \n\n\n\n\n\n\n\n\n\n\n3. In the form that appears, click the checkbox for enabling \"Apple Push Notifications service (APNs)\" and enter a name for the key such as \"Nightscout\". Then click the \"Continue\" button in the upper right of the screen.\n\n\n\n\n\n\n\n\n\n\n4. In the screen that follows, click the blue \"Register\" button.\n\n\n\n\n\n\n\n\n\n\n5. In the screen that follows, click the blue \"Download\" button. This step will download a file with a name that starts with \"AuthKey\" and ends with \".p8\".\n\n\n\n\n\n\n\n\n\n\n6. Find your AuthKey download in your downloads folder. Double-click to open it and you will be presented a message asking how you'd like to open it. Click on \"Choose Application...\" and then select \"TextEdit\" as your application to open it with.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7. When the file opens, it will look similar to the screenshot below. In a few minutes, after we do a few other steps first, we will need to highlight \nALL OF THE CONTENTS\n of that file and copy it because we will be pasting it in Heroku. Yes, allllll of the contents. So, easiest way is to click inside that file and then press \ncommand-a\n to highlight all the text and then \ncommand-c\n to copy it all to the clipboard. You don't have to do it right now...just keep that window open in the background for now until we need it a little further down. Then we will copy all that text.\n\n\n\n\n\n\n\n\n\n\n\nStep 3: Update Nightscout site\n\u2301\n\n\nThis step may take some of you into uncomfortable territory just because it looks weird, but we need to use a special branch of Nightscout for now to test the remote overrides features. Eventually, this special branch should be merged into the regular Nightscout repository on GitHub, but for testing purposes it is separate for now. Just keep that in mind...this is a temporary situation. And these instructions will change when that merge happens...likely in a few days or so.\n\n\nTo get this new branch to your GitHub's cgm-remote-monitor, we need to do some special steps. At some point in this process, you may be asked for your GitHub login information if you have never cloned to your computer before. \n\n\n\n\n\n\nOpen Terminal app in your computer and enter this command, \nreplacing \"your-account\" with your actual account name\n: \ncd \n git clone https://github.com/your-account/cgm-remote-monitor.git\n  This command makes a copy of your GitHub repository onto your computer's root directory.  \nNote:\n This is your GitHub account name.  Be sure to include that, not your Heroku account name.\n\n\n\n\n\n\nNext command is \ncd cgm-remote-monitor\n  This command changes into the directory we just cloned ont your computer.\n\n\n\n\n\n\nNext command is \ngit fetch https://github.com/ps2/cgm-remote-monitor remote-loop-overrides:remote-loop-overrides\n  This command grabs a copy of Pete's test branch of Nightscout, called remote-loop-overrides, that we will need to use.\n\n\n\n\n\n\nNext command is \ngit checkout remote-loop-overrides\n  This command switches the local clone to the new branch.\n\n\n\n\n\n\nNext command is \ngit push --set-upstream origin remote-loop-overrides\n  This command will push your new branch up to your online GitHub account so we can use it in Heroku.\n\n\n\n\n\n\nLogin to your Heroku account\n,  Find your \"Deploy\" tab and click it. Now scroll to the very bottom of the page and find the Manual Deploy section. Choose \"remote-loop-overrides\" in the drop down menu of the branches and then press the black deploy button. (If you don't have a black deploy button...then click on the Github icon to connect to your Github account and cgm-remote-monitor repo.)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7. Final step is to add the variables needed in Heroku settings. Select the \nSettings\n tab near the top of the screen on your Heroku app and then click on \nReveal Config Vars\n.  \n\n\n\n\n\n\n\n\n\n\nScroll down the bottom of the Config Vars lines until you find the last blank one.  You are going to add three new rows of config vars for remote overrides as shown below:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKEY\n\n\nVALUE\n\n\n\n\n\n\n\n\n\n\nLOOP_APNS_KEY\n\n\nenter ENTIRE contents of the downloaded .ps file including the BEGIN and END lines. Here's where you can use the \ncommand-a\n and \ncommand-c\n to hightlight and copy all the text in that file so you can paste it into Heroku here for this new variable you are creating.\n\n\n\n\n\n \n\n\n\n\n\n\nLOOP_APNS_KEY_ID\n\n\nstring of characters on the .ps download file immediately following the underscore (  _  ), or you can get it from your saved key in your developer account as shown next step, too\n\n\n\n\n\n \n\n\n\n\n\n\n\n\nLOOP_DEVELOPER_TEAM_ID\n\n\nget this value from Loop app signing or in your developer account's top right corner under your name\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\nWhen executed properly, you should have something that looks like this for your three new variables that you added:\n\n\n\n\n\n\n\n\n\n\n\nStep 4: FAQs on Remote Overrides\n\u2301\n\n\nDon't forget to read Loopdocs pages about how regular overrides work. For remote overrides in particular:\n\n\n\n\nCan I set different override in Nighscout than I have programmed into Loop app?\n Answer: No. You will only be able to enact override presets already programmed into the Loop app.\n\n\nIf I didn't start the override in Nightscout (it was started in Loop itself), can I still use Nightscout to cancel it?\n Answer: Yes. You can cancel a Loop-set override with a Nightscout-set cancel \"temporary override\" command in careportal.\n\n\n\"Can I override a Loop-set override with a Nightscout-set override?\"\n Answer: Yes. \n\n\nIf I have multiple Nightscout sites because I have multiple kiddos with T1D looping, do I need multiple APNs Keys?\n Answer: No. If you have multiple kids looping, you can use the one APNs key in each of their Nightscout sites. \n\n\nWhat if I see glitches?\n Answer: report it in Zulipchat for now \nhere\n, but do be aware that Nightscout still needs some work. In particular, sometimes the grey bars showing where an override is active can \"leave a residue\", even after you cancel them, until you refresh the display.\n\n\nHow can I tell if it worked?\n Answer: You should see your override pill in Nightscout, with the NEXT Loop cycle, reflecting that the desired override action took place. If you are near the Loop app, you should see the new override within less than 30 seconds or so.\n\n\n\n\nStep 5: Using Remote Overrides\n\u2301\n\n\nThere are three ways you can trigger your override presets remotely; careportal, Shortcuts, and IFTTT.\n\n\nCareportal\n\u2301\n\n\nTo use remote overrides, I'm assuming you've setup your Nightscout site according to the directions \nhere\n in Loopdocs. Especially the part about your ENABLE line including \"override careportal loop\" (in addition to other variables you'd be interested in). You'll also need to have your site authenticated so that your careportal is active to send remote overrides. You can authenticate your site by selecting the three horizontal lines in the upper right corner of your Nightscout site and scrolling to the bottom of the settings. There's an \"authenicate\" link at the very bottom. Once authenticated by entering your API Secret, then there will be a \n+\n in the upper right corner of your site. That is your careportal. Tap the careportal \n+\n and then scroll down in the \"event type\" menu to find \"Temporary Override\". Within there you will find all your Loop override presets already loaded for you.\n\n\n\n\n\n\n\n\n\n\n\nThe Looper will see a banner notification that an override has been set (or canceled, as the case may be).\n\n\n\n\n\n\n\n\n\n\n\nCanceling an override through Nightscout careportal is as simple as selecting the event type \"Temporary Override Cancel\" and submitting. \n\n\nShortcuts\n\u2301\n\n\nIf you want to make your life SUPER AMAZING, check out using the iPhone's Shortcuts app. The Shortcuts app is for making little automations (like mini apps) that can integrate parts of your life. In this case, we've written a couple shortcuts for you that integrate Loop overrides with Nightscout. \n\n\nImportant note: Before you click that download below...save some trouble. Download the Shortcuts app if you don't have it yet and choose to run any shortcut from the Gallery. It can be the laundry timer...I don't care, just pick one and run it.  THEN go to download the shortcut of your choice below. The shortcuts that aren't run through the Gallery option are called \"untrusted\". And you need a slider in your iPhone to trust the \"untrusted\" shortcuts you would be downloading here. But...in lovely iOS glitch...that slider doesn't appear unless you've run a trusted shortcut first. So, run one now. Then you'll have the slider in iPhone Settings, Shortcuts app to turn \"Allow Untrusted Shortcuts\" on when you will see a message \"This shortcut cannot be opened because your Shortcuts security system settings don't allow untrusted shortcuts.\"\n\n\nClick these links on your iphone and you'll be prompted to download the premade shortcuts (assuming you open the links in Safari browser in iPhone):\n\n\nLoop Shortcut...includes Set Remote Override, Cancel Override, Loop Troubleshooting Tips, Quick Text options, Manual BG entry, Bookmarks to websites, etc.\n\n\nAnd if you want to save one click to get to these one functions more directly: these shortcuts are simplified to offer only one function:\n\n\nSet Remote Override only shortcut\n\n\nCancel Override only shortcut\n\n\nA couple notes about these shortcuts:\n\n\n\n\nYou will need iOS 13 on the phone you'd like to trigger these shortcuts from. Looper's phone can still be lower than iOS 13, but your phone as the shortcut user would need iOS 13.\n\n\nYou need to open those links in the Safari browser on your iPhone. When you do that click the button to get the shortcut. Then wait a bit, and the shortcut's inner guts will be there...scroll ALL the way down to the bottom to click the button to save the untrusted shortcut.\n\n\nWhen a remote override is set properly, you'll see an \"ok\" message displayed. If there is an error, you'll see an error message. Most errors will be that you have an API secret wrong (make sure there isn't a space at the end of you API Secret that you don't see) or you failed to do the steps to setup NS and update your Loop app as described in steps 1-3 above.\n\n\nYou can absolutely customize these bits and pieces within the shortcut. Change the text messages, change the links...totally up to you.\n\n\n\n\nIFTTT\n\u2301\n\n\nIf you want to walk uphill both ways in the snow carrying bags of uneven groceries, you can also set overrides remotely by \nsetting up IFTTT\n, too.\n\n\nStep 6: Known Issues\n\u2301\n\n\nJust a brief mention so you are aware:\n\n\n\n\nThe override pill will display information about what override is currently active in the Looper's phone. BUT, there can be a slight delay as that information is only transmitted every 5 minutes at best (it is tied to Loop runs and Nightscout upload events in Loop). So, wait 5 minutes to see that the information has gone through a refresh cycle before assuming the override message failed to enact.\n\n\nWhen you add a new override preset in Loop, that preset has to be uploaded to Nightscout before it will be available as a remote override. To trigger that upload, you can simply enact that new override for a few seconds and turn it off again. that will get the Nightscout upload going.", 
            "title": "Remote Overrides"
        }, 
        {
            "location": "/nightscout/remote-overrides/#setup-remote-overrides", 
            "text": "PLEASE READ  Remote overrides in Loop is in its initial testing.  This is by no means bug-free.  If you choose to do this, there are some special setup steps for deploying a special branch of Nightscout and using a testing branch of Loop called \"remote-overrides\". If you do not feel you are capable of doing these special steps right now, please wait until some more testing is done by others. This page is created only to help answer questions in bulk...NOT AS AN ANNOUNCEMENT THAT REMOTE OVERRIDES IS PRIME-TIME READY. REPEAT: This is still an initial testing branch...if things work out though, the only part of these directions that will change is Step 3: Update Nightscout Site will be slightly different procedure, but will still need to be done. You'd still need to update your Loop, you'd still need to create a key for Apple Push Notification services.   You can now use your Nightscout site to remotely set and cancel your override presets in your Loop app.  What?! Yes, really...you can set/cancel an override remotely for your child's Loop.  Here's the breaking information on this:    You will need to update your Loop app.     You will need to create a Key for an Apple Push Notifications service (APNs)    You will then need to update your Nightscout site and add some \"config vars\" lines in your Heroku settings.", 
            "title": "Setup Remote Overrides"
        }, 
        {
            "location": "/nightscout/remote-overrides/#step-1-updating-loop-for-remote-overrides", 
            "text": "Remote overrides are in dev branch now (as of October 13th), so you'll have to update your Loop to use this upated dev branch if you want to get this feature working.  Be sure to review all the steps for updating your Loop app  here .", 
            "title": "Step 1: Updating Loop for remote-overrides"
        }, 
        {
            "location": "/nightscout/remote-overrides/#step-2-apple-push-notifications", 
            "text": "The next part of this will help your Loop app give permissions to your Nightscout site to remotely interact with it. \n1. Login to your  Apple developer account  with the Apple ID associated with your developer team that you used to sign your Loop app. \n2. Click on \"Certificates, Indentifiers   Profiles\" and then, on the next page, click on \"Keys\" (located on the left-hand column). Click on the blue \"Create a new key\"  OR  the \"+\" icon to add a new key.      \n3. In the form that appears, click the checkbox for enabling \"Apple Push Notifications service (APNs)\" and enter a name for the key such as \"Nightscout\". Then click the \"Continue\" button in the upper right of the screen.     \n4. In the screen that follows, click the blue \"Register\" button.     \n5. In the screen that follows, click the blue \"Download\" button. This step will download a file with a name that starts with \"AuthKey\" and ends with \".p8\".     \n6. Find your AuthKey download in your downloads folder. Double-click to open it and you will be presented a message asking how you'd like to open it. Click on \"Choose Application...\" and then select \"TextEdit\" as your application to open it with.         \n7. When the file opens, it will look similar to the screenshot below. In a few minutes, after we do a few other steps first, we will need to highlight  ALL OF THE CONTENTS  of that file and copy it because we will be pasting it in Heroku. Yes, allllll of the contents. So, easiest way is to click inside that file and then press  command-a  to highlight all the text and then  command-c  to copy it all to the clipboard. You don't have to do it right now...just keep that window open in the background for now until we need it a little further down. Then we will copy all that text.", 
            "title": "Step 2: Apple Push Notifications"
        }, 
        {
            "location": "/nightscout/remote-overrides/#step-3-update-nightscout-site", 
            "text": "This step may take some of you into uncomfortable territory just because it looks weird, but we need to use a special branch of Nightscout for now to test the remote overrides features. Eventually, this special branch should be merged into the regular Nightscout repository on GitHub, but for testing purposes it is separate for now. Just keep that in mind...this is a temporary situation. And these instructions will change when that merge happens...likely in a few days or so.  To get this new branch to your GitHub's cgm-remote-monitor, we need to do some special steps. At some point in this process, you may be asked for your GitHub login information if you have never cloned to your computer before.     Open Terminal app in your computer and enter this command,  replacing \"your-account\" with your actual account name :  cd   git clone https://github.com/your-account/cgm-remote-monitor.git   This command makes a copy of your GitHub repository onto your computer's root directory.   Note:  This is your GitHub account name.  Be sure to include that, not your Heroku account name.    Next command is  cd cgm-remote-monitor   This command changes into the directory we just cloned ont your computer.    Next command is  git fetch https://github.com/ps2/cgm-remote-monitor remote-loop-overrides:remote-loop-overrides   This command grabs a copy of Pete's test branch of Nightscout, called remote-loop-overrides, that we will need to use.    Next command is  git checkout remote-loop-overrides   This command switches the local clone to the new branch.    Next command is  git push --set-upstream origin remote-loop-overrides   This command will push your new branch up to your online GitHub account so we can use it in Heroku.    Login to your Heroku account ,  Find your \"Deploy\" tab and click it. Now scroll to the very bottom of the page and find the Manual Deploy section. Choose \"remote-loop-overrides\" in the drop down menu of the branches and then press the black deploy button. (If you don't have a black deploy button...then click on the Github icon to connect to your Github account and cgm-remote-monitor repo.)       \n7. Final step is to add the variables needed in Heroku settings. Select the  Settings  tab near the top of the screen on your Heroku app and then click on  Reveal Config Vars .       \nScroll down the bottom of the Config Vars lines until you find the last blank one.  You are going to add three new rows of config vars for remote overrides as shown below:        KEY  VALUE      LOOP_APNS_KEY  enter ENTIRE contents of the downloaded .ps file including the BEGIN and END lines. Here's where you can use the  command-a  and  command-c  to hightlight and copy all the text in that file so you can paste it into Heroku here for this new variable you are creating.        LOOP_APNS_KEY_ID  string of characters on the .ps download file immediately following the underscore (  _  ), or you can get it from your saved key in your developer account as shown next step, too         LOOP_DEVELOPER_TEAM_ID  get this value from Loop app signing or in your developer account's top right corner under your name          When executed properly, you should have something that looks like this for your three new variables that you added:", 
            "title": "Step 3: Update Nightscout site"
        }, 
        {
            "location": "/nightscout/remote-overrides/#step-4-faqs-on-remote-overrides", 
            "text": "Don't forget to read Loopdocs pages about how regular overrides work. For remote overrides in particular:   Can I set different override in Nighscout than I have programmed into Loop app?  Answer: No. You will only be able to enact override presets already programmed into the Loop app.  If I didn't start the override in Nightscout (it was started in Loop itself), can I still use Nightscout to cancel it?  Answer: Yes. You can cancel a Loop-set override with a Nightscout-set cancel \"temporary override\" command in careportal.  \"Can I override a Loop-set override with a Nightscout-set override?\"  Answer: Yes.   If I have multiple Nightscout sites because I have multiple kiddos with T1D looping, do I need multiple APNs Keys?  Answer: No. If you have multiple kids looping, you can use the one APNs key in each of their Nightscout sites.   What if I see glitches?  Answer: report it in Zulipchat for now  here , but do be aware that Nightscout still needs some work. In particular, sometimes the grey bars showing where an override is active can \"leave a residue\", even after you cancel them, until you refresh the display.  How can I tell if it worked?  Answer: You should see your override pill in Nightscout, with the NEXT Loop cycle, reflecting that the desired override action took place. If you are near the Loop app, you should see the new override within less than 30 seconds or so.", 
            "title": "Step 4: FAQs on Remote Overrides"
        }, 
        {
            "location": "/nightscout/remote-overrides/#step-5-using-remote-overrides", 
            "text": "There are three ways you can trigger your override presets remotely; careportal, Shortcuts, and IFTTT.", 
            "title": "Step 5: Using Remote Overrides"
        }, 
        {
            "location": "/nightscout/remote-overrides/#careportal", 
            "text": "To use remote overrides, I'm assuming you've setup your Nightscout site according to the directions  here  in Loopdocs. Especially the part about your ENABLE line including \"override careportal loop\" (in addition to other variables you'd be interested in). You'll also need to have your site authenticated so that your careportal is active to send remote overrides. You can authenticate your site by selecting the three horizontal lines in the upper right corner of your Nightscout site and scrolling to the bottom of the settings. There's an \"authenicate\" link at the very bottom. Once authenticated by entering your API Secret, then there will be a  +  in the upper right corner of your site. That is your careportal. Tap the careportal  +  and then scroll down in the \"event type\" menu to find \"Temporary Override\". Within there you will find all your Loop override presets already loaded for you.      The Looper will see a banner notification that an override has been set (or canceled, as the case may be).      Canceling an override through Nightscout careportal is as simple as selecting the event type \"Temporary Override Cancel\" and submitting.", 
            "title": "Careportal"
        }, 
        {
            "location": "/nightscout/remote-overrides/#shortcuts", 
            "text": "If you want to make your life SUPER AMAZING, check out using the iPhone's Shortcuts app. The Shortcuts app is for making little automations (like mini apps) that can integrate parts of your life. In this case, we've written a couple shortcuts for you that integrate Loop overrides with Nightscout.   Important note: Before you click that download below...save some trouble. Download the Shortcuts app if you don't have it yet and choose to run any shortcut from the Gallery. It can be the laundry timer...I don't care, just pick one and run it.  THEN go to download the shortcut of your choice below. The shortcuts that aren't run through the Gallery option are called \"untrusted\". And you need a slider in your iPhone to trust the \"untrusted\" shortcuts you would be downloading here. But...in lovely iOS glitch...that slider doesn't appear unless you've run a trusted shortcut first. So, run one now. Then you'll have the slider in iPhone Settings, Shortcuts app to turn \"Allow Untrusted Shortcuts\" on when you will see a message \"This shortcut cannot be opened because your Shortcuts security system settings don't allow untrusted shortcuts.\"  Click these links on your iphone and you'll be prompted to download the premade shortcuts (assuming you open the links in Safari browser in iPhone):  Loop Shortcut...includes Set Remote Override, Cancel Override, Loop Troubleshooting Tips, Quick Text options, Manual BG entry, Bookmarks to websites, etc.  And if you want to save one click to get to these one functions more directly: these shortcuts are simplified to offer only one function:  Set Remote Override only shortcut  Cancel Override only shortcut  A couple notes about these shortcuts:   You will need iOS 13 on the phone you'd like to trigger these shortcuts from. Looper's phone can still be lower than iOS 13, but your phone as the shortcut user would need iOS 13.  You need to open those links in the Safari browser on your iPhone. When you do that click the button to get the shortcut. Then wait a bit, and the shortcut's inner guts will be there...scroll ALL the way down to the bottom to click the button to save the untrusted shortcut.  When a remote override is set properly, you'll see an \"ok\" message displayed. If there is an error, you'll see an error message. Most errors will be that you have an API secret wrong (make sure there isn't a space at the end of you API Secret that you don't see) or you failed to do the steps to setup NS and update your Loop app as described in steps 1-3 above.  You can absolutely customize these bits and pieces within the shortcut. Change the text messages, change the links...totally up to you.", 
            "title": "Shortcuts"
        }, 
        {
            "location": "/nightscout/remote-overrides/#ifttt", 
            "text": "If you want to walk uphill both ways in the snow carrying bags of uneven groceries, you can also set overrides remotely by  setting up IFTTT , too.", 
            "title": "IFTTT"
        }, 
        {
            "location": "/nightscout/remote-overrides/#step-6-known-issues", 
            "text": "Just a brief mention so you are aware:   The override pill will display information about what override is currently active in the Looper's phone. BUT, there can be a slight delay as that information is only transmitted every 5 minutes at best (it is tied to Loop runs and Nightscout upload events in Loop). So, wait 5 minutes to see that the information has gone through a refresh cycle before assuming the override message failed to enact.  When you add a new override preset in Loop, that preset has to be uploaded to Nightscout before it will be available as a remote override. To trigger that upload, you can simply enact that new override for a few seconds and turn it off again. that will get the Nightscout upload going.", 
            "title": "Step 6: Known Issues"
        }, 
        {
            "location": "/nightscout/ifttt/", 
            "text": "IFTTT Integration\n\u2301\n\n\nIf This, Then That (IFTTT) is a useful Nightscout integration.  By using IFTTT, you can have single button presses on your iPhone that will set an override, log a cannula change, log a sensor change and much more. \n\n\nStep 1: Get your API Secret Hash\n\u2301\n\n\nFirst we need to gather one thing called your \"hashed API Secret\". In your internet browser, open a \"console\" window while viewing your Nightscout site.  Make sure you have \"authenticated\" your site by using your API secret in the Nightscout settings area (hint: if you see a little padlock in the upper left corner of the site, you haven't authenticated it).  Refresh the site and your hashed secret key will be shown as \"apisecrethash: \"xxxxxxxxxx...\"\"  \n\n\nFor Safari users on Mac\n, you can open the console window by selecting \"Develop\" from the Safari top menu, and then \"Show Page Source\" (if you do not see \"Develop\" in the top menu, activate it by going to Safari \n Preferences... \n Advanced, and checking the \"Show Develop menu in menu bar\" option).  If you're having problems seeing the apisecrethash, click the little grey triangle next to the \"status isAuthenticated\" line and the objects below it will display (see screenshot).  Your hashed API secret can be copied and pasted from that line, as shown below.  Save that somewhere easy to get to again, because you will be using it later.\n\n\n\n\n\n\n\n\n\nFor Chrome users\n, the console window is found through the View \n Developer \n View Source. Click on the Console tab and scroll to find the \"status isAuthenticated\" row to find your apisecrethash. Copy your API hash to somewhere you can retreive it again, we will be copy/pasting it in Step 2.\n\n\n\n\n\n\n\n\n\nStep 2: Create your \"Applets\"\n\u2301\n\n\nIFTTT calls their little actions that you'll create an \"applet\". I have no idea why. But, I will go along and use their terminology so we are all consistent. We are basically interested in creating applets that will be buttons on your phone to do cool things in Nightscout. So, you'll have a button that will log when you changed your sensor last...letting you see in Nightscout easily just how old a sensor is at any given time. Or you can create a button that will turn on an \"exercise\" override that you already programmed into your kid's Loop app. So, let's make our first applet (aka button).\n\n\n\n\nGet an \nIFTTT account\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLogin to your IFTTT.com account and select click \nthis link\n to get to the page for creating your first \"New Applet\". (You can also get to this Applet creation page by selecting your Account icon in the upper right of the IFTTT website, then clicking on \"Create\".)\n\n\n\n\n\n\nIn the screen that appears, click on the black \"+this\" part of the screen\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the next screen, type \"button\" in the search field and then click on the red box labelled \"ButtonWidget\"\n\n\n\n\n\n\n\n\n\n\n\n\n\nConnect the button widget by clicking on the large black\"connect\" button twice, once on the main screen and then second on the pop-up window that will appear immediately after that. (You will only have to \"connect\" the widgets for the first applet you make.  After that the widgets will already connected to your IFTTT account.)\n\n\n\n\n\n\n\n\n\n\n\n\n\nClick on the large red \"button press\" box \n\n\n\n\n\n\n\n\n\n\n\n\n\nClick on the black \"+that\" text\n\n\n\n\n\n\n\n\n\n\n\n\n\nEnter \"Webhooks\" in the search field and click on the Webhooks app\n\n\n\n\n\n\n\n\n\n\n\n\n\nConnect the Webhooks app\n\n\n\n\n\n\n\n\n\n\n\n\n\nSelect the blue \"Make a Web Request\" box\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow you will have a blank web request template to complete.  Screenshot below is an example of a completed recipe for eating soon IFTTT action. There are four parts you will need to fill in, and they are described below the screenshot.\n\n\n\n\n\n\n\n\n\n\n\n\n\nURL\n\n\nhttps://yoursite.herokuapp.com/api/v1/treatments.json\n (for all IFTTT recipes that are NOT remote overrides...so things like cannula changes, sensor changes, pump battery changes, etc.)\n\nChange the \"yoursite\" to your actual site's info.\n\n\n\n\n\n\nMethod\n\n\nThe method will be \nPOST\n\n\n\n\n\n\nContent Type\n\n\nThe content type will be \napplication/json\n. \n\n\n\n\n\n\nBody\n\n\nThe content of the body will depend on the action that you would like this particular button press to perform. While many recipes are available, any recipe that log carbs to NS will only display the carbs in Nightscout...Loop will not \"use\" those carbs in treatment or prediction math. The display of carbs in NS though may still be helpful for remote care givers to leave an indication that a low is being noticed and treated.  Some sample content for actions that may be useful in Loop:\n\n\nPump Site Change\n\n{\"enteredBy\": \"IFTTT-button\", \"eventType\": \"Site Change\", \"duration\": 0, \"secret\": \"your_hashed_api_goes_here!!!\"}\n\n\nCGM Sensor Start\n\n{\"enteredBy\": \"IFTTT-button\", \"eventType\": \"Sensor Start\", \"duration\": 0, \"secret\": \"your_hashed_api_goes_here!!!\"}\n\n\nNote\n\n{\"enteredBy\": \"IFTTT-button\", \"eventType\": \"Note\", \"notes\": \"Hi mom, please don't text me for a bit.  I'm taking a test.\", \"secret\": \"your_hashed_api_goes_here!!!\"}\n\n\n\n\n\n\nSpecial note for IFTTT to set a Remote Override with dev branch\n\n\nTriggering a remote override with IFTTT takes a couple considerations;\n\n1. You have followed \nthe directions for setting up remote overrides\n in Nightscout already.\n\n2. Remote overrides will use \nhttps://yoursite/herokuapp.com/api/v2/notifications/loop\n for the URL line of the applet. Notice that is different from the other type of applets' URL.\n\n3. The Body message of the applet needs to match the override already programmed in Loop app; the reason, reasonDisplay, and duration all need to match what is preset in your Loop app. The \"duration\" is giving in minutes in the body message (vs hours in Loop), and if the override is one that is \"enabled indefinitely\" then the duration is \"infinite\". The \"reason\" is the name of the override but NO EMOJI, and the \"reasonDisplay\" is the override name with the emoji. Check out the samples Body messages for overrides below. You will have to edit your body messages to match your reason and reasonDisplay. The target range and duration of the override does not need to be specified. \n\n\nBody message for override named \"hormones\"\n\n{\"eventType\": \"Temporary Override\", \"reason\": \"hormones\", \"reasonDisplay\": \"\ud83e\udddf\u200d\u2640\ufe0f hormones\", \"secret\": \"your_hashed_api_goes_here!!!\"}\n\n\nBody message for override named \"running\"\n\n{\"eventType\": \"Temporary Override\", \"reason\": \"running\", \"reasonDisplay\": \"\ud83c\udfc3\u200d\u2640\ufe0f running\", \"secret\": \"your_hashed_api_goes_here!!!\"}\n\n\nBody message for override named \"Low Treatment\"\n\n{\"eventType\": \"Temporary Override\", \"reason\": \"Low Treatment\", \"reasonDisplay\": \"\ud83c\udf6c Low Treatment\", \"secret\": \"your_hashed_api_goes_here!!!\"}\n\n\nBody message to cancel any override\n\n{\"eventType\": \"Temporary Override Cancel\", \"secret\": \"your_hashed_api_goes_here!!!\"}\n\n\n\n\n\n\n\n\nClick the \nCreate Action\n button on the bottom of the screen when you finish.\n\n\n\n\n\n\nNow is your chance to change the title of your applet now to something meaningful.  You can turn on notifications, too, using the slider shown. If you turn on the notifications, you will get an alert on your phone and pebble watch when the button press has been successfully deployed.  Finish the IFTTT button by clicking on the Finish button that appears.  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRepeat the setup for new applets for as many automated actions/overrides as you would like to setup.\n\n\n\n\n\n\n\n\n\n\n\nStep 3: Enable IFTTT in your Nightscout site\n\u2301\n\n\nNow that we have cool applets made, we need to give Nightscout some information so that it will accept commands from our applets. It's pretty simple to do...just a couple additions to your Heroku settings.\n\n\n\n\nFind your Maker Key by going to your IFTTT account icon in upper right corner, choose \"My services\" and then click on the Webhooks service, settings.\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\nYou will see your Maker Key as the last part of the URL after the \nuse/\n; copy and paste that last part (the red circled part as shown)\n\n\n\n\n\n\n\n\n\n\n\n\n\nLogin to your Nightscout site host (azure or heroku) and (1) add your Maker Key to the MAKER_KEY line and (2) add \"maker\" to your ENABLE line.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStep 4: Install IFTTT app on your iPhone/Android\n\u2301\n\n\nNow that all the hard work is done, we can take easy street and just add that work to the phone via the IFTTT app. By accessing the IFTTT widget on your iPhone, you'll be able to easily and quickly access the useful buttons you've just created.\n\n\n\n\n\n\nDownload the IFTTT app on your phone and log in using your IFTTT account.\n\n\n\n\n\n\nFor iPhone users, if you swipe right from your iPhone's home screen, you will have the Today view showing.  Scroll to the bottom, click \"edit\". This should show a list of existing widgets, followed by a list of \"more widgets\" with green + signs.  Click on the IFTTT's green circle and the widget will be moved to the top, active widgets area.  You can hold your finger on the three left lines of the IFTTT widget row to drag it to the top of your widget panel, if you prefer to have it as the top-most widget. \n\n\n\n\n\n\n\n\n\n\n\n\n\nIf you end up with more than four IFTTT applets, they will appear in reverse-order of when they were created...which may not be the same as you'd prefer them to appear on your widget bar.  If you'd like to reorder them:\n\n\n\n\ngo into your iPhone's IFTTT app\n\n\nclick on My Applets\n\n\nclick on the gear icon in upper left of screen\n\n\nclick on Widgets\n\n\nclick on the pencil icon in upper right of screen\n\n\nclick and hold the three lines that appear on the right side of the widget that you want to move.  Drag the widget to the order in the list that you'd like it to appear in your widget quickscreen.\n\n\n\n\n\n\n\n\n\n\n\nExtra Credit: Alexa integration\n\u2301\n\n\n\n\nSince you have IFTTT/Maker requests working, you can get it to work with anything that supports IFTTT, including Alexa. You will need to add \"alexa\" to your ENABLE line in your Heroku settings.  And then repeat the steps above, but instead of using \"ButtonWidget\" service we started with earlier (the \"+if\" part of the setup)...you will use the \"AmazonAlexa\" service.\n\n\n\n\n\n\n\n\n\n\n\n\n\nAlexa requests do not need underscores, FYI.", 
            "title": "IFTTT"
        }, 
        {
            "location": "/nightscout/ifttt/#ifttt-integration", 
            "text": "If This, Then That (IFTTT) is a useful Nightscout integration.  By using IFTTT, you can have single button presses on your iPhone that will set an override, log a cannula change, log a sensor change and much more.", 
            "title": "IFTTT Integration"
        }, 
        {
            "location": "/nightscout/ifttt/#step-1-get-your-api-secret-hash", 
            "text": "First we need to gather one thing called your \"hashed API Secret\". In your internet browser, open a \"console\" window while viewing your Nightscout site.  Make sure you have \"authenticated\" your site by using your API secret in the Nightscout settings area (hint: if you see a little padlock in the upper left corner of the site, you haven't authenticated it).  Refresh the site and your hashed secret key will be shown as \"apisecrethash: \"xxxxxxxxxx...\"\"    For Safari users on Mac , you can open the console window by selecting \"Develop\" from the Safari top menu, and then \"Show Page Source\" (if you do not see \"Develop\" in the top menu, activate it by going to Safari   Preferences...   Advanced, and checking the \"Show Develop menu in menu bar\" option).  If you're having problems seeing the apisecrethash, click the little grey triangle next to the \"status isAuthenticated\" line and the objects below it will display (see screenshot).  Your hashed API secret can be copied and pasted from that line, as shown below.  Save that somewhere easy to get to again, because you will be using it later.     For Chrome users , the console window is found through the View   Developer   View Source. Click on the Console tab and scroll to find the \"status isAuthenticated\" row to find your apisecrethash. Copy your API hash to somewhere you can retreive it again, we will be copy/pasting it in Step 2.", 
            "title": "Step 1: Get your API Secret Hash"
        }, 
        {
            "location": "/nightscout/ifttt/#step-2-create-your-applets", 
            "text": "IFTTT calls their little actions that you'll create an \"applet\". I have no idea why. But, I will go along and use their terminology so we are all consistent. We are basically interested in creating applets that will be buttons on your phone to do cool things in Nightscout. So, you'll have a button that will log when you changed your sensor last...letting you see in Nightscout easily just how old a sensor is at any given time. Or you can create a button that will turn on an \"exercise\" override that you already programmed into your kid's Loop app. So, let's make our first applet (aka button).   Get an  IFTTT account          Login to your IFTTT.com account and select click  this link  to get to the page for creating your first \"New Applet\". (You can also get to this Applet creation page by selecting your Account icon in the upper right of the IFTTT website, then clicking on \"Create\".)    In the screen that appears, click on the black \"+this\" part of the screen        In the next screen, type \"button\" in the search field and then click on the red box labelled \"ButtonWidget\"       Connect the button widget by clicking on the large black\"connect\" button twice, once on the main screen and then second on the pop-up window that will appear immediately after that. (You will only have to \"connect\" the widgets for the first applet you make.  After that the widgets will already connected to your IFTTT account.)       Click on the large red \"button press\" box        Click on the black \"+that\" text       Enter \"Webhooks\" in the search field and click on the Webhooks app       Connect the Webhooks app       Select the blue \"Make a Web Request\" box       Now you will have a blank web request template to complete.  Screenshot below is an example of a completed recipe for eating soon IFTTT action. There are four parts you will need to fill in, and they are described below the screenshot.       URL  https://yoursite.herokuapp.com/api/v1/treatments.json  (for all IFTTT recipes that are NOT remote overrides...so things like cannula changes, sensor changes, pump battery changes, etc.) \nChange the \"yoursite\" to your actual site's info.    Method  The method will be  POST    Content Type  The content type will be  application/json .     Body  The content of the body will depend on the action that you would like this particular button press to perform. While many recipes are available, any recipe that log carbs to NS will only display the carbs in Nightscout...Loop will not \"use\" those carbs in treatment or prediction math. The display of carbs in NS though may still be helpful for remote care givers to leave an indication that a low is being noticed and treated.  Some sample content for actions that may be useful in Loop:  Pump Site Change \n{\"enteredBy\": \"IFTTT-button\", \"eventType\": \"Site Change\", \"duration\": 0, \"secret\": \"your_hashed_api_goes_here!!!\"}  CGM Sensor Start \n{\"enteredBy\": \"IFTTT-button\", \"eventType\": \"Sensor Start\", \"duration\": 0, \"secret\": \"your_hashed_api_goes_here!!!\"}  Note \n{\"enteredBy\": \"IFTTT-button\", \"eventType\": \"Note\", \"notes\": \"Hi mom, please don't text me for a bit.  I'm taking a test.\", \"secret\": \"your_hashed_api_goes_here!!!\"}    Special note for IFTTT to set a Remote Override with dev branch  Triggering a remote override with IFTTT takes a couple considerations; \n1. You have followed  the directions for setting up remote overrides  in Nightscout already. \n2. Remote overrides will use  https://yoursite/herokuapp.com/api/v2/notifications/loop  for the URL line of the applet. Notice that is different from the other type of applets' URL. \n3. The Body message of the applet needs to match the override already programmed in Loop app; the reason, reasonDisplay, and duration all need to match what is preset in your Loop app. The \"duration\" is giving in minutes in the body message (vs hours in Loop), and if the override is one that is \"enabled indefinitely\" then the duration is \"infinite\". The \"reason\" is the name of the override but NO EMOJI, and the \"reasonDisplay\" is the override name with the emoji. Check out the samples Body messages for overrides below. You will have to edit your body messages to match your reason and reasonDisplay. The target range and duration of the override does not need to be specified.   Body message for override named \"hormones\" \n{\"eventType\": \"Temporary Override\", \"reason\": \"hormones\", \"reasonDisplay\": \"\ud83e\udddf\u200d\u2640\ufe0f hormones\", \"secret\": \"your_hashed_api_goes_here!!!\"}  Body message for override named \"running\" \n{\"eventType\": \"Temporary Override\", \"reason\": \"running\", \"reasonDisplay\": \"\ud83c\udfc3\u200d\u2640\ufe0f running\", \"secret\": \"your_hashed_api_goes_here!!!\"}  Body message for override named \"Low Treatment\" \n{\"eventType\": \"Temporary Override\", \"reason\": \"Low Treatment\", \"reasonDisplay\": \"\ud83c\udf6c Low Treatment\", \"secret\": \"your_hashed_api_goes_here!!!\"}  Body message to cancel any override \n{\"eventType\": \"Temporary Override Cancel\", \"secret\": \"your_hashed_api_goes_here!!!\"}     Click the  Create Action  button on the bottom of the screen when you finish.    Now is your chance to change the title of your applet now to something meaningful.  You can turn on notifications, too, using the slider shown. If you turn on the notifications, you will get an alert on your phone and pebble watch when the button press has been successfully deployed.  Finish the IFTTT button by clicking on the Finish button that appears.          Repeat the setup for new applets for as many automated actions/overrides as you would like to setup.", 
            "title": "Step 2: Create your \"Applets\""
        }, 
        {
            "location": "/nightscout/ifttt/#step-3-enable-ifttt-in-your-nightscout-site", 
            "text": "Now that we have cool applets made, we need to give Nightscout some information so that it will accept commands from our applets. It's pretty simple to do...just a couple additions to your Heroku settings.   Find your Maker Key by going to your IFTTT account icon in upper right corner, choose \"My services\" and then click on the Webhooks service, settings.          You will see your Maker Key as the last part of the URL after the  use/ ; copy and paste that last part (the red circled part as shown)       Login to your Nightscout site host (azure or heroku) and (1) add your Maker Key to the MAKER_KEY line and (2) add \"maker\" to your ENABLE line.", 
            "title": "Step 3: Enable IFTTT in your Nightscout site"
        }, 
        {
            "location": "/nightscout/ifttt/#step-4-install-ifttt-app-on-your-iphoneandroid", 
            "text": "Now that all the hard work is done, we can take easy street and just add that work to the phone via the IFTTT app. By accessing the IFTTT widget on your iPhone, you'll be able to easily and quickly access the useful buttons you've just created.    Download the IFTTT app on your phone and log in using your IFTTT account.    For iPhone users, if you swipe right from your iPhone's home screen, you will have the Today view showing.  Scroll to the bottom, click \"edit\". This should show a list of existing widgets, followed by a list of \"more widgets\" with green + signs.  Click on the IFTTT's green circle and the widget will be moved to the top, active widgets area.  You can hold your finger on the three left lines of the IFTTT widget row to drag it to the top of your widget panel, if you prefer to have it as the top-most widget.        If you end up with more than four IFTTT applets, they will appear in reverse-order of when they were created...which may not be the same as you'd prefer them to appear on your widget bar.  If you'd like to reorder them:   go into your iPhone's IFTTT app  click on My Applets  click on the gear icon in upper left of screen  click on Widgets  click on the pencil icon in upper right of screen  click and hold the three lines that appear on the right side of the widget that you want to move.  Drag the widget to the order in the list that you'd like it to appear in your widget quickscreen.", 
            "title": "Step 4: Install IFTTT app on your iPhone/Android"
        }, 
        {
            "location": "/nightscout/ifttt/#extra-credit-alexa-integration", 
            "text": "Since you have IFTTT/Maker requests working, you can get it to work with anything that supports IFTTT, including Alexa. You will need to add \"alexa\" to your ENABLE line in your Heroku settings.  And then repeat the steps above, but instead of using \"ButtonWidget\" service we started with earlier (the \"+if\" part of the setup)...you will use the \"AmazonAlexa\" service.       Alexa requests do not need underscores, FYI.", 
            "title": "Extra Credit: Alexa integration"
        }, 
        {
            "location": "/nightscout/pebble/", 
            "text": "Pebble Watchface\n\u2301\n\n\nThe Pebble Watchface called \nSkyLoop Predict\n can be used with either Loop or OpenAPS systems.  You will need to have a Nightscout website setup and integrated in order for the watchface to work.  Simply use your Pebble app to search for the watchface and install it.  In the watchface settings, enter your Nightscout URL in the Data Endpoint field, select Loop for the system, and enter \niob\n in the T1 Name field.  By entering \niob\n, the watchface will display the iob on the watchface.  In addition to the information displayed on the main watchface screen, shaking your wrist will bring up information about the pump battery and reservoir levels.", 
            "title": "Pebble"
        }, 
        {
            "location": "/nightscout/pebble/#pebble-watchface", 
            "text": "The Pebble Watchface called  SkyLoop Predict  can be used with either Loop or OpenAPS systems.  You will need to have a Nightscout website setup and integrated in order for the watchface to work.  Simply use your Pebble app to search for the watchface and install it.  In the watchface settings, enter your Nightscout URL in the Data Endpoint field, select Loop for the system, and enter  iob  in the T1 Name field.  By entering  iob , the watchface will display the iob on the watchface.  In addition to the information displayed on the main watchface screen, shaking your wrist will bring up information about the pump battery and reservoir levels.", 
            "title": "Pebble Watchface"
        }, 
        {
            "location": "/nightscout/pushover/", 
            "text": "Remote notifications\n\u2301\n\n\nWhile Loop app currently sends notifications locally on Loop user's iPhone, parents and caregivers likely want those messages on their phones, too.  We can achieve this functionality through a combination of Nightscout, IFTTT, Google, and Pushover.\n\n\nTraditionally, most people may already know of Pushover alerts through their NS site.  The old Loop docs had set up for how to add your \nPUSHOVER_ANNOUNCEMENT_KEY\n , \nPUSHOVER_API_TOKEN\n, and \nPUSHOVER_USER_KEY\n in your Heroku settings to get notifications on the non-looping phones of parents and caregivers.  The drawback for that method is that you could not necessarily fine-tune the alerts (maybe you wanted battery alarms on your NS website, but not get pushovers for them...a bit hard to separate out the environments that way) and Pushover had a demanding acknowledgment requirement.  If you failed to acknowledge an alert, you may end up getting alarm fatigue fairly quickly as the alarm repeated itself.\n\n\nUsing Pushover \nTHROUGH\n IFTTT however, we can improve the possible notifications and who receives which ones.  For example, a teenage Looper may want notifications when his/her pump site needs changing and when his/her Dexcom is about to expire in the next day.  S/he already gets local notifications on his/her phone via Loop for low reservoir volumes, low pump battery, and Loop failures.  Dexcom app provides high/low BG notifications locally, too.  If s/he were to get those same alarms via Pushover, s/he would inevitably get alarm fatigue.  A remotely-monitoring parent may want additional information, like a pushover alert when the school nurse boluses for lunch, as well as Loop failures, low iPhone battery level for the child, low pump battery, and other such information that might be useful.  Perhaps there's also an emergency contact person that you only want to get high/low BG alerts...you can set that up as well quite easily.\n\n\nThe basic concept is that NS puts out an event that triggers the IFTTT service called Webhooks (old name was \"Maker Webhooks\" hence you may see references to \"maker\" in NS docs).  Actually, there are several types of events that NS has programmed in all ready to use in IFTTT.\n\n\n\n\n\n\n\n\n\nFor this setup, we are going to use the most general logging event called \nns-event\n.  You'll get all the alarms and notifications logged, and then you can decide in subsequent steps which ones you'd actually like to send to your phone for pushover notification.\n\n\nAs a brief roadmap for what we are going to do:\n\n\n\n\nGet necessary accounts setup\n\n\nAdd a folder to your Google Drive\n\n\nMake an IFTTT applet to log NS events to your Google Spreadsheets\n\n\nEnable NS to work with that new IFTTT applet\n\n\nMake an IFTTT applet to send Pushover alert when the Google Spreadsheet is updated\n\n\n\n\nGet Prepped\n\u2301\n\n\nIf you don't already have these steps done, you will need them.  Skip any that you already have done.\n\n\n\n\nSetup a Nightscout site\n\n\nGet an \nIFTTT account\n\n\nGet a \nPushover Account\n\n\nGet a \nGoogle Account\n\n\nDownload the Pushover app onto your phone, and any other phone you'd like to receive Pushover alerts\n\n\nDownload the IFTTT app onto your phone, and any other phone you'd like to use IFTTT applets on\n\n\nLogin to the Pushover and IFTTT apps with your login information\n\n\n\n\nAdd a Google Drive folder\n\u2301\n\n\n\n\nLogin to your Google account and select Google Drive\n\n\n\n\n\n\n\n\n\n\n\n\n\nClick on the blue \"New\" button and create a new folder named IFTTT.\n\n\n\n\n\n\n\n\n\n\n\n\n\nDouble click on the newly created IFTTT folder, select the blue \"New\" button again, and create a new subfolder called \"Nightscout-Alarms\"\n\n\n\n\n\n\n\n\n\n\n\nThis IFTTT/Nightscout-Alarms folder will eventually contain numerous Google Spreadsheets, one for each NS alarm or information that is logged.  As new alarms are triggered, the IFTTT applet we are about to write will add a row to the appropriate spreadsheet logging the time of the alarm and any other reported details that go with the entry.  For now though, your drive will be blank...screenshot below just to give you an idea of where we are going.\n\n\n\n\n\n\n\n\n\nMake 1st IFTTT Applet to Log NS Alarms\n\u2301\n\n\n\n\nLogin to your IFTTT.com account and select the \"New Applet\" button.\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the screen that appears, click on the blue \"+this\" part of the screen\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the next screen, type \"webhooks\" in the search field and then click on the blue connect button\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf this is the first time you are using IFTTT Webhooks service, you will have a \"Connect\" button to select.  If you already have IFTTT applets using Webhooks, you won't see this screen...just move to the next bullet.\n\n\n\n\n\n\n\n\n\n\n\n\n\nClick on the \"receive a web request\" blue box, and then fill in the Event Name as \nns-event\n and then press the \"Create trigger\" button.  (Side note:  the event name used here corresponds to the triggers discussed above for core events that NS already has integrated for IFTTT users.  If you want to, instead, use the other triggers such as ns-warn or ns-urgent, you can.  This example is using the most general trigger so that the options are wider for most users.)\n\n\n\n\n\n\n\n\n\n\n\n\n\nClick on the blue \"+that\" text\n\n\n\n\n\n\n\n\n\n\n\n\n\nEnter \ngoogle\n in the search field and click on the Google Sheets icon\n\n\n\n\n\n\n\n\n\n\n\n\n\nSelect the green \"Add row to spreadsheet\" box\n\n\n\n\n\n\n\n\n\n\n\n\n\nDelete the contents of the \"Spreadsheet Name\" and \"Drive folder path\".  For the \"Spreadsheet Name\", click the \"Add Ingredient\" button and select the \"Value1\".  For the \"Drive folder path\", enter \nIFTTT/Nightscout-Alarms\n.  You do not have to modify the \"Formatted row\" box's contents.  Click the \"Create action\" button at the bottom.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTurn off the toggle for receiving notifications when the applet runs, and then click the Finish button\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou'll now have the finished IFTTT applet that will cause a row to be added to a Google spreadsheet...tracking all your NS notifications and alarms.  If it is the first time that alarm has been logged, the applet will also create the spreadsheet itself.  After a while, your IFTTT/Nightscout-Alarms folder will start to look like the screenshot posted above with numerous spreadsheets for each alarm type.\n\n\n\n\n\n\n\n\n\n\n\nEnable IFTTT Webhooks in your Nightscout site\n\u2301\n\n\n\n\nIf you already have created IFTTT buttons previously to work with your NS site, you can skip this section.  If those buttons are working, then you've already added your MAKER_KEY and \"maker\" to your ENABLE line in Heroku.\n\n\n\n\n\n\nTo actually make that first applet work, we need to enter a \"Maker Key\" to get NS and IFTTT talking to each other.  Find your Maker Key by going to your IFTTT account, Services and then clicking on Webhooks.  (Your screen may not have as many services showing; the example account below just happens to already use several services.)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou will see your Maker Key as the last part of the URL; copy that last part (the red circled part)\n\n\n\n\n\n\n\n\n\n\n\n\n\nNavigate to your Heroku account's settings tab, \"reveal config vars\" and (1) add your Maker Key to the MAKER_KEY line and (2) add \"maker\" to your ENABLE line.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMake 2nd IFTTT Applet to send Pushover notifications\n\u2301\n\n\n\n\nIn your IFTTT account, select the \"New Applet\" button.\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the screen that appears, click on the blue \"+this\" part of the screen\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the next screen, type \"google\" in the search field and then click on the \"Google Sheets\" logo.\n\n\n\n\n\n\n\n\n\n\n\n\n\nClick on the \"New row added to spreadsheet\" as the trigger.\n\n\n\n\n\n\n\n\n\n\n\n\n\nEnter the following information:  Folder path is \nIFTTT/Nightscout-Alarms\n and for the filename you are going to enter the name of the particular NS alarm or information that you would like to get pushover alerts for.  Click on the \"Create trigger\" button to save the trigger.\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis applet can't be created unless your filename (alarm spreadsheet) already exists.  If your 1st applet we created above hasn't run for a long time, the spreadsheets may not exist yet because the alarms haven't triggered.  You have two options...(1) manually create the file in your Google Drive so that you can finish the applet now or (2) wait several days/weeks for the alarms to happen and that will automatically create the files in your Google drive.\n\nIf you choose option 1, here's a partial list of some of the filenames you could create in advance:\n\n\n\n\nLoop isn't looping\n\n\nCannula age 48 hours\n\n\nCannula age 72 hours\n\n\nMeal Bolus\n\n\nWarning, Pump Reservoir Low\n\n\nWarning Uploader Battery is Low\n\n\n\n\nDepending on your alert levels you specified in NS, some of the hours in the titles may vary to match your settings\n\n\n\n\n\n\nClick on the blue \"+that\" text\n\n\n\n\n\n\n\n\n\n\n\n\n\nEnter \npushover\n in the search field and click on the Pushover icon.  If this is your first time linking your IFTTT to Pushover, you will be prompted to enter your Pushover account login and allow IFTTT access.  This only needs to be done once.\n\n\n\n\n\n\n\n\n\n\n\n\n\nSelect the \"Send a Pushover notification\" box\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDelete the contents of the \"Title\" and \"Message\" and \"URL\" boxes.  For the Title, click the \"Add Ingredient\" button and add \nColumnC\n.  For the \"Message\", click the \"Add Ingredient\" button and add the values of various columns from your spreadsheet for the information you would like to include.  For the alerts: \nColumnC\n contains the alarm name, \nColumnA\n is the date/time of the alarm, and \nColumnD\n has more detailed information about the info/alarm.  This is a pretty decent recipe to follow to get the useful information in your notification.\n\n\n\n\n\n\n\n\n\n\n\nSelect the \"Message Priority\" that you would like for this particular alarm type.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSelect the \"Device\" that you would like to receive this particular alarm type.  The devices listed will be all your devices that have Pushover app installed and logged into.  Click \"Create Action\" when you are finished.\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou'll now have made the IFTTT applet that will cause a Pushover notification to a particular device for a particular NS alarm, once the first applet records the alarm in the google spreadsheet.  Keep the \"receive notification when this Applet runs\" toggled off and click the Finish button.\n\n\n\n\n\n\n\n\n\n\n\nRevisit Nightscout Alert Levels\n\u2301\n\n\nPutting all these notifications together may cause you to want to revisit the alert levels you have set in your Heroku settings.  Here's a short summary of NS for the looping-related alerts (Note: the last row, Upbat, is the Looping iPhone battery level for Loop users; or the rig's battery level for OpenAPS users.)  If you'd like some of these alarms for your site and don't currently have them activated (they are all off by default unless specifically turned on), the lines you'd need to add are in the last column.  If you like the default values of the WARN and/or URGENT, you don't have to add those extra lines...just the line to enable the alerts will be sufficient.\n\n\n\n\n\n\n\n\nSETTING\n\n\nDEFAULT\nWARN\n\n\nDEFAULT\nURGENT\n\n\nHEROKU\nSETTINGS\n\n\n\n\n\n\n\n\n\n\nCAGE\n\n\n48\n\n\n72\n\n\nCAGE_ENABLE_ALERTS = true\nCAGE_WARN=XX\nCAGE_URGENT=XX\n\n\n\n\n\n\nSAGE\n\n\n164\n\n\n168\n\n\nSAGE_ENABLE_ALERTS = true\nSAGE_WARN=XX\nSAGE_URGENT=XX\n\n\n\n\n\n\nIAGE\n\n\n48\n\n\n72\n\n\nIAGE_ENABLE_ALERTS = true\nIAGE_WARN=XX\nIAGE_URGENT=XX\n\n\n\n\n\n\nLOOP\n\n\n30\n\n\n60\n\n\nLOOP_ENABLE_ALERTS = true\nLOOP_WARN=XX\nLOOP_URGENT=XX\n\n\n\n\n\n\nOPENAPS\n\n\n30\n\n\n60\n\n\nOPENAPS_ENABLE_ALERTS = true\nOPENAPS_WARN=XX\nOPENAPS_URGENT=XX\n\n\n\n\n\n\nPUMP_CLOCK\n\n\n30\n\n\n60\n\n\nPUMP_ENABLE_ALERTS = true\nPUMP_WARN_CLOCK=XX\nPUMP_URGENT_CLOCK=XX\n\n\n\n\n\n\nPUMP_RES\n\n\n10\n\n\n5\n\n\nPUMP_ENABLE_ALERTS = true\nPUMP_WARN_RES=XX\nPUMP_URGENT_RES=XX\n\n\n\n\n\n\nPUMP_BATT_P\n\n\n30\n\n\n20\n\n\nPUMP_ENABLE_ALERTS = true\nPUMP_WARN_BATT_P=XX\nPUMP_URGENT_BATT_P=XX\n\n\n\n\n\n\nPUMP_BATT_V\n\n\n1.35\n\n\n1.30\n\n\nPUMP_ENABLE_ALERTS = true\nPUMP_WARN_BATT_V=XX\nPUMP_URGENT_BATT_V=XX\n\n\n\n\n\n\nUPBAT\n\n\n30\n\n\n20\n\n\nUPBAT_ENABLE_ALERTS = true\nUPBAT_WARN=XX\nUPBAT_URGENT=XX\n\n\n\n\n\n\n\n\n\nFinal notes\n\u2301\n\n\n\n\n\n\nYou can use other notification services than Pushover in the last part of the second applet.  For example, you could use the SMS service to send text notifications to your iPhone instead of Pushover.  The downside for that is that the SMS service is limited to 100 message each month...some users may exceed that pretty easily.  Another alternative notification would be IFTTT's own Notification service.  This would work well, but does not have the ability to distinguish between devices the way Pushover allows.  If you use IFTTT's Notifications service, every phone using your IFTTT account will get the notices.\n\n\n\n\n\n\nTo be clear, you do \nNOT\n need to have pushover on your ENABLE line nor have \nPUSHOVER_USER_KEY\n, \nPUSHOVER_API_TOKEN\n, or \nPUSHOVER_ANNOUNCEMENT_KEY\n entered into your Heroku settings in order for any of the above to work.  This is not the same Pushover as NS has integrated into its code.  This is actually through IFTTT services, you just need a Pushover account to link to during the 2nd applet setup.\n\n\n\n\n\n\nTo create more notifications, simply repeat the steps for the 2nd applet you created, only this time use a new filename that corresponds to the spreadsheet tracking the alert you'd like notifications for.  You'll end up with multiple applets of the dark blue type (the pushover notifiers) and only a single light blue (NS alarm general collector).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHere are examples of the Meal Bolus and Temp Basal ns-event logging spreadsheets\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe 1st applet can only create up to 2000 active rows in a given spreadsheet.  After that, the applet will automatically create a new spreadsheet.  For most alarms, it may take quite some time to reach 2000 rows of info.  For other alerts, such as temp basals being set, that may fill up rather fast for the average looper.  You can either clean out the data rows periodically to make room, or update your filename in the 2nd applet periodically when a new spreadsheet is made.", 
            "title": "Remote Notifications"
        }, 
        {
            "location": "/nightscout/pushover/#remote-notifications", 
            "text": "While Loop app currently sends notifications locally on Loop user's iPhone, parents and caregivers likely want those messages on their phones, too.  We can achieve this functionality through a combination of Nightscout, IFTTT, Google, and Pushover.  Traditionally, most people may already know of Pushover alerts through their NS site.  The old Loop docs had set up for how to add your  PUSHOVER_ANNOUNCEMENT_KEY  ,  PUSHOVER_API_TOKEN , and  PUSHOVER_USER_KEY  in your Heroku settings to get notifications on the non-looping phones of parents and caregivers.  The drawback for that method is that you could not necessarily fine-tune the alerts (maybe you wanted battery alarms on your NS website, but not get pushovers for them...a bit hard to separate out the environments that way) and Pushover had a demanding acknowledgment requirement.  If you failed to acknowledge an alert, you may end up getting alarm fatigue fairly quickly as the alarm repeated itself.  Using Pushover  THROUGH  IFTTT however, we can improve the possible notifications and who receives which ones.  For example, a teenage Looper may want notifications when his/her pump site needs changing and when his/her Dexcom is about to expire in the next day.  S/he already gets local notifications on his/her phone via Loop for low reservoir volumes, low pump battery, and Loop failures.  Dexcom app provides high/low BG notifications locally, too.  If s/he were to get those same alarms via Pushover, s/he would inevitably get alarm fatigue.  A remotely-monitoring parent may want additional information, like a pushover alert when the school nurse boluses for lunch, as well as Loop failures, low iPhone battery level for the child, low pump battery, and other such information that might be useful.  Perhaps there's also an emergency contact person that you only want to get high/low BG alerts...you can set that up as well quite easily.  The basic concept is that NS puts out an event that triggers the IFTTT service called Webhooks (old name was \"Maker Webhooks\" hence you may see references to \"maker\" in NS docs).  Actually, there are several types of events that NS has programmed in all ready to use in IFTTT.     For this setup, we are going to use the most general logging event called  ns-event .  You'll get all the alarms and notifications logged, and then you can decide in subsequent steps which ones you'd actually like to send to your phone for pushover notification.  As a brief roadmap for what we are going to do:   Get necessary accounts setup  Add a folder to your Google Drive  Make an IFTTT applet to log NS events to your Google Spreadsheets  Enable NS to work with that new IFTTT applet  Make an IFTTT applet to send Pushover alert when the Google Spreadsheet is updated", 
            "title": "Remote notifications"
        }, 
        {
            "location": "/nightscout/pushover/#get-prepped", 
            "text": "If you don't already have these steps done, you will need them.  Skip any that you already have done.   Setup a Nightscout site  Get an  IFTTT account  Get a  Pushover Account  Get a  Google Account  Download the Pushover app onto your phone, and any other phone you'd like to receive Pushover alerts  Download the IFTTT app onto your phone, and any other phone you'd like to use IFTTT applets on  Login to the Pushover and IFTTT apps with your login information", 
            "title": "Get Prepped"
        }, 
        {
            "location": "/nightscout/pushover/#add-a-google-drive-folder", 
            "text": "Login to your Google account and select Google Drive       Click on the blue \"New\" button and create a new folder named IFTTT.       Double click on the newly created IFTTT folder, select the blue \"New\" button again, and create a new subfolder called \"Nightscout-Alarms\"      This IFTTT/Nightscout-Alarms folder will eventually contain numerous Google Spreadsheets, one for each NS alarm or information that is logged.  As new alarms are triggered, the IFTTT applet we are about to write will add a row to the appropriate spreadsheet logging the time of the alarm and any other reported details that go with the entry.  For now though, your drive will be blank...screenshot below just to give you an idea of where we are going.", 
            "title": "Add a Google Drive folder"
        }, 
        {
            "location": "/nightscout/pushover/#make-1st-ifttt-applet-to-log-ns-alarms", 
            "text": "Login to your IFTTT.com account and select the \"New Applet\" button.       In the screen that appears, click on the blue \"+this\" part of the screen       In the next screen, type \"webhooks\" in the search field and then click on the blue connect button       If this is the first time you are using IFTTT Webhooks service, you will have a \"Connect\" button to select.  If you already have IFTTT applets using Webhooks, you won't see this screen...just move to the next bullet.       Click on the \"receive a web request\" blue box, and then fill in the Event Name as  ns-event  and then press the \"Create trigger\" button.  (Side note:  the event name used here corresponds to the triggers discussed above for core events that NS already has integrated for IFTTT users.  If you want to, instead, use the other triggers such as ns-warn or ns-urgent, you can.  This example is using the most general trigger so that the options are wider for most users.)       Click on the blue \"+that\" text       Enter  google  in the search field and click on the Google Sheets icon       Select the green \"Add row to spreadsheet\" box       Delete the contents of the \"Spreadsheet Name\" and \"Drive folder path\".  For the \"Spreadsheet Name\", click the \"Add Ingredient\" button and select the \"Value1\".  For the \"Drive folder path\", enter  IFTTT/Nightscout-Alarms .  You do not have to modify the \"Formatted row\" box's contents.  Click the \"Create action\" button at the bottom.       Turn off the toggle for receiving notifications when the applet runs, and then click the Finish button       You'll now have the finished IFTTT applet that will cause a row to be added to a Google spreadsheet...tracking all your NS notifications and alarms.  If it is the first time that alarm has been logged, the applet will also create the spreadsheet itself.  After a while, your IFTTT/Nightscout-Alarms folder will start to look like the screenshot posted above with numerous spreadsheets for each alarm type.", 
            "title": "Make 1st IFTTT Applet to Log NS Alarms"
        }, 
        {
            "location": "/nightscout/pushover/#enable-ifttt-webhooks-in-your-nightscout-site", 
            "text": "If you already have created IFTTT buttons previously to work with your NS site, you can skip this section.  If those buttons are working, then you've already added your MAKER_KEY and \"maker\" to your ENABLE line in Heroku.    To actually make that first applet work, we need to enter a \"Maker Key\" to get NS and IFTTT talking to each other.  Find your Maker Key by going to your IFTTT account, Services and then clicking on Webhooks.  (Your screen may not have as many services showing; the example account below just happens to already use several services.)           You will see your Maker Key as the last part of the URL; copy that last part (the red circled part)       Navigate to your Heroku account's settings tab, \"reveal config vars\" and (1) add your Maker Key to the MAKER_KEY line and (2) add \"maker\" to your ENABLE line.", 
            "title": "Enable IFTTT Webhooks in your Nightscout site"
        }, 
        {
            "location": "/nightscout/pushover/#make-2nd-ifttt-applet-to-send-pushover-notifications", 
            "text": "In your IFTTT account, select the \"New Applet\" button.       In the screen that appears, click on the blue \"+this\" part of the screen       In the next screen, type \"google\" in the search field and then click on the \"Google Sheets\" logo.       Click on the \"New row added to spreadsheet\" as the trigger.       Enter the following information:  Folder path is  IFTTT/Nightscout-Alarms  and for the filename you are going to enter the name of the particular NS alarm or information that you would like to get pushover alerts for.  Click on the \"Create trigger\" button to save the trigger.       This applet can't be created unless your filename (alarm spreadsheet) already exists.  If your 1st applet we created above hasn't run for a long time, the spreadsheets may not exist yet because the alarms haven't triggered.  You have two options...(1) manually create the file in your Google Drive so that you can finish the applet now or (2) wait several days/weeks for the alarms to happen and that will automatically create the files in your Google drive. \nIf you choose option 1, here's a partial list of some of the filenames you could create in advance:   Loop isn't looping  Cannula age 48 hours  Cannula age 72 hours  Meal Bolus  Warning, Pump Reservoir Low  Warning Uploader Battery is Low   Depending on your alert levels you specified in NS, some of the hours in the titles may vary to match your settings    Click on the blue \"+that\" text       Enter  pushover  in the search field and click on the Pushover icon.  If this is your first time linking your IFTTT to Pushover, you will be prompted to enter your Pushover account login and allow IFTTT access.  This only needs to be done once.       Select the \"Send a Pushover notification\" box        Delete the contents of the \"Title\" and \"Message\" and \"URL\" boxes.  For the Title, click the \"Add Ingredient\" button and add  ColumnC .  For the \"Message\", click the \"Add Ingredient\" button and add the values of various columns from your spreadsheet for the information you would like to include.  For the alerts:  ColumnC  contains the alarm name,  ColumnA  is the date/time of the alarm, and  ColumnD  has more detailed information about the info/alarm.  This is a pretty decent recipe to follow to get the useful information in your notification.      Select the \"Message Priority\" that you would like for this particular alarm type.        Select the \"Device\" that you would like to receive this particular alarm type.  The devices listed will be all your devices that have Pushover app installed and logged into.  Click \"Create Action\" when you are finished.       You'll now have made the IFTTT applet that will cause a Pushover notification to a particular device for a particular NS alarm, once the first applet records the alarm in the google spreadsheet.  Keep the \"receive notification when this Applet runs\" toggled off and click the Finish button.", 
            "title": "Make 2nd IFTTT Applet to send Pushover notifications"
        }, 
        {
            "location": "/nightscout/pushover/#revisit-nightscout-alert-levels", 
            "text": "Putting all these notifications together may cause you to want to revisit the alert levels you have set in your Heroku settings.  Here's a short summary of NS for the looping-related alerts (Note: the last row, Upbat, is the Looping iPhone battery level for Loop users; or the rig's battery level for OpenAPS users.)  If you'd like some of these alarms for your site and don't currently have them activated (they are all off by default unless specifically turned on), the lines you'd need to add are in the last column.  If you like the default values of the WARN and/or URGENT, you don't have to add those extra lines...just the line to enable the alerts will be sufficient.     SETTING  DEFAULT WARN  DEFAULT URGENT  HEROKU SETTINGS      CAGE  48  72  CAGE_ENABLE_ALERTS = true CAGE_WARN=XX CAGE_URGENT=XX    SAGE  164  168  SAGE_ENABLE_ALERTS = true SAGE_WARN=XX SAGE_URGENT=XX    IAGE  48  72  IAGE_ENABLE_ALERTS = true IAGE_WARN=XX IAGE_URGENT=XX    LOOP  30  60  LOOP_ENABLE_ALERTS = true LOOP_WARN=XX LOOP_URGENT=XX    OPENAPS  30  60  OPENAPS_ENABLE_ALERTS = true OPENAPS_WARN=XX OPENAPS_URGENT=XX    PUMP_CLOCK  30  60  PUMP_ENABLE_ALERTS = true PUMP_WARN_CLOCK=XX PUMP_URGENT_CLOCK=XX    PUMP_RES  10  5  PUMP_ENABLE_ALERTS = true PUMP_WARN_RES=XX PUMP_URGENT_RES=XX    PUMP_BATT_P  30  20  PUMP_ENABLE_ALERTS = true PUMP_WARN_BATT_P=XX PUMP_URGENT_BATT_P=XX    PUMP_BATT_V  1.35  1.30  PUMP_ENABLE_ALERTS = true PUMP_WARN_BATT_V=XX PUMP_URGENT_BATT_V=XX    UPBAT  30  20  UPBAT_ENABLE_ALERTS = true UPBAT_WARN=XX UPBAT_URGENT=XX", 
            "title": "Revisit Nightscout Alert Levels"
        }, 
        {
            "location": "/nightscout/pushover/#final-notes", 
            "text": "You can use other notification services than Pushover in the last part of the second applet.  For example, you could use the SMS service to send text notifications to your iPhone instead of Pushover.  The downside for that is that the SMS service is limited to 100 message each month...some users may exceed that pretty easily.  Another alternative notification would be IFTTT's own Notification service.  This would work well, but does not have the ability to distinguish between devices the way Pushover allows.  If you use IFTTT's Notifications service, every phone using your IFTTT account will get the notices.    To be clear, you do  NOT  need to have pushover on your ENABLE line nor have  PUSHOVER_USER_KEY ,  PUSHOVER_API_TOKEN , or  PUSHOVER_ANNOUNCEMENT_KEY  entered into your Heroku settings in order for any of the above to work.  This is not the same Pushover as NS has integrated into its code.  This is actually through IFTTT services, you just need a Pushover account to link to during the 2nd applet setup.    To create more notifications, simply repeat the steps for the 2nd applet you created, only this time use a new filename that corresponds to the spreadsheet tracking the alert you'd like notifications for.  You'll end up with multiple applets of the dark blue type (the pushover notifiers) and only a single light blue (NS alarm general collector).        Here are examples of the Meal Bolus and Temp Basal ns-event logging spreadsheets          The 1st applet can only create up to 2000 active rows in a given spreadsheet.  After that, the applet will automatically create a new spreadsheet.  For most alarms, it may take quite some time to reach 2000 rows of info.  For other alerts, such as temp basals being set, that may fill up rather fast for the average looper.  You can either clean out the data rows periodically to make room, or update your filename in the 2nd applet periodically when a new spreadsheet is made.", 
            "title": "Final notes"
        }, 
        {
            "location": "/nightscout/reports/", 
            "text": "Reports\n\u2301\n\n\nNightscout offers some fantastic data-crunching report tools in the settings area (the upper right corner, three horizontal lines).  You can play around with various date ranges, target ranges, and provide reports to your endocrinologist to review.", 
            "title": "Reports"
        }, 
        {
            "location": "/nightscout/reports/#reports", 
            "text": "Nightscout offers some fantastic data-crunching report tools in the settings area (the upper right corner, three horizontal lines).  You can play around with various date ranges, target ranges, and provide reports to your endocrinologist to review.", 
            "title": "Reports"
        }
    ]
}